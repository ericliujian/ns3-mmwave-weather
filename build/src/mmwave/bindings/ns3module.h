/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03050000
typedef PyAsyncMethods* cmpfunc;
#else
typedef void* cmpfunc;
#endif
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif

#if PY_VERSION_HEX >= 0x03070000 && !defined(PyEval_ThreadsInitialized)
#define PyEval_ThreadsInitialized() 1
#endif


#include "ns3/mmwave-module.h"
#include <ostream>
#include <sstream>
#include <typeinfo>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Address;


extern PyTypeObject *_PyNs3Address_Type;
#define PyNs3Address_Type (*_PyNs3Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;
#define PyNs3Address_wrapper_registry (*_PyNs3Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AllocationRetentionPriority *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AllocationRetentionPriority;


extern PyTypeObject *_PyNs3AllocationRetentionPriority_Type;
#define PyNs3AllocationRetentionPriority_Type (*_PyNs3AllocationRetentionPriority_Type)

extern std::map<void*, PyObject*> *_PyNs3AllocationRetentionPriority_wrapper_registry;
#define PyNs3AllocationRetentionPriority_wrapper_registry (*_PyNs3AllocationRetentionPriority_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Angles *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Angles;


extern PyTypeObject *_PyNs3Angles_Type;
#define PyNs3Angles_Type (*_PyNs3Angles_Type)

extern std::map<void*, PyObject*> *_PyNs3Angles_wrapper_registry;
#define PyNs3Angles_wrapper_registry (*_PyNs3Angles_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject *_PyNs3AttributeConstructionList_Type;
#define PyNs3AttributeConstructionList_Type (*_PyNs3AttributeConstructionList_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;
#define PyNs3AttributeConstructionList_wrapper_registry (*_PyNs3AttributeConstructionList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
#define PyNs3AttributeConstructionListItem_Type (*_PyNs3AttributeConstructionListItem_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;
#define PyNs3AttributeConstructionListItem_wrapper_registry (*_PyNs3AttributeConstructionListItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BandInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BandInfo;


extern PyTypeObject *_PyNs3BandInfo_Type;
#define PyNs3BandInfo_Type (*_PyNs3BandInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3BandInfo_wrapper_registry;
#define PyNs3BandInfo_wrapper_registry (*_PyNs3BandInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Box *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Box;


extern PyTypeObject *_PyNs3Box_Type;
#define PyNs3Box_Type (*_PyNs3Box_Type)

extern std::map<void*, PyObject*> *_PyNs3Box_wrapper_registry;
#define PyNs3Box_wrapper_registry (*_PyNs3Box_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Buffer;


extern PyTypeObject *_PyNs3Buffer_Type;
#define PyNs3Buffer_Type (*_PyNs3Buffer_Type)

extern std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;
#define PyNs3Buffer_wrapper_registry (*_PyNs3Buffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferIterator;


extern PyTypeObject *_PyNs3BufferIterator_Type;
#define PyNs3BufferIterator_Type (*_PyNs3BufferIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;
#define PyNs3BufferIterator_wrapper_registry (*_PyNs3BufferIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BufferSizeLevelBsr *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferSizeLevelBsr;


extern PyTypeObject *_PyNs3BufferSizeLevelBsr_Type;
#define PyNs3BufferSizeLevelBsr_Type (*_PyNs3BufferSizeLevelBsr_Type)

extern std::map<void*, PyObject*> *_PyNs3BufferSizeLevelBsr_wrapper_registry;
#define PyNs3BufferSizeLevelBsr_wrapper_registry (*_PyNs3BufferSizeLevelBsr_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BuildBroadcastListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BuildBroadcastListElement_s;


extern PyTypeObject *_PyNs3BuildBroadcastListElement_s_Type;
#define PyNs3BuildBroadcastListElement_s_Type (*_PyNs3BuildBroadcastListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3BuildBroadcastListElement_s_wrapper_registry;
#define PyNs3BuildBroadcastListElement_s_wrapper_registry (*_PyNs3BuildBroadcastListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BuildDataListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BuildDataListElement_s;


extern PyTypeObject *_PyNs3BuildDataListElement_s_Type;
#define PyNs3BuildDataListElement_s_Type (*_PyNs3BuildDataListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3BuildDataListElement_s_wrapper_registry;
#define PyNs3BuildDataListElement_s_wrapper_registry (*_PyNs3BuildDataListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BuildRarListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BuildRarListElement_s;


extern PyTypeObject *_PyNs3BuildRarListElement_s_Type;
#define PyNs3BuildRarListElement_s_Type (*_PyNs3BuildRarListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3BuildRarListElement_s_wrapper_registry;
#define PyNs3BuildRarListElement_s_wrapper_registry (*_PyNs3BuildRarListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BwPart_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BwPart_s;


extern PyTypeObject *_PyNs3BwPart_s_Type;
#define PyNs3BwPart_s_Type (*_PyNs3BwPart_s_Type)

extern std::map<void*, PyObject*> *_PyNs3BwPart_s_wrapper_registry;
#define PyNs3BwPart_s_wrapper_registry (*_PyNs3BwPart_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIterator;


extern PyTypeObject *_PyNs3ByteTagIterator_Type;
#define PyNs3ByteTagIterator_Type (*_PyNs3ByteTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;
#define PyNs3ByteTagIterator_wrapper_registry (*_PyNs3ByteTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIteratorItem;


extern PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
#define PyNs3ByteTagIteratorItem_Type (*_PyNs3ByteTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;
#define PyNs3ByteTagIteratorItem_wrapper_registry (*_PyNs3ByteTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagList;


extern PyTypeObject *_PyNs3ByteTagList_Type;
#define PyNs3ByteTagList_Type (*_PyNs3ByteTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;
#define PyNs3ByteTagList_wrapper_registry (*_PyNs3ByteTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIterator;


extern PyTypeObject *_PyNs3ByteTagListIterator_Type;
#define PyNs3ByteTagListIterator_Type (*_PyNs3ByteTagListIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;
#define PyNs3ByteTagListIterator_wrapper_registry (*_PyNs3ByteTagListIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIteratorItem;


extern PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
#define PyNs3ByteTagListIteratorItem_Type (*_PyNs3ByteTagListIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;
#define PyNs3ByteTagListIteratorItem_wrapper_registry (*_PyNs3ByteTagListIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject *_PyNs3CallbackBase_Type;
#define PyNs3CallbackBase_Type (*_PyNs3CallbackBase_Type)

extern std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;
#define PyNs3CallbackBase_wrapper_registry (*_PyNs3CallbackBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ConstantVelocityHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantVelocityHelper;


extern PyTypeObject *_PyNs3ConstantVelocityHelper_Type;
#define PyNs3ConstantVelocityHelper_Type (*_PyNs3ConstantVelocityHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3ConstantVelocityHelper_wrapper_registry;
#define PyNs3ConstantVelocityHelper_wrapper_registry (*_PyNs3ConstantVelocityHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CqiConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CqiConfig_s;


extern PyTypeObject *_PyNs3CqiConfig_s_Type;
#define PyNs3CqiConfig_s_Type (*_PyNs3CqiConfig_s_Type)

extern std::map<void*, PyObject*> *_PyNs3CqiConfig_s_wrapper_registry;
#define PyNs3CqiConfig_s_wrapper_registry (*_PyNs3CqiConfig_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CqiListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CqiListElement_s;


extern PyTypeObject *_PyNs3CqiListElement_s_Type;
#define PyNs3CqiListElement_s_Type (*_PyNs3CqiListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3CqiListElement_s_wrapper_registry;
#define PyNs3CqiListElement_s_wrapper_registry (*_PyNs3CqiListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DataOutputCallback *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataOutputCallback;


extern PyTypeObject *_PyNs3DataOutputCallback_Type;
#define PyNs3DataOutputCallback_Type (*_PyNs3DataOutputCallback_Type)

class PyNs3DataOutputCallback__PythonHelper : public ns3::DataOutputCallback
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DataOutputCallback__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3DataOutputCallback_wrapper_registry;
#define PyNs3DataOutputCallback_wrapper_registry (*_PyNs3DataOutputCallback_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DataRate *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRate;


extern PyTypeObject *_PyNs3DataRate_Type;
#define PyNs3DataRate_Type (*_PyNs3DataRate_Type)

extern std::map<void*, PyObject*> *_PyNs3DataRate_wrapper_registry;
#define PyNs3DataRate_wrapper_registry (*_PyNs3DataRate_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeAccessor > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeAccessor;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeAccessor_Type;
#define PyNs3DefaultDeleter__Ns3AttributeAccessor_Type (*_PyNs3DefaultDeleter__Ns3AttributeAccessor_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeAccessor_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeChecker > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeChecker;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeChecker_Type;
#define PyNs3DefaultDeleter__Ns3AttributeChecker_Type (*_PyNs3DefaultDeleter__Ns3AttributeChecker_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeChecker_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::AttributeValue > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3AttributeValue;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3AttributeValue_Type;
#define PyNs3DefaultDeleter__Ns3AttributeValue_Type (*_PyNs3DefaultDeleter__Ns3AttributeValue_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry (*_PyNs3DefaultDeleter__Ns3AttributeValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::CallbackImplBase > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3CallbackImplBase;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3CallbackImplBase_Type;
#define PyNs3DefaultDeleter__Ns3CallbackImplBase_Type (*_PyNs3DefaultDeleter__Ns3CallbackImplBase_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry (*_PyNs3DefaultDeleter__Ns3CallbackImplBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::EpcTft > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3EpcTft;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3EpcTft_Type;
#define PyNs3DefaultDeleter__Ns3EpcTft_Type (*_PyNs3DefaultDeleter__Ns3EpcTft_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3EpcTft_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3EpcTft_wrapper_registry (*_PyNs3DefaultDeleter__Ns3EpcTft_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::EventImpl > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3EventImpl;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3EventImpl_Type;
#define PyNs3DefaultDeleter__Ns3EventImpl_Type (*_PyNs3DefaultDeleter__Ns3EventImpl_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry (*_PyNs3DefaultDeleter__Ns3EventImpl_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::Hash::Implementation > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3HashImplementation;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3HashImplementation_Type;
#define PyNs3DefaultDeleter__Ns3HashImplementation_Type (*_PyNs3DefaultDeleter__Ns3HashImplementation_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry (*_PyNs3DefaultDeleter__Ns3HashImplementation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::LteControlMessage > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3LteControlMessage;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3LteControlMessage_Type;
#define PyNs3DefaultDeleter__Ns3LteControlMessage_Type (*_PyNs3DefaultDeleter__Ns3LteControlMessage_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3LteControlMessage_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3LteControlMessage_wrapper_registry (*_PyNs3DefaultDeleter__Ns3LteControlMessage_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::LteHarqPhy > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3LteHarqPhy;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3LteHarqPhy_Type;
#define PyNs3DefaultDeleter__Ns3LteHarqPhy_Type (*_PyNs3DefaultDeleter__Ns3LteHarqPhy_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3LteHarqPhy_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3LteHarqPhy_wrapper_registry (*_PyNs3DefaultDeleter__Ns3LteHarqPhy_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::NixVector > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3NixVector;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3NixVector_Type;
#define PyNs3DefaultDeleter__Ns3NixVector_Type (*_PyNs3DefaultDeleter__Ns3NixVector_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry (*_PyNs3DefaultDeleter__Ns3NixVector_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::Packet > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3Packet;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3Packet_Type;
#define PyNs3DefaultDeleter__Ns3Packet_Type (*_PyNs3DefaultDeleter__Ns3Packet_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3Packet_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3Packet_wrapper_registry (*_PyNs3DefaultDeleter__Ns3Packet_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::QueueItem > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3QueueItem;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3QueueItem_Type;
#define PyNs3DefaultDeleter__Ns3QueueItem_Type (*_PyNs3DefaultDeleter__Ns3QueueItem_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3QueueItem_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3QueueItem_wrapper_registry (*_PyNs3DefaultDeleter__Ns3QueueItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::SpectrumModel > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3SpectrumModel;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3SpectrumModel_Type;
#define PyNs3DefaultDeleter__Ns3SpectrumModel_Type (*_PyNs3DefaultDeleter__Ns3SpectrumModel_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry (*_PyNs3DefaultDeleter__Ns3SpectrumModel_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::SpectrumSignalParameters > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3SpectrumSignalParameters;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_Type;
#define PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_Type (*_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_wrapper_registry (*_PyNs3DefaultDeleter__Ns3SpectrumSignalParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::SpectrumValue > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3SpectrumValue;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3SpectrumValue_Type;
#define PyNs3DefaultDeleter__Ns3SpectrumValue_Type (*_PyNs3DefaultDeleter__Ns3SpectrumValue_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3SpectrumValue_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3SpectrumValue_wrapper_registry (*_PyNs3DefaultDeleter__Ns3SpectrumValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::TraceSourceAccessor > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3TraceSourceAccessor;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type;
#define PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type (*_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry (*_PyNs3DefaultDeleter__Ns3TraceSourceAccessor_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::VendorSpecificValue > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3VendorSpecificValue;


extern PyTypeObject *_PyNs3DefaultDeleter__Ns3VendorSpecificValue_Type;
#define PyNs3DefaultDeleter__Ns3VendorSpecificValue_Type (*_PyNs3DefaultDeleter__Ns3VendorSpecificValue_Type)

extern std::map<void*, PyObject*> *_PyNs3DefaultDeleter__Ns3VendorSpecificValue_wrapper_registry;
#define PyNs3DefaultDeleter__Ns3VendorSpecificValue_wrapper_registry (*_PyNs3DefaultDeleter__Ns3VendorSpecificValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DlDciListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlDciListElement_s;


extern PyTypeObject *_PyNs3DlDciListElement_s_Type;
#define PyNs3DlDciListElement_s_Type (*_PyNs3DlDciListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3DlDciListElement_s_wrapper_registry;
#define PyNs3DlDciListElement_s_wrapper_registry (*_PyNs3DlDciListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DlInfoListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlInfoListElement_s;


extern PyTypeObject *_PyNs3DlInfoListElement_s_Type;
#define PyNs3DlInfoListElement_s_Type (*_PyNs3DlInfoListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3DlInfoListElement_s_wrapper_registry;
#define PyNs3DlInfoListElement_s_wrapper_registry (*_PyNs3DlInfoListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DlSchedulingCallbackInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlSchedulingCallbackInfo;


extern PyTypeObject *_PyNs3DlSchedulingCallbackInfo_Type;
#define PyNs3DlSchedulingCallbackInfo_Type (*_PyNs3DlSchedulingCallbackInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3DlSchedulingCallbackInfo_wrapper_registry;
#define PyNs3DlSchedulingCallbackInfo_wrapper_registry (*_PyNs3DlSchedulingCallbackInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DrxConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DrxConfig_s;


extern PyTypeObject *_PyNs3DrxConfig_s_Type;
#define PyNs3DrxConfig_s_Type (*_PyNs3DrxConfig_s_Type)

extern std::map<void*, PyObject*> *_PyNs3DrxConfig_s_wrapper_registry;
#define PyNs3DrxConfig_s_wrapper_registry (*_PyNs3DrxConfig_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapProvider;


extern PyTypeObject *_PyNs3EpcEnbS1SapProvider_Type;
#define PyNs3EpcEnbS1SapProvider_Type (*_PyNs3EpcEnbS1SapProvider_Type)

class PyNs3EpcEnbS1SapProvider__PythonHelper : public ns3::EpcEnbS1SapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcEnbS1SapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3EpcEnbS1SapProvider_wrapper_registry;
#define PyNs3EpcEnbS1SapProvider_wrapper_registry (*_PyNs3EpcEnbS1SapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapProvider::BearerToBeSwitched *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapProviderBearerToBeSwitched;


extern PyTypeObject *_PyNs3EpcEnbS1SapProviderBearerToBeSwitched_Type;
#define PyNs3EpcEnbS1SapProviderBearerToBeSwitched_Type (*_PyNs3EpcEnbS1SapProviderBearerToBeSwitched_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcEnbS1SapProviderBearerToBeSwitched_wrapper_registry;
#define PyNs3EpcEnbS1SapProviderBearerToBeSwitched_wrapper_registry (*_PyNs3EpcEnbS1SapProviderBearerToBeSwitched_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapProviderPathSwitchRequestParameters;


extern PyTypeObject *_PyNs3EpcEnbS1SapProviderPathSwitchRequestParameters_Type;
#define PyNs3EpcEnbS1SapProviderPathSwitchRequestParameters_Type (*_PyNs3EpcEnbS1SapProviderPathSwitchRequestParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcEnbS1SapProviderPathSwitchRequestParameters_wrapper_registry;
#define PyNs3EpcEnbS1SapProviderPathSwitchRequestParameters_wrapper_registry (*_PyNs3EpcEnbS1SapProviderPathSwitchRequestParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapUser;


extern PyTypeObject *_PyNs3EpcEnbS1SapUser_Type;
#define PyNs3EpcEnbS1SapUser_Type (*_PyNs3EpcEnbS1SapUser_Type)

class PyNs3EpcEnbS1SapUser__PythonHelper : public ns3::EpcEnbS1SapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcEnbS1SapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3EpcEnbS1SapUser_wrapper_registry;
#define PyNs3EpcEnbS1SapUser_wrapper_registry (*_PyNs3EpcEnbS1SapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters;


extern PyTypeObject *_PyNs3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters_Type;
#define PyNs3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters_Type (*_PyNs3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters_wrapper_registry;
#define PyNs3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters_wrapper_registry (*_PyNs3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters;


extern PyTypeObject *_PyNs3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters_Type;
#define PyNs3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters_Type (*_PyNs3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters_wrapper_registry;
#define PyNs3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters_wrapper_registry (*_PyNs3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2Sap;


extern PyTypeObject *_PyNs3EpcX2Sap_Type;
#define PyNs3EpcX2Sap_Type (*_PyNs3EpcX2Sap_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2Sap_wrapper_registry;
#define PyNs3EpcX2Sap_wrapper_registry (*_PyNs3EpcX2Sap_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::CellInformationItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapCellInformationItem;


extern PyTypeObject *_PyNs3EpcX2SapCellInformationItem_Type;
#define PyNs3EpcX2SapCellInformationItem_Type (*_PyNs3EpcX2SapCellInformationItem_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapCellInformationItem_wrapper_registry;
#define PyNs3EpcX2SapCellInformationItem_wrapper_registry (*_PyNs3EpcX2SapCellInformationItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::CellMeasurementResultItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapCellMeasurementResultItem;


extern PyTypeObject *_PyNs3EpcX2SapCellMeasurementResultItem_Type;
#define PyNs3EpcX2SapCellMeasurementResultItem_Type (*_PyNs3EpcX2SapCellMeasurementResultItem_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapCellMeasurementResultItem_wrapper_registry;
#define PyNs3EpcX2SapCellMeasurementResultItem_wrapper_registry (*_PyNs3EpcX2SapCellMeasurementResultItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::CompositeAvailCapacity *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapCompositeAvailCapacity;


extern PyTypeObject *_PyNs3EpcX2SapCompositeAvailCapacity_Type;
#define PyNs3EpcX2SapCompositeAvailCapacity_Type (*_PyNs3EpcX2SapCompositeAvailCapacity_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapCompositeAvailCapacity_wrapper_registry;
#define PyNs3EpcX2SapCompositeAvailCapacity_wrapper_registry (*_PyNs3EpcX2SapCompositeAvailCapacity_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::ErabAdmittedItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapErabAdmittedItem;


extern PyTypeObject *_PyNs3EpcX2SapErabAdmittedItem_Type;
#define PyNs3EpcX2SapErabAdmittedItem_Type (*_PyNs3EpcX2SapErabAdmittedItem_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapErabAdmittedItem_wrapper_registry;
#define PyNs3EpcX2SapErabAdmittedItem_wrapper_registry (*_PyNs3EpcX2SapErabAdmittedItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::ErabNotAdmittedItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapErabNotAdmittedItem;


extern PyTypeObject *_PyNs3EpcX2SapErabNotAdmittedItem_Type;
#define PyNs3EpcX2SapErabNotAdmittedItem_Type (*_PyNs3EpcX2SapErabNotAdmittedItem_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapErabNotAdmittedItem_wrapper_registry;
#define PyNs3EpcX2SapErabNotAdmittedItem_wrapper_registry (*_PyNs3EpcX2SapErabNotAdmittedItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::ErabToBeSetupItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapErabToBeSetupItem;


extern PyTypeObject *_PyNs3EpcX2SapErabToBeSetupItem_Type;
#define PyNs3EpcX2SapErabToBeSetupItem_Type (*_PyNs3EpcX2SapErabToBeSetupItem_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapErabToBeSetupItem_wrapper_registry;
#define PyNs3EpcX2SapErabToBeSetupItem_wrapper_registry (*_PyNs3EpcX2SapErabToBeSetupItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapErabsSubjectToStatusTransferItem;


extern PyTypeObject *_PyNs3EpcX2SapErabsSubjectToStatusTransferItem_Type;
#define PyNs3EpcX2SapErabsSubjectToStatusTransferItem_Type (*_PyNs3EpcX2SapErabsSubjectToStatusTransferItem_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapErabsSubjectToStatusTransferItem_wrapper_registry;
#define PyNs3EpcX2SapErabsSubjectToStatusTransferItem_wrapper_registry (*_PyNs3EpcX2SapErabsSubjectToStatusTransferItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::HandoverFailedParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapHandoverFailedParams;


extern PyTypeObject *_PyNs3EpcX2SapHandoverFailedParams_Type;
#define PyNs3EpcX2SapHandoverFailedParams_Type (*_PyNs3EpcX2SapHandoverFailedParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapHandoverFailedParams_wrapper_registry;
#define PyNs3EpcX2SapHandoverFailedParams_wrapper_registry (*_PyNs3EpcX2SapHandoverFailedParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::HandoverPreparationFailureParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapHandoverPreparationFailureParams;


extern PyTypeObject *_PyNs3EpcX2SapHandoverPreparationFailureParams_Type;
#define PyNs3EpcX2SapHandoverPreparationFailureParams_Type (*_PyNs3EpcX2SapHandoverPreparationFailureParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapHandoverPreparationFailureParams_wrapper_registry;
#define PyNs3EpcX2SapHandoverPreparationFailureParams_wrapper_registry (*_PyNs3EpcX2SapHandoverPreparationFailureParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::HandoverRequestAckParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapHandoverRequestAckParams;


extern PyTypeObject *_PyNs3EpcX2SapHandoverRequestAckParams_Type;
#define PyNs3EpcX2SapHandoverRequestAckParams_Type (*_PyNs3EpcX2SapHandoverRequestAckParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapHandoverRequestAckParams_wrapper_registry;
#define PyNs3EpcX2SapHandoverRequestAckParams_wrapper_registry (*_PyNs3EpcX2SapHandoverRequestAckParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::HandoverRequestParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapHandoverRequestParams;


extern PyTypeObject *_PyNs3EpcX2SapHandoverRequestParams_Type;
#define PyNs3EpcX2SapHandoverRequestParams_Type (*_PyNs3EpcX2SapHandoverRequestParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapHandoverRequestParams_wrapper_registry;
#define PyNs3EpcX2SapHandoverRequestParams_wrapper_registry (*_PyNs3EpcX2SapHandoverRequestParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::LoadInformationParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapLoadInformationParams;


extern PyTypeObject *_PyNs3EpcX2SapLoadInformationParams_Type;
#define PyNs3EpcX2SapLoadInformationParams_Type (*_PyNs3EpcX2SapLoadInformationParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapLoadInformationParams_wrapper_registry;
#define PyNs3EpcX2SapLoadInformationParams_wrapper_registry (*_PyNs3EpcX2SapLoadInformationParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::RelativeNarrowbandTxBand *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapRelativeNarrowbandTxBand;


extern PyTypeObject *_PyNs3EpcX2SapRelativeNarrowbandTxBand_Type;
#define PyNs3EpcX2SapRelativeNarrowbandTxBand_Type (*_PyNs3EpcX2SapRelativeNarrowbandTxBand_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapRelativeNarrowbandTxBand_wrapper_registry;
#define PyNs3EpcX2SapRelativeNarrowbandTxBand_wrapper_registry (*_PyNs3EpcX2SapRelativeNarrowbandTxBand_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::ResourceStatusUpdateParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapResourceStatusUpdateParams;


extern PyTypeObject *_PyNs3EpcX2SapResourceStatusUpdateParams_Type;
#define PyNs3EpcX2SapResourceStatusUpdateParams_Type (*_PyNs3EpcX2SapResourceStatusUpdateParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapResourceStatusUpdateParams_wrapper_registry;
#define PyNs3EpcX2SapResourceStatusUpdateParams_wrapper_registry (*_PyNs3EpcX2SapResourceStatusUpdateParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::RlcSetupRequest *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapRlcSetupRequest;


extern PyTypeObject *_PyNs3EpcX2SapRlcSetupRequest_Type;
#define PyNs3EpcX2SapRlcSetupRequest_Type (*_PyNs3EpcX2SapRlcSetupRequest_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapRlcSetupRequest_wrapper_registry;
#define PyNs3EpcX2SapRlcSetupRequest_wrapper_registry (*_PyNs3EpcX2SapRlcSetupRequest_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::SecondaryHandoverCompletedParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapSecondaryHandoverCompletedParams;


extern PyTypeObject *_PyNs3EpcX2SapSecondaryHandoverCompletedParams_Type;
#define PyNs3EpcX2SapSecondaryHandoverCompletedParams_Type (*_PyNs3EpcX2SapSecondaryHandoverCompletedParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapSecondaryHandoverCompletedParams_wrapper_registry;
#define PyNs3EpcX2SapSecondaryHandoverCompletedParams_wrapper_registry (*_PyNs3EpcX2SapSecondaryHandoverCompletedParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::SecondaryHandoverParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapSecondaryHandoverParams;


extern PyTypeObject *_PyNs3EpcX2SapSecondaryHandoverParams_Type;
#define PyNs3EpcX2SapSecondaryHandoverParams_Type (*_PyNs3EpcX2SapSecondaryHandoverParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapSecondaryHandoverParams_wrapper_registry;
#define PyNs3EpcX2SapSecondaryHandoverParams_wrapper_registry (*_PyNs3EpcX2SapSecondaryHandoverParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::SnStatusTransferParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapSnStatusTransferParams;


extern PyTypeObject *_PyNs3EpcX2SapSnStatusTransferParams_Type;
#define PyNs3EpcX2SapSnStatusTransferParams_Type (*_PyNs3EpcX2SapSnStatusTransferParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapSnStatusTransferParams_wrapper_registry;
#define PyNs3EpcX2SapSnStatusTransferParams_wrapper_registry (*_PyNs3EpcX2SapSnStatusTransferParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::SwitchConnectionParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapSwitchConnectionParams;


extern PyTypeObject *_PyNs3EpcX2SapSwitchConnectionParams_Type;
#define PyNs3EpcX2SapSwitchConnectionParams_Type (*_PyNs3EpcX2SapSwitchConnectionParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapSwitchConnectionParams_wrapper_registry;
#define PyNs3EpcX2SapSwitchConnectionParams_wrapper_registry (*_PyNs3EpcX2SapSwitchConnectionParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::UeContextReleaseParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapUeContextReleaseParams;


extern PyTypeObject *_PyNs3EpcX2SapUeContextReleaseParams_Type;
#define PyNs3EpcX2SapUeContextReleaseParams_Type (*_PyNs3EpcX2SapUeContextReleaseParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapUeContextReleaseParams_wrapper_registry;
#define PyNs3EpcX2SapUeContextReleaseParams_wrapper_registry (*_PyNs3EpcX2SapUeContextReleaseParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::UeDataParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapUeDataParams;


extern PyTypeObject *_PyNs3EpcX2SapUeDataParams_Type;
#define PyNs3EpcX2SapUeDataParams_Type (*_PyNs3EpcX2SapUeDataParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapUeDataParams_wrapper_registry;
#define PyNs3EpcX2SapUeDataParams_wrapper_registry (*_PyNs3EpcX2SapUeDataParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::UeImsiSinrParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapUeImsiSinrParams;


extern PyTypeObject *_PyNs3EpcX2SapUeImsiSinrParams_Type;
#define PyNs3EpcX2SapUeImsiSinrParams_Type (*_PyNs3EpcX2SapUeImsiSinrParams_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapUeImsiSinrParams_wrapper_registry;
#define PyNs3EpcX2SapUeImsiSinrParams_wrapper_registry (*_PyNs3EpcX2SapUeImsiSinrParams_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::UlHighInterferenceInformationItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapUlHighInterferenceInformationItem;


extern PyTypeObject *_PyNs3EpcX2SapUlHighInterferenceInformationItem_Type;
#define PyNs3EpcX2SapUlHighInterferenceInformationItem_Type (*_PyNs3EpcX2SapUlHighInterferenceInformationItem_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcX2SapUlHighInterferenceInformationItem_wrapper_registry;
#define PyNs3EpcX2SapUlHighInterferenceInformationItem_wrapper_registry (*_PyNs3EpcX2SapUlHighInterferenceInformationItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcX2SapProvider *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapProvider;


extern PyTypeObject *_PyNs3EpcX2SapProvider_Type;
#define PyNs3EpcX2SapProvider_Type (*_PyNs3EpcX2SapProvider_Type)


typedef struct {
    PyObject_HEAD
    ns3::EpcX2SapUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapUser;


extern PyTypeObject *_PyNs3EpcX2SapUser_Type;
#define PyNs3EpcX2SapUser_Type (*_PyNs3EpcX2SapUser_Type)


typedef struct {
    PyObject_HEAD
    ns3::EpsBearer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpsBearer;


extern PyTypeObject *_PyNs3EpsBearer_Type;
#define PyNs3EpsBearer_Type (*_PyNs3EpsBearer_Type)

extern std::map<void*, PyObject*> *_PyNs3EpsBearer_wrapper_registry;
#define PyNs3EpsBearer_wrapper_registry (*_PyNs3EpsBearer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EutranMeasurementMapping *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EutranMeasurementMapping;


extern PyTypeObject *_PyNs3EutranMeasurementMapping_Type;
#define PyNs3EutranMeasurementMapping_Type (*_PyNs3EutranMeasurementMapping_Type)

extern std::map<void*, PyObject*> *_PyNs3EutranMeasurementMapping_wrapper_registry;
#define PyNs3EutranMeasurementMapping_wrapper_registry (*_PyNs3EutranMeasurementMapping_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject *_PyNs3EventId_Type;
#define PyNs3EventId_Type (*_PyNs3EventId_Type)

extern std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;
#define PyNs3EventId_wrapper_registry (*_PyNs3EventId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProvider;


extern PyTypeObject *_PyNs3FfMacCschedSapProvider_Type;
#define PyNs3FfMacCschedSapProvider_Type (*_PyNs3FfMacCschedSapProvider_Type)

class PyNs3FfMacCschedSapProvider__PythonHelper : public ns3::FfMacCschedSapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FfMacCschedSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapProvider_wrapper_registry;
#define PyNs3FfMacCschedSapProvider_wrapper_registry (*_PyNs3FfMacCschedSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProviderCschedCellConfigReqParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapProviderCschedCellConfigReqParameters_Type;
#define PyNs3FfMacCschedSapProviderCschedCellConfigReqParameters_Type (*_PyNs3FfMacCschedSapProviderCschedCellConfigReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapProviderCschedCellConfigReqParameters_wrapper_registry;
#define PyNs3FfMacCschedSapProviderCschedCellConfigReqParameters_wrapper_registry (*_PyNs3FfMacCschedSapProviderCschedCellConfigReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProviderCschedLcConfigReqParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapProviderCschedLcConfigReqParameters_Type;
#define PyNs3FfMacCschedSapProviderCschedLcConfigReqParameters_Type (*_PyNs3FfMacCschedSapProviderCschedLcConfigReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapProviderCschedLcConfigReqParameters_wrapper_registry;
#define PyNs3FfMacCschedSapProviderCschedLcConfigReqParameters_wrapper_registry (*_PyNs3FfMacCschedSapProviderCschedLcConfigReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProviderCschedLcReleaseReqParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapProviderCschedLcReleaseReqParameters_Type;
#define PyNs3FfMacCschedSapProviderCschedLcReleaseReqParameters_Type (*_PyNs3FfMacCschedSapProviderCschedLcReleaseReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapProviderCschedLcReleaseReqParameters_wrapper_registry;
#define PyNs3FfMacCschedSapProviderCschedLcReleaseReqParameters_wrapper_registry (*_PyNs3FfMacCschedSapProviderCschedLcReleaseReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProviderCschedUeConfigReqParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapProviderCschedUeConfigReqParameters_Type;
#define PyNs3FfMacCschedSapProviderCschedUeConfigReqParameters_Type (*_PyNs3FfMacCschedSapProviderCschedUeConfigReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapProviderCschedUeConfigReqParameters_wrapper_registry;
#define PyNs3FfMacCschedSapProviderCschedUeConfigReqParameters_wrapper_registry (*_PyNs3FfMacCschedSapProviderCschedUeConfigReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProviderCschedUeReleaseReqParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapProviderCschedUeReleaseReqParameters_Type;
#define PyNs3FfMacCschedSapProviderCschedUeReleaseReqParameters_Type (*_PyNs3FfMacCschedSapProviderCschedUeReleaseReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapProviderCschedUeReleaseReqParameters_wrapper_registry;
#define PyNs3FfMacCschedSapProviderCschedUeReleaseReqParameters_wrapper_registry (*_PyNs3FfMacCschedSapProviderCschedUeReleaseReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUser;


extern PyTypeObject *_PyNs3FfMacCschedSapUser_Type;
#define PyNs3FfMacCschedSapUser_Type (*_PyNs3FfMacCschedSapUser_Type)

class PyNs3FfMacCschedSapUser__PythonHelper : public ns3::FfMacCschedSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FfMacCschedSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapUser_wrapper_registry;
#define PyNs3FfMacCschedSapUser_wrapper_registry (*_PyNs3FfMacCschedSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedCellConfigCnfParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapUserCschedCellConfigCnfParameters_Type;
#define PyNs3FfMacCschedSapUserCschedCellConfigCnfParameters_Type (*_PyNs3FfMacCschedSapUserCschedCellConfigCnfParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapUserCschedCellConfigCnfParameters_wrapper_registry;
#define PyNs3FfMacCschedSapUserCschedCellConfigCnfParameters_wrapper_registry (*_PyNs3FfMacCschedSapUserCschedCellConfigCnfParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedCellConfigUpdateIndParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_Type;
#define PyNs3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_Type (*_PyNs3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_wrapper_registry;
#define PyNs3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_wrapper_registry (*_PyNs3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedLcConfigCnfParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapUserCschedLcConfigCnfParameters_Type;
#define PyNs3FfMacCschedSapUserCschedLcConfigCnfParameters_Type (*_PyNs3FfMacCschedSapUserCschedLcConfigCnfParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapUserCschedLcConfigCnfParameters_wrapper_registry;
#define PyNs3FfMacCschedSapUserCschedLcConfigCnfParameters_wrapper_registry (*_PyNs3FfMacCschedSapUserCschedLcConfigCnfParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedLcReleaseCnfParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapUserCschedLcReleaseCnfParameters_Type;
#define PyNs3FfMacCschedSapUserCschedLcReleaseCnfParameters_Type (*_PyNs3FfMacCschedSapUserCschedLcReleaseCnfParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapUserCschedLcReleaseCnfParameters_wrapper_registry;
#define PyNs3FfMacCschedSapUserCschedLcReleaseCnfParameters_wrapper_registry (*_PyNs3FfMacCschedSapUserCschedLcReleaseCnfParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedUeConfigCnfParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapUserCschedUeConfigCnfParameters_Type;
#define PyNs3FfMacCschedSapUserCschedUeConfigCnfParameters_Type (*_PyNs3FfMacCschedSapUserCschedUeConfigCnfParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapUserCschedUeConfigCnfParameters_wrapper_registry;
#define PyNs3FfMacCschedSapUserCschedUeConfigCnfParameters_wrapper_registry (*_PyNs3FfMacCschedSapUserCschedUeConfigCnfParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedUeConfigUpdateIndParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_Type;
#define PyNs3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_Type (*_PyNs3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_wrapper_registry;
#define PyNs3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_wrapper_registry (*_PyNs3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedUeReleaseCnfParameters;


extern PyTypeObject *_PyNs3FfMacCschedSapUserCschedUeReleaseCnfParameters_Type;
#define PyNs3FfMacCschedSapUserCschedUeReleaseCnfParameters_Type (*_PyNs3FfMacCschedSapUserCschedUeReleaseCnfParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacCschedSapUserCschedUeReleaseCnfParameters_wrapper_registry;
#define PyNs3FfMacCschedSapUserCschedUeReleaseCnfParameters_wrapper_registry (*_PyNs3FfMacCschedSapUserCschedUeReleaseCnfParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProvider;


extern PyTypeObject *_PyNs3FfMacSchedSapProvider_Type;
#define PyNs3FfMacSchedSapProvider_Type (*_PyNs3FfMacSchedSapProvider_Type)

class PyNs3FfMacSchedSapProvider__PythonHelper : public ns3::FfMacSchedSapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FfMacSchedSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProvider_wrapper_registry;
#define PyNs3FfMacSchedSapProvider_wrapper_registry (*_PyNs3FfMacSchedSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_Type;
#define PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_Type (*_PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_wrapper_registry;
#define PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_wrapper_registry (*_PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapUser;


extern PyTypeObject *_PyNs3FfMacSchedSapUser_Type;
#define PyNs3FfMacSchedSapUser_Type (*_PyNs3FfMacSchedSapUser_Type)

class PyNs3FfMacSchedSapUser__PythonHelper : public ns3::FfMacSchedSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FfMacSchedSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapUser_wrapper_registry;
#define PyNs3FfMacSchedSapUser_wrapper_registry (*_PyNs3FfMacSchedSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapUser::SchedDlConfigIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapUserSchedDlConfigIndParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_Type;
#define PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_Type (*_PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_wrapper_registry;
#define PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_wrapper_registry (*_PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapUser::SchedUlConfigIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapUserSchedUlConfigIndParameters;


extern PyTypeObject *_PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_Type;
#define PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_Type (*_PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_wrapper_registry;
#define PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_wrapper_registry (*_PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::GbrQosInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GbrQosInformation;


extern PyTypeObject *_PyNs3GbrQosInformation_Type;
#define PyNs3GbrQosInformation_Type (*_PyNs3GbrQosInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3GbrQosInformation_wrapper_registry;
#define PyNs3GbrQosInformation_wrapper_registry (*_PyNs3GbrQosInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HarqProcessInfoElement_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HarqProcessInfoElement_t;


extern PyTypeObject *_PyNs3HarqProcessInfoElement_t_Type;
#define PyNs3HarqProcessInfoElement_t_Type (*_PyNs3HarqProcessInfoElement_t_Type)

extern std::map<void*, PyObject*> *_PyNs3HarqProcessInfoElement_t_wrapper_registry;
#define PyNs3HarqProcessInfoElement_t_wrapper_registry (*_PyNs3HarqProcessInfoElement_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Hasher *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Hasher;


extern PyTypeObject *_PyNs3Hasher_Type;
#define PyNs3Hasher_Type (*_PyNs3Hasher_Type)

extern std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;
#define PyNs3Hasher_wrapper_registry (*_PyNs3Hasher_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::HigherLayerSelected_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HigherLayerSelected_s;


extern PyTypeObject *_PyNs3HigherLayerSelected_s_Type;
#define PyNs3HigherLayerSelected_s_Type (*_PyNs3HigherLayerSelected_s_Type)

extern std::map<void*, PyObject*> *_PyNs3HigherLayerSelected_s_wrapper_registry;
#define PyNs3HigherLayerSelected_s_wrapper_registry (*_PyNs3HigherLayerSelected_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ImsiLcidPair_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ImsiLcidPair_t;


extern PyTypeObject *_PyNs3ImsiLcidPair_t_Type;
#define PyNs3ImsiLcidPair_t_Type (*_PyNs3ImsiLcidPair_t_Type)

extern std::map<void*, PyObject*> *_PyNs3ImsiLcidPair_t_wrapper_registry;
#define PyNs3ImsiLcidPair_t_wrapper_registry (*_PyNs3ImsiLcidPair_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Inet6SocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Inet6SocketAddress;


extern PyTypeObject *_PyNs3Inet6SocketAddress_Type;
#define PyNs3Inet6SocketAddress_Type (*_PyNs3Inet6SocketAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3Inet6SocketAddress_wrapper_registry;
#define PyNs3Inet6SocketAddress_wrapper_registry (*_PyNs3Inet6SocketAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::InetSocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InetSocketAddress;


extern PyTypeObject *_PyNs3InetSocketAddress_Type;
#define PyNs3InetSocketAddress_Type (*_PyNs3InetSocketAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3InetSocketAddress_wrapper_registry;
#define PyNs3InetSocketAddress_wrapper_registry (*_PyNs3InetSocketAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Address;


extern PyTypeObject *_PyNs3Ipv4Address_Type;
#define PyNs3Ipv4Address_Type (*_PyNs3Ipv4Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;
#define PyNs3Ipv4Address_wrapper_registry (*_PyNs3Ipv4Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressHelper;


extern PyTypeObject *_PyNs3Ipv4AddressHelper_Type;
#define PyNs3Ipv4AddressHelper_Type (*_PyNs3Ipv4AddressHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4AddressHelper_wrapper_registry;
#define PyNs3Ipv4AddressHelper_wrapper_registry (*_PyNs3Ipv4AddressHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4InterfaceAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4InterfaceAddress;


extern PyTypeObject *_PyNs3Ipv4InterfaceAddress_Type;
#define PyNs3Ipv4InterfaceAddress_Type (*_PyNs3Ipv4InterfaceAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4InterfaceAddress_wrapper_registry;
#define PyNs3Ipv4InterfaceAddress_wrapper_registry (*_PyNs3Ipv4InterfaceAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4InterfaceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4InterfaceContainer;


extern PyTypeObject *_PyNs3Ipv4InterfaceContainer_Type;
#define PyNs3Ipv4InterfaceContainer_Type (*_PyNs3Ipv4InterfaceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4InterfaceContainer_wrapper_registry;
#define PyNs3Ipv4InterfaceContainer_wrapper_registry (*_PyNs3Ipv4InterfaceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Mask *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Mask;


extern PyTypeObject *_PyNs3Ipv4Mask_Type;
#define PyNs3Ipv4Mask_Type (*_PyNs3Ipv4Mask_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;
#define PyNs3Ipv4Mask_wrapper_registry (*_PyNs3Ipv4Mask_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Address;


extern PyTypeObject *_PyNs3Ipv6Address_Type;
#define PyNs3Ipv6Address_Type (*_PyNs3Ipv6Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;
#define PyNs3Ipv6Address_wrapper_registry (*_PyNs3Ipv6Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressHelper;


extern PyTypeObject *_PyNs3Ipv6AddressHelper_Type;
#define PyNs3Ipv6AddressHelper_Type (*_PyNs3Ipv6AddressHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6AddressHelper_wrapper_registry;
#define PyNs3Ipv6AddressHelper_wrapper_registry (*_PyNs3Ipv6AddressHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6InterfaceAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6InterfaceAddress;


extern PyTypeObject *_PyNs3Ipv6InterfaceAddress_Type;
#define PyNs3Ipv6InterfaceAddress_Type (*_PyNs3Ipv6InterfaceAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6InterfaceAddress_wrapper_registry;
#define PyNs3Ipv6InterfaceAddress_wrapper_registry (*_PyNs3Ipv6InterfaceAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6InterfaceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6InterfaceContainer;


extern PyTypeObject *_PyNs3Ipv6InterfaceContainer_Type;
#define PyNs3Ipv6InterfaceContainer_Type (*_PyNs3Ipv6InterfaceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6InterfaceContainer_wrapper_registry;
#define PyNs3Ipv6InterfaceContainer_wrapper_registry (*_PyNs3Ipv6InterfaceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Prefix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Prefix;


extern PyTypeObject *_PyNs3Ipv6Prefix_Type;
#define PyNs3Ipv6Prefix_Type (*_PyNs3Ipv6Prefix_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;
#define PyNs3Ipv6Prefix_wrapper_registry (*_PyNs3Ipv6Prefix_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LogComponent *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogComponent;


extern PyTypeObject *_PyNs3LogComponent_Type;
#define PyNs3LogComponent_Type (*_PyNs3LogComponent_Type)

extern std::map<void*, PyObject*> *_PyNs3LogComponent_wrapper_registry;
#define PyNs3LogComponent_wrapper_registry (*_PyNs3LogComponent_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LogicalChannelConfigListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogicalChannelConfigListElement_s;


extern PyTypeObject *_PyNs3LogicalChannelConfigListElement_s_Type;
#define PyNs3LogicalChannelConfigListElement_s_Type (*_PyNs3LogicalChannelConfigListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3LogicalChannelConfigListElement_s_wrapper_registry;
#define PyNs3LogicalChannelConfigListElement_s_wrapper_registry (*_PyNs3LogicalChannelConfigListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteAnrSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAnrSapProvider;


extern PyTypeObject *_PyNs3LteAnrSapProvider_Type;
#define PyNs3LteAnrSapProvider_Type (*_PyNs3LteAnrSapProvider_Type)

class PyNs3LteAnrSapProvider__PythonHelper : public ns3::LteAnrSapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteAnrSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteAnrSapProvider_wrapper_registry;
#define PyNs3LteAnrSapProvider_wrapper_registry (*_PyNs3LteAnrSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteAnrSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAnrSapUser;


extern PyTypeObject *_PyNs3LteAnrSapUser_Type;
#define PyNs3LteAnrSapUser_Type (*_PyNs3LteAnrSapUser_Type)

class PyNs3LteAnrSapUser__PythonHelper : public ns3::LteAnrSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteAnrSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteAnrSapUser_wrapper_registry;
#define PyNs3LteAnrSapUser_wrapper_registry (*_PyNs3LteAnrSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteAsSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAsSapProvider;


extern PyTypeObject *_PyNs3LteAsSapProvider_Type;
#define PyNs3LteAsSapProvider_Type (*_PyNs3LteAsSapProvider_Type)

class PyNs3LteAsSapProvider__PythonHelper : public ns3::LteAsSapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteAsSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteAsSapProvider_wrapper_registry;
#define PyNs3LteAsSapProvider_wrapper_registry (*_PyNs3LteAsSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteAsSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAsSapUser;


extern PyTypeObject *_PyNs3LteAsSapUser_Type;
#define PyNs3LteAsSapUser_Type (*_PyNs3LteAsSapUser_Type)

class PyNs3LteAsSapUser__PythonHelper : public ns3::LteAsSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteAsSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteAsSapUser_wrapper_registry;
#define PyNs3LteAsSapUser_wrapper_registry (*_PyNs3LteAsSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteCcmMacSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteCcmMacSapProvider;


extern PyTypeObject *_PyNs3LteCcmMacSapProvider_Type;
#define PyNs3LteCcmMacSapProvider_Type (*_PyNs3LteCcmMacSapProvider_Type)

class PyNs3LteCcmMacSapProvider__PythonHelper : public ns3::LteCcmMacSapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteCcmMacSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteCcmMacSapProvider_wrapper_registry;
#define PyNs3LteCcmMacSapProvider_wrapper_registry (*_PyNs3LteCcmMacSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteCcmRrcSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteCcmRrcSapProvider;


extern PyTypeObject *_PyNs3LteCcmRrcSapProvider_Type;
#define PyNs3LteCcmRrcSapProvider_Type (*_PyNs3LteCcmRrcSapProvider_Type)

extern std::map<void*, PyObject*> *_PyNs3LteCcmRrcSapProvider_wrapper_registry;
#define PyNs3LteCcmRrcSapProvider_wrapper_registry (*_PyNs3LteCcmRrcSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteCcmRrcSapProvider::LcsConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteCcmRrcSapProviderLcsConfig;


extern PyTypeObject *_PyNs3LteCcmRrcSapProviderLcsConfig_Type;
#define PyNs3LteCcmRrcSapProviderLcsConfig_Type (*_PyNs3LteCcmRrcSapProviderLcsConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteCcmRrcSapProviderLcsConfig_wrapper_registry;
#define PyNs3LteCcmRrcSapProviderLcsConfig_wrapper_registry (*_PyNs3LteCcmRrcSapProviderLcsConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteCcmRrcSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteCcmRrcSapUser;


extern PyTypeObject *_PyNs3LteCcmRrcSapUser_Type;
#define PyNs3LteCcmRrcSapUser_Type (*_PyNs3LteCcmRrcSapUser_Type)

class PyNs3LteCcmRrcSapUser__PythonHelper : public ns3::LteCcmRrcSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteCcmRrcSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteCcmRrcSapUser_wrapper_registry;
#define PyNs3LteCcmRrcSapUser_wrapper_registry (*_PyNs3LteCcmRrcSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapProvider;


extern PyTypeObject *_PyNs3LteEnbCmacSapProvider_Type;
#define PyNs3LteEnbCmacSapProvider_Type (*_PyNs3LteEnbCmacSapProvider_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbCmacSapProvider_wrapper_registry;
#define PyNs3LteEnbCmacSapProvider_wrapper_registry (*_PyNs3LteEnbCmacSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue;


extern PyTypeObject *_PyNs3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue_Type;
#define PyNs3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue_Type (*_PyNs3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue_wrapper_registry;
#define PyNs3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue_wrapper_registry (*_PyNs3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapProvider::LcInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapProviderLcInfo;


extern PyTypeObject *_PyNs3LteEnbCmacSapProviderLcInfo_Type;
#define PyNs3LteEnbCmacSapProviderLcInfo_Type (*_PyNs3LteEnbCmacSapProviderLcInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbCmacSapProviderLcInfo_wrapper_registry;
#define PyNs3LteEnbCmacSapProviderLcInfo_wrapper_registry (*_PyNs3LteEnbCmacSapProviderLcInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapProvider::RachConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapProviderRachConfig;


extern PyTypeObject *_PyNs3LteEnbCmacSapProviderRachConfig_Type;
#define PyNs3LteEnbCmacSapProviderRachConfig_Type (*_PyNs3LteEnbCmacSapProviderRachConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbCmacSapProviderRachConfig_wrapper_registry;
#define PyNs3LteEnbCmacSapProviderRachConfig_wrapper_registry (*_PyNs3LteEnbCmacSapProviderRachConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapProvider::UeConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapProviderUeConfig;


extern PyTypeObject *_PyNs3LteEnbCmacSapProviderUeConfig_Type;
#define PyNs3LteEnbCmacSapProviderUeConfig_Type (*_PyNs3LteEnbCmacSapProviderUeConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbCmacSapProviderUeConfig_wrapper_registry;
#define PyNs3LteEnbCmacSapProviderUeConfig_wrapper_registry (*_PyNs3LteEnbCmacSapProviderUeConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapUser;


extern PyTypeObject *_PyNs3LteEnbCmacSapUser_Type;
#define PyNs3LteEnbCmacSapUser_Type (*_PyNs3LteEnbCmacSapUser_Type)

class PyNs3LteEnbCmacSapUser__PythonHelper : public ns3::LteEnbCmacSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbCmacSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteEnbCmacSapUser_wrapper_registry;
#define PyNs3LteEnbCmacSapUser_wrapper_registry (*_PyNs3LteEnbCmacSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapUser::UeConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapUserUeConfig;


extern PyTypeObject *_PyNs3LteEnbCmacSapUserUeConfig_Type;
#define PyNs3LteEnbCmacSapUserUeConfig_Type (*_PyNs3LteEnbCmacSapUserUeConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbCmacSapUserUeConfig_wrapper_registry;
#define PyNs3LteEnbCmacSapUserUeConfig_wrapper_registry (*_PyNs3LteEnbCmacSapUserUeConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCphySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCphySapProvider;


extern PyTypeObject *_PyNs3LteEnbCphySapProvider_Type;
#define PyNs3LteEnbCphySapProvider_Type (*_PyNs3LteEnbCphySapProvider_Type)

class PyNs3LteEnbCphySapProvider__PythonHelper : public ns3::LteEnbCphySapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbCphySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteEnbCphySapProvider_wrapper_registry;
#define PyNs3LteEnbCphySapProvider_wrapper_registry (*_PyNs3LteEnbCphySapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCphySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCphySapUser;


extern PyTypeObject *_PyNs3LteEnbCphySapUser_Type;
#define PyNs3LteEnbCphySapUser_Type (*_PyNs3LteEnbCphySapUser_Type)

class PyNs3LteEnbCphySapUser__PythonHelper : public ns3::LteEnbCphySapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbCphySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteEnbCphySapUser_wrapper_registry;
#define PyNs3LteEnbCphySapUser_wrapper_registry (*_PyNs3LteEnbCphySapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCphySapUser::UeAssociatedSinrInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCphySapUserUeAssociatedSinrInfo;


extern PyTypeObject *_PyNs3LteEnbCphySapUserUeAssociatedSinrInfo_Type;
#define PyNs3LteEnbCphySapUserUeAssociatedSinrInfo_Type (*_PyNs3LteEnbCphySapUserUeAssociatedSinrInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbCphySapUserUeAssociatedSinrInfo_wrapper_registry;
#define PyNs3LteEnbCphySapUserUeAssociatedSinrInfo_wrapper_registry (*_PyNs3LteEnbCphySapUserUeAssociatedSinrInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbPhySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbPhySapProvider;


extern PyTypeObject *_PyNs3LteEnbPhySapProvider_Type;
#define PyNs3LteEnbPhySapProvider_Type (*_PyNs3LteEnbPhySapProvider_Type)

class PyNs3LteEnbPhySapProvider__PythonHelper : public ns3::LteEnbPhySapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbPhySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteEnbPhySapProvider_wrapper_registry;
#define PyNs3LteEnbPhySapProvider_wrapper_registry (*_PyNs3LteEnbPhySapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbPhySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbPhySapUser;


extern PyTypeObject *_PyNs3LteEnbPhySapUser_Type;
#define PyNs3LteEnbPhySapUser_Type (*_PyNs3LteEnbPhySapUser_Type)

class PyNs3LteEnbPhySapUser__PythonHelper : public ns3::LteEnbPhySapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbPhySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteEnbPhySapUser_wrapper_registry;
#define PyNs3LteEnbPhySapUser_wrapper_registry (*_PyNs3LteEnbPhySapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteFfConverter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfConverter;


extern PyTypeObject *_PyNs3LteFfConverter_Type;
#define PyNs3LteFfConverter_Type (*_PyNs3LteFfConverter_Type)

extern std::map<void*, PyObject*> *_PyNs3LteFfConverter_wrapper_registry;
#define PyNs3LteFfConverter_wrapper_registry (*_PyNs3LteFfConverter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteFfrRrcSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfrRrcSapProvider;


extern PyTypeObject *_PyNs3LteFfrRrcSapProvider_Type;
#define PyNs3LteFfrRrcSapProvider_Type (*_PyNs3LteFfrRrcSapProvider_Type)

class PyNs3LteFfrRrcSapProvider__PythonHelper : public ns3::LteFfrRrcSapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteFfrRrcSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteFfrRrcSapProvider_wrapper_registry;
#define PyNs3LteFfrRrcSapProvider_wrapper_registry (*_PyNs3LteFfrRrcSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteFfrRrcSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfrRrcSapUser;


extern PyTypeObject *_PyNs3LteFfrRrcSapUser_Type;
#define PyNs3LteFfrRrcSapUser_Type (*_PyNs3LteFfrRrcSapUser_Type)

class PyNs3LteFfrRrcSapUser__PythonHelper : public ns3::LteFfrRrcSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteFfrRrcSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteFfrRrcSapUser_wrapper_registry;
#define PyNs3LteFfrRrcSapUser_wrapper_registry (*_PyNs3LteFfrRrcSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteFlowId_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFlowId_t;


extern PyTypeObject *_PyNs3LteFlowId_t_Type;
#define PyNs3LteFlowId_t_Type (*_PyNs3LteFlowId_t_Type)

extern std::map<void*, PyObject*> *_PyNs3LteFlowId_t_wrapper_registry;
#define PyNs3LteFlowId_t_wrapper_registry (*_PyNs3LteFlowId_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteHandoverManagementSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHandoverManagementSapProvider;


extern PyTypeObject *_PyNs3LteHandoverManagementSapProvider_Type;
#define PyNs3LteHandoverManagementSapProvider_Type (*_PyNs3LteHandoverManagementSapProvider_Type)

class PyNs3LteHandoverManagementSapProvider__PythonHelper : public ns3::LteHandoverManagementSapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteHandoverManagementSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteHandoverManagementSapProvider_wrapper_registry;
#define PyNs3LteHandoverManagementSapProvider_wrapper_registry (*_PyNs3LteHandoverManagementSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteHandoverManagementSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHandoverManagementSapUser;


extern PyTypeObject *_PyNs3LteHandoverManagementSapUser_Type;
#define PyNs3LteHandoverManagementSapUser_Type (*_PyNs3LteHandoverManagementSapUser_Type)

class PyNs3LteHandoverManagementSapUser__PythonHelper : public ns3::LteHandoverManagementSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteHandoverManagementSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteHandoverManagementSapUser_wrapper_registry;
#define PyNs3LteHandoverManagementSapUser_wrapper_registry (*_PyNs3LteHandoverManagementSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteMacSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacSapProvider;


extern PyTypeObject *_PyNs3LteMacSapProvider_Type;
#define PyNs3LteMacSapProvider_Type (*_PyNs3LteMacSapProvider_Type)

class PyNs3LteMacSapProvider__PythonHelper : public ns3::LteMacSapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteMacSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteMacSapProvider_wrapper_registry;
#define PyNs3LteMacSapProvider_wrapper_registry (*_PyNs3LteMacSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteMacSapProvider::ReportBufferStatusParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacSapProviderReportBufferStatusParameters;


extern PyTypeObject *_PyNs3LteMacSapProviderReportBufferStatusParameters_Type;
#define PyNs3LteMacSapProviderReportBufferStatusParameters_Type (*_PyNs3LteMacSapProviderReportBufferStatusParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteMacSapProviderReportBufferStatusParameters_wrapper_registry;
#define PyNs3LteMacSapProviderReportBufferStatusParameters_wrapper_registry (*_PyNs3LteMacSapProviderReportBufferStatusParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteMacSapProvider::TransmitPduParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacSapProviderTransmitPduParameters;


extern PyTypeObject *_PyNs3LteMacSapProviderTransmitPduParameters_Type;
#define PyNs3LteMacSapProviderTransmitPduParameters_Type (*_PyNs3LteMacSapProviderTransmitPduParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteMacSapProviderTransmitPduParameters_wrapper_registry;
#define PyNs3LteMacSapProviderTransmitPduParameters_wrapper_registry (*_PyNs3LteMacSapProviderTransmitPduParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteMacSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacSapUser;


extern PyTypeObject *_PyNs3LteMacSapUser_Type;
#define PyNs3LteMacSapUser_Type (*_PyNs3LteMacSapUser_Type)

class PyNs3LteMacSapUser__PythonHelper : public ns3::LteMacSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteMacSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteMacSapUser_wrapper_registry;
#define PyNs3LteMacSapUser_wrapper_registry (*_PyNs3LteMacSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteMacSapUser::ReceivePduParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacSapUserReceivePduParameters;


extern PyTypeObject *_PyNs3LteMacSapUserReceivePduParameters_Type;
#define PyNs3LteMacSapUserReceivePduParameters_Type (*_PyNs3LteMacSapUserReceivePduParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteMacSapUserReceivePduParameters_wrapper_registry;
#define PyNs3LteMacSapUserReceivePduParameters_wrapper_registry (*_PyNs3LteMacSapUserReceivePduParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteMacSapUser::TxOpportunityParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacSapUserTxOpportunityParameters;


extern PyTypeObject *_PyNs3LteMacSapUserTxOpportunityParameters_Type;
#define PyNs3LteMacSapUserTxOpportunityParameters_Type (*_PyNs3LteMacSapUserTxOpportunityParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteMacSapUserTxOpportunityParameters_wrapper_registry;
#define PyNs3LteMacSapUserTxOpportunityParameters_wrapper_registry (*_PyNs3LteMacSapUserTxOpportunityParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LtePdcpSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpSapProvider;


extern PyTypeObject *_PyNs3LtePdcpSapProvider_Type;
#define PyNs3LtePdcpSapProvider_Type (*_PyNs3LtePdcpSapProvider_Type)

class PyNs3LtePdcpSapProvider__PythonHelper : public ns3::LtePdcpSapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LtePdcpSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LtePdcpSapProvider_wrapper_registry;
#define PyNs3LtePdcpSapProvider_wrapper_registry (*_PyNs3LtePdcpSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LtePdcpSapProvider::TransmitPdcpSduParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpSapProviderTransmitPdcpSduParameters;


extern PyTypeObject *_PyNs3LtePdcpSapProviderTransmitPdcpSduParameters_Type;
#define PyNs3LtePdcpSapProviderTransmitPdcpSduParameters_Type (*_PyNs3LtePdcpSapProviderTransmitPdcpSduParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LtePdcpSapProviderTransmitPdcpSduParameters_wrapper_registry;
#define PyNs3LtePdcpSapProviderTransmitPdcpSduParameters_wrapper_registry (*_PyNs3LtePdcpSapProviderTransmitPdcpSduParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LtePdcpSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpSapUser;


extern PyTypeObject *_PyNs3LtePdcpSapUser_Type;
#define PyNs3LtePdcpSapUser_Type (*_PyNs3LtePdcpSapUser_Type)

class PyNs3LtePdcpSapUser__PythonHelper : public ns3::LtePdcpSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LtePdcpSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LtePdcpSapUser_wrapper_registry;
#define PyNs3LtePdcpSapUser_wrapper_registry (*_PyNs3LtePdcpSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LtePdcpSapUser::ReceivePdcpSduParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpSapUserReceivePdcpSduParameters;


extern PyTypeObject *_PyNs3LtePdcpSapUserReceivePdcpSduParameters_Type;
#define PyNs3LtePdcpSapUserReceivePdcpSduParameters_Type (*_PyNs3LtePdcpSapUserReceivePdcpSduParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LtePdcpSapUserReceivePdcpSduParameters_wrapper_registry;
#define PyNs3LtePdcpSapUserReceivePdcpSduParameters_wrapper_registry (*_PyNs3LtePdcpSapUserReceivePdcpSduParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRlcSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcSapProvider;


extern PyTypeObject *_PyNs3LteRlcSapProvider_Type;
#define PyNs3LteRlcSapProvider_Type (*_PyNs3LteRlcSapProvider_Type)

class PyNs3LteRlcSapProvider__PythonHelper : public ns3::LteRlcSapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlcSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteRlcSapProvider_wrapper_registry;
#define PyNs3LteRlcSapProvider_wrapper_registry (*_PyNs3LteRlcSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRlcSapProvider::TransmitPdcpPduParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcSapProviderTransmitPdcpPduParameters;


extern PyTypeObject *_PyNs3LteRlcSapProviderTransmitPdcpPduParameters_Type;
#define PyNs3LteRlcSapProviderTransmitPdcpPduParameters_Type (*_PyNs3LteRlcSapProviderTransmitPdcpPduParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRlcSapProviderTransmitPdcpPduParameters_wrapper_registry;
#define PyNs3LteRlcSapProviderTransmitPdcpPduParameters_wrapper_registry (*_PyNs3LteRlcSapProviderTransmitPdcpPduParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRlcSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcSapUser;


extern PyTypeObject *_PyNs3LteRlcSapUser_Type;
#define PyNs3LteRlcSapUser_Type (*_PyNs3LteRlcSapUser_Type)

class PyNs3LteRlcSapUser__PythonHelper : public ns3::LteRlcSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlcSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteRlcSapUser_wrapper_registry;
#define PyNs3LteRlcSapUser_wrapper_registry (*_PyNs3LteRlcSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRlcSpecificLteMacSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcSpecificLteMacSapUser;


extern PyTypeObject *_PyNs3LteRlcSpecificLteMacSapUser_Type;
#define PyNs3LteRlcSpecificLteMacSapUser_Type (*_PyNs3LteRlcSpecificLteMacSapUser_Type)

class PyNs3LteRlcSpecificLteMacSapUser__PythonHelper : public ns3::LteRlcSpecificLteMacSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlcSpecificLteMacSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSap;


extern PyTypeObject *_PyNs3LteRrcSap_Type;
#define PyNs3LteRrcSap_Type (*_PyNs3LteRrcSap_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSap_wrapper_registry;
#define PyNs3LteRrcSap_wrapper_registry (*_PyNs3LteRrcSap_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::AntennaInfoCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapAntennaInfoCommon;


extern PyTypeObject *_PyNs3LteRrcSapAntennaInfoCommon_Type;
#define PyNs3LteRrcSapAntennaInfoCommon_Type (*_PyNs3LteRrcSapAntennaInfoCommon_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapAntennaInfoCommon_wrapper_registry;
#define PyNs3LteRrcSapAntennaInfoCommon_wrapper_registry (*_PyNs3LteRrcSapAntennaInfoCommon_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::AntennaInfoDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapAntennaInfoDedicated;


extern PyTypeObject *_PyNs3LteRrcSapAntennaInfoDedicated_Type;
#define PyNs3LteRrcSapAntennaInfoDedicated_Type (*_PyNs3LteRrcSapAntennaInfoDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapAntennaInfoDedicated_wrapper_registry;
#define PyNs3LteRrcSapAntennaInfoDedicated_wrapper_registry (*_PyNs3LteRrcSapAntennaInfoDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::AntennaInfoUl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapAntennaInfoUl;


extern PyTypeObject *_PyNs3LteRrcSapAntennaInfoUl_Type;
#define PyNs3LteRrcSapAntennaInfoUl_Type (*_PyNs3LteRrcSapAntennaInfoUl_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapAntennaInfoUl_wrapper_registry;
#define PyNs3LteRrcSapAntennaInfoUl_wrapper_registry (*_PyNs3LteRrcSapAntennaInfoUl_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::AsConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapAsConfig;


extern PyTypeObject *_PyNs3LteRrcSapAsConfig_Type;
#define PyNs3LteRrcSapAsConfig_Type (*_PyNs3LteRrcSapAsConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapAsConfig_wrapper_registry;
#define PyNs3LteRrcSapAsConfig_wrapper_registry (*_PyNs3LteRrcSapAsConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::BlackCellsToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapBlackCellsToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapBlackCellsToAddMod_Type;
#define PyNs3LteRrcSapBlackCellsToAddMod_Type (*_PyNs3LteRrcSapBlackCellsToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapBlackCellsToAddMod_wrapper_registry;
#define PyNs3LteRrcSapBlackCellsToAddMod_wrapper_registry (*_PyNs3LteRrcSapBlackCellsToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CarrierBandwidthEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCarrierBandwidthEutra;


extern PyTypeObject *_PyNs3LteRrcSapCarrierBandwidthEutra_Type;
#define PyNs3LteRrcSapCarrierBandwidthEutra_Type (*_PyNs3LteRrcSapCarrierBandwidthEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCarrierBandwidthEutra_wrapper_registry;
#define PyNs3LteRrcSapCarrierBandwidthEutra_wrapper_registry (*_PyNs3LteRrcSapCarrierBandwidthEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CarrierFreqEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCarrierFreqEutra;


extern PyTypeObject *_PyNs3LteRrcSapCarrierFreqEutra_Type;
#define PyNs3LteRrcSapCarrierFreqEutra_Type (*_PyNs3LteRrcSapCarrierFreqEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCarrierFreqEutra_wrapper_registry;
#define PyNs3LteRrcSapCarrierFreqEutra_wrapper_registry (*_PyNs3LteRrcSapCarrierFreqEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CellAccessRelatedInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCellAccessRelatedInfo;


extern PyTypeObject *_PyNs3LteRrcSapCellAccessRelatedInfo_Type;
#define PyNs3LteRrcSapCellAccessRelatedInfo_Type (*_PyNs3LteRrcSapCellAccessRelatedInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCellAccessRelatedInfo_wrapper_registry;
#define PyNs3LteRrcSapCellAccessRelatedInfo_wrapper_registry (*_PyNs3LteRrcSapCellAccessRelatedInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CellIdentification *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCellIdentification;


extern PyTypeObject *_PyNs3LteRrcSapCellIdentification_Type;
#define PyNs3LteRrcSapCellIdentification_Type (*_PyNs3LteRrcSapCellIdentification_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCellIdentification_wrapper_registry;
#define PyNs3LteRrcSapCellIdentification_wrapper_registry (*_PyNs3LteRrcSapCellIdentification_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CellSelectionInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCellSelectionInfo;


extern PyTypeObject *_PyNs3LteRrcSapCellSelectionInfo_Type;
#define PyNs3LteRrcSapCellSelectionInfo_Type (*_PyNs3LteRrcSapCellSelectionInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCellSelectionInfo_wrapper_registry;
#define PyNs3LteRrcSapCellSelectionInfo_wrapper_registry (*_PyNs3LteRrcSapCellSelectionInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CellsToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCellsToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapCellsToAddMod_Type;
#define PyNs3LteRrcSapCellsToAddMod_Type (*_PyNs3LteRrcSapCellsToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCellsToAddMod_wrapper_registry;
#define PyNs3LteRrcSapCellsToAddMod_wrapper_registry (*_PyNs3LteRrcSapCellsToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CgiInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCgiInfo;


extern PyTypeObject *_PyNs3LteRrcSapCgiInfo_Type;
#define PyNs3LteRrcSapCgiInfo_Type (*_PyNs3LteRrcSapCgiInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapCgiInfo_wrapper_registry;
#define PyNs3LteRrcSapCgiInfo_wrapper_registry (*_PyNs3LteRrcSapCgiInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::DrbToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapDrbToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapDrbToAddMod_Type;
#define PyNs3LteRrcSapDrbToAddMod_Type (*_PyNs3LteRrcSapDrbToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapDrbToAddMod_wrapper_registry;
#define PyNs3LteRrcSapDrbToAddMod_wrapper_registry (*_PyNs3LteRrcSapDrbToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::FreqInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapFreqInfo;


extern PyTypeObject *_PyNs3LteRrcSapFreqInfo_Type;
#define PyNs3LteRrcSapFreqInfo_Type (*_PyNs3LteRrcSapFreqInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapFreqInfo_wrapper_registry;
#define PyNs3LteRrcSapFreqInfo_wrapper_registry (*_PyNs3LteRrcSapFreqInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::HandoverPreparationInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapHandoverPreparationInfo;


extern PyTypeObject *_PyNs3LteRrcSapHandoverPreparationInfo_Type;
#define PyNs3LteRrcSapHandoverPreparationInfo_Type (*_PyNs3LteRrcSapHandoverPreparationInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapHandoverPreparationInfo_wrapper_registry;
#define PyNs3LteRrcSapHandoverPreparationInfo_wrapper_registry (*_PyNs3LteRrcSapHandoverPreparationInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::LogicalChannelConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapLogicalChannelConfig;


extern PyTypeObject *_PyNs3LteRrcSapLogicalChannelConfig_Type;
#define PyNs3LteRrcSapLogicalChannelConfig_Type (*_PyNs3LteRrcSapLogicalChannelConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapLogicalChannelConfig_wrapper_registry;
#define PyNs3LteRrcSapLogicalChannelConfig_wrapper_registry (*_PyNs3LteRrcSapLogicalChannelConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MasterInformationBlock *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMasterInformationBlock;


extern PyTypeObject *_PyNs3LteRrcSapMasterInformationBlock_Type;
#define PyNs3LteRrcSapMasterInformationBlock_Type (*_PyNs3LteRrcSapMasterInformationBlock_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMasterInformationBlock_wrapper_registry;
#define PyNs3LteRrcSapMasterInformationBlock_wrapper_registry (*_PyNs3LteRrcSapMasterInformationBlock_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasConfig;


extern PyTypeObject *_PyNs3LteRrcSapMeasConfig_Type;
#define PyNs3LteRrcSapMeasConfig_Type (*_PyNs3LteRrcSapMeasConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasConfig_wrapper_registry;
#define PyNs3LteRrcSapMeasConfig_wrapper_registry (*_PyNs3LteRrcSapMeasConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasGapConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasGapConfig;


extern PyTypeObject *_PyNs3LteRrcSapMeasGapConfig_Type;
#define PyNs3LteRrcSapMeasGapConfig_Type (*_PyNs3LteRrcSapMeasGapConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasGapConfig_wrapper_registry;
#define PyNs3LteRrcSapMeasGapConfig_wrapper_registry (*_PyNs3LteRrcSapMeasGapConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasIdToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasIdToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapMeasIdToAddMod_Type;
#define PyNs3LteRrcSapMeasIdToAddMod_Type (*_PyNs3LteRrcSapMeasIdToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasIdToAddMod_wrapper_registry;
#define PyNs3LteRrcSapMeasIdToAddMod_wrapper_registry (*_PyNs3LteRrcSapMeasIdToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasObjectEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasObjectEutra;


extern PyTypeObject *_PyNs3LteRrcSapMeasObjectEutra_Type;
#define PyNs3LteRrcSapMeasObjectEutra_Type (*_PyNs3LteRrcSapMeasObjectEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasObjectEutra_wrapper_registry;
#define PyNs3LteRrcSapMeasObjectEutra_wrapper_registry (*_PyNs3LteRrcSapMeasObjectEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasObjectToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasObjectToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapMeasObjectToAddMod_Type;
#define PyNs3LteRrcSapMeasObjectToAddMod_Type (*_PyNs3LteRrcSapMeasObjectToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasObjectToAddMod_wrapper_registry;
#define PyNs3LteRrcSapMeasObjectToAddMod_wrapper_registry (*_PyNs3LteRrcSapMeasObjectToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResultBestNeighCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResultBestNeighCell;


extern PyTypeObject *_PyNs3LteRrcSapMeasResultBestNeighCell_Type;
#define PyNs3LteRrcSapMeasResultBestNeighCell_Type (*_PyNs3LteRrcSapMeasResultBestNeighCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasResultBestNeighCell_wrapper_registry;
#define PyNs3LteRrcSapMeasResultBestNeighCell_wrapper_registry (*_PyNs3LteRrcSapMeasResultBestNeighCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResultEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResultEutra;


extern PyTypeObject *_PyNs3LteRrcSapMeasResultEutra_Type;
#define PyNs3LteRrcSapMeasResultEutra_Type (*_PyNs3LteRrcSapMeasResultEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasResultEutra_wrapper_registry;
#define PyNs3LteRrcSapMeasResultEutra_wrapper_registry (*_PyNs3LteRrcSapMeasResultEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResultScell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResultScell;


extern PyTypeObject *_PyNs3LteRrcSapMeasResultScell_Type;
#define PyNs3LteRrcSapMeasResultScell_Type (*_PyNs3LteRrcSapMeasResultScell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasResultScell_wrapper_registry;
#define PyNs3LteRrcSapMeasResultScell_wrapper_registry (*_PyNs3LteRrcSapMeasResultScell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResultServFreqList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResultServFreqList;


extern PyTypeObject *_PyNs3LteRrcSapMeasResultServFreqList_Type;
#define PyNs3LteRrcSapMeasResultServFreqList_Type (*_PyNs3LteRrcSapMeasResultServFreqList_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasResultServFreqList_wrapper_registry;
#define PyNs3LteRrcSapMeasResultServFreqList_wrapper_registry (*_PyNs3LteRrcSapMeasResultServFreqList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResults *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResults;


extern PyTypeObject *_PyNs3LteRrcSapMeasResults_Type;
#define PyNs3LteRrcSapMeasResults_Type (*_PyNs3LteRrcSapMeasResults_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasResults_wrapper_registry;
#define PyNs3LteRrcSapMeasResults_wrapper_registry (*_PyNs3LteRrcSapMeasResults_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasurementReport *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasurementReport;


extern PyTypeObject *_PyNs3LteRrcSapMeasurementReport_Type;
#define PyNs3LteRrcSapMeasurementReport_Type (*_PyNs3LteRrcSapMeasurementReport_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMeasurementReport_wrapper_registry;
#define PyNs3LteRrcSapMeasurementReport_wrapper_registry (*_PyNs3LteRrcSapMeasurementReport_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MobilityControlInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMobilityControlInfo;


extern PyTypeObject *_PyNs3LteRrcSapMobilityControlInfo_Type;
#define PyNs3LteRrcSapMobilityControlInfo_Type (*_PyNs3LteRrcSapMobilityControlInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMobilityControlInfo_wrapper_registry;
#define PyNs3LteRrcSapMobilityControlInfo_wrapper_registry (*_PyNs3LteRrcSapMobilityControlInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MobilityStateParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMobilityStateParameters;


extern PyTypeObject *_PyNs3LteRrcSapMobilityStateParameters_Type;
#define PyNs3LteRrcSapMobilityStateParameters_Type (*_PyNs3LteRrcSapMobilityStateParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapMobilityStateParameters_wrapper_registry;
#define PyNs3LteRrcSapMobilityStateParameters_wrapper_registry (*_PyNs3LteRrcSapMobilityStateParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::NonCriticalExtensionConfiguration *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapNonCriticalExtensionConfiguration;


extern PyTypeObject *_PyNs3LteRrcSapNonCriticalExtensionConfiguration_Type;
#define PyNs3LteRrcSapNonCriticalExtensionConfiguration_Type (*_PyNs3LteRrcSapNonCriticalExtensionConfiguration_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapNonCriticalExtensionConfiguration_wrapper_registry;
#define PyNs3LteRrcSapNonCriticalExtensionConfiguration_wrapper_registry (*_PyNs3LteRrcSapNonCriticalExtensionConfiguration_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::NonUlConfiguration *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapNonUlConfiguration;


extern PyTypeObject *_PyNs3LteRrcSapNonUlConfiguration_Type;
#define PyNs3LteRrcSapNonUlConfiguration_Type (*_PyNs3LteRrcSapNonUlConfiguration_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapNonUlConfiguration_wrapper_registry;
#define PyNs3LteRrcSapNonUlConfiguration_wrapper_registry (*_PyNs3LteRrcSapNonUlConfiguration_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PdschConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPdschConfigCommon;


extern PyTypeObject *_PyNs3LteRrcSapPdschConfigCommon_Type;
#define PyNs3LteRrcSapPdschConfigCommon_Type (*_PyNs3LteRrcSapPdschConfigCommon_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPdschConfigCommon_wrapper_registry;
#define PyNs3LteRrcSapPdschConfigCommon_wrapper_registry (*_PyNs3LteRrcSapPdschConfigCommon_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PdschConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPdschConfigDedicated;


extern PyTypeObject *_PyNs3LteRrcSapPdschConfigDedicated_Type;
#define PyNs3LteRrcSapPdschConfigDedicated_Type (*_PyNs3LteRrcSapPdschConfigDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPdschConfigDedicated_wrapper_registry;
#define PyNs3LteRrcSapPdschConfigDedicated_wrapper_registry (*_PyNs3LteRrcSapPdschConfigDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PhysCellIdRange *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPhysCellIdRange;


extern PyTypeObject *_PyNs3LteRrcSapPhysCellIdRange_Type;
#define PyNs3LteRrcSapPhysCellIdRange_Type (*_PyNs3LteRrcSapPhysCellIdRange_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPhysCellIdRange_wrapper_registry;
#define PyNs3LteRrcSapPhysCellIdRange_wrapper_registry (*_PyNs3LteRrcSapPhysCellIdRange_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PhysicalConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPhysicalConfigDedicated;


extern PyTypeObject *_PyNs3LteRrcSapPhysicalConfigDedicated_Type;
#define PyNs3LteRrcSapPhysicalConfigDedicated_Type (*_PyNs3LteRrcSapPhysicalConfigDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPhysicalConfigDedicated_wrapper_registry;
#define PyNs3LteRrcSapPhysicalConfigDedicated_wrapper_registry (*_PyNs3LteRrcSapPhysicalConfigDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PhysicalConfigDedicatedSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPhysicalConfigDedicatedSCell;


extern PyTypeObject *_PyNs3LteRrcSapPhysicalConfigDedicatedSCell_Type;
#define PyNs3LteRrcSapPhysicalConfigDedicatedSCell_Type (*_PyNs3LteRrcSapPhysicalConfigDedicatedSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPhysicalConfigDedicatedSCell_wrapper_registry;
#define PyNs3LteRrcSapPhysicalConfigDedicatedSCell_wrapper_registry (*_PyNs3LteRrcSapPhysicalConfigDedicatedSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PlmnIdentityInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPlmnIdentityInfo;


extern PyTypeObject *_PyNs3LteRrcSapPlmnIdentityInfo_Type;
#define PyNs3LteRrcSapPlmnIdentityInfo_Type (*_PyNs3LteRrcSapPlmnIdentityInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPlmnIdentityInfo_wrapper_registry;
#define PyNs3LteRrcSapPlmnIdentityInfo_wrapper_registry (*_PyNs3LteRrcSapPlmnIdentityInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PrachConfigSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPrachConfigSCell;


extern PyTypeObject *_PyNs3LteRrcSapPrachConfigSCell_Type;
#define PyNs3LteRrcSapPrachConfigSCell_Type (*_PyNs3LteRrcSapPrachConfigSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPrachConfigSCell_wrapper_registry;
#define PyNs3LteRrcSapPrachConfigSCell_wrapper_registry (*_PyNs3LteRrcSapPrachConfigSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PreambleInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPreambleInfo;


extern PyTypeObject *_PyNs3LteRrcSapPreambleInfo_Type;
#define PyNs3LteRrcSapPreambleInfo_Type (*_PyNs3LteRrcSapPreambleInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPreambleInfo_wrapper_registry;
#define PyNs3LteRrcSapPreambleInfo_wrapper_registry (*_PyNs3LteRrcSapPreambleInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PuschConfigDedicatedSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPuschConfigDedicatedSCell;


extern PyTypeObject *_PyNs3LteRrcSapPuschConfigDedicatedSCell_Type;
#define PyNs3LteRrcSapPuschConfigDedicatedSCell_Type (*_PyNs3LteRrcSapPuschConfigDedicatedSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapPuschConfigDedicatedSCell_wrapper_registry;
#define PyNs3LteRrcSapPuschConfigDedicatedSCell_wrapper_registry (*_PyNs3LteRrcSapPuschConfigDedicatedSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::QuantityConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapQuantityConfig;


extern PyTypeObject *_PyNs3LteRrcSapQuantityConfig_Type;
#define PyNs3LteRrcSapQuantityConfig_Type (*_PyNs3LteRrcSapQuantityConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapQuantityConfig_wrapper_registry;
#define PyNs3LteRrcSapQuantityConfig_wrapper_registry (*_PyNs3LteRrcSapQuantityConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RaSupervisionInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRaSupervisionInfo;


extern PyTypeObject *_PyNs3LteRrcSapRaSupervisionInfo_Type;
#define PyNs3LteRrcSapRaSupervisionInfo_Type (*_PyNs3LteRrcSapRaSupervisionInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRaSupervisionInfo_wrapper_registry;
#define PyNs3LteRrcSapRaSupervisionInfo_wrapper_registry (*_PyNs3LteRrcSapRaSupervisionInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RachConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRachConfigCommon;


extern PyTypeObject *_PyNs3LteRrcSapRachConfigCommon_Type;
#define PyNs3LteRrcSapRachConfigCommon_Type (*_PyNs3LteRrcSapRachConfigCommon_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRachConfigCommon_wrapper_registry;
#define PyNs3LteRrcSapRachConfigCommon_wrapper_registry (*_PyNs3LteRrcSapRachConfigCommon_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RachConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRachConfigDedicated;


extern PyTypeObject *_PyNs3LteRrcSapRachConfigDedicated_Type;
#define PyNs3LteRrcSapRachConfigDedicated_Type (*_PyNs3LteRrcSapRachConfigDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRachConfigDedicated_wrapper_registry;
#define PyNs3LteRrcSapRachConfigDedicated_wrapper_registry (*_PyNs3LteRrcSapRachConfigDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigCommon;


extern PyTypeObject *_PyNs3LteRrcSapRadioResourceConfigCommon_Type;
#define PyNs3LteRrcSapRadioResourceConfigCommon_Type (*_PyNs3LteRrcSapRadioResourceConfigCommon_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRadioResourceConfigCommon_wrapper_registry;
#define PyNs3LteRrcSapRadioResourceConfigCommon_wrapper_registry (*_PyNs3LteRrcSapRadioResourceConfigCommon_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigCommonSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigCommonSCell;


extern PyTypeObject *_PyNs3LteRrcSapRadioResourceConfigCommonSCell_Type;
#define PyNs3LteRrcSapRadioResourceConfigCommonSCell_Type (*_PyNs3LteRrcSapRadioResourceConfigCommonSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRadioResourceConfigCommonSCell_wrapper_registry;
#define PyNs3LteRrcSapRadioResourceConfigCommonSCell_wrapper_registry (*_PyNs3LteRrcSapRadioResourceConfigCommonSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigCommonSib *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigCommonSib;


extern PyTypeObject *_PyNs3LteRrcSapRadioResourceConfigCommonSib_Type;
#define PyNs3LteRrcSapRadioResourceConfigCommonSib_Type (*_PyNs3LteRrcSapRadioResourceConfigCommonSib_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRadioResourceConfigCommonSib_wrapper_registry;
#define PyNs3LteRrcSapRadioResourceConfigCommonSib_wrapper_registry (*_PyNs3LteRrcSapRadioResourceConfigCommonSib_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigDedicated;


extern PyTypeObject *_PyNs3LteRrcSapRadioResourceConfigDedicated_Type;
#define PyNs3LteRrcSapRadioResourceConfigDedicated_Type (*_PyNs3LteRrcSapRadioResourceConfigDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRadioResourceConfigDedicated_wrapper_registry;
#define PyNs3LteRrcSapRadioResourceConfigDedicated_wrapper_registry (*_PyNs3LteRrcSapRadioResourceConfigDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigDedicatedSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigDedicatedSCell;


extern PyTypeObject *_PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_Type;
#define PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_Type (*_PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_wrapper_registry;
#define PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_wrapper_registry (*_PyNs3LteRrcSapRadioResourceConfigDedicatedSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ReestabUeIdentity *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapReestabUeIdentity;


extern PyTypeObject *_PyNs3LteRrcSapReestabUeIdentity_Type;
#define PyNs3LteRrcSapReestabUeIdentity_Type (*_PyNs3LteRrcSapReestabUeIdentity_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapReestabUeIdentity_wrapper_registry;
#define PyNs3LteRrcSapReestabUeIdentity_wrapper_registry (*_PyNs3LteRrcSapReestabUeIdentity_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ReportConfigEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapReportConfigEutra;


extern PyTypeObject *_PyNs3LteRrcSapReportConfigEutra_Type;
#define PyNs3LteRrcSapReportConfigEutra_Type (*_PyNs3LteRrcSapReportConfigEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapReportConfigEutra_wrapper_registry;
#define PyNs3LteRrcSapReportConfigEutra_wrapper_registry (*_PyNs3LteRrcSapReportConfigEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ReportConfigToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapReportConfigToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapReportConfigToAddMod_Type;
#define PyNs3LteRrcSapReportConfigToAddMod_Type (*_PyNs3LteRrcSapReportConfigToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapReportConfigToAddMod_wrapper_registry;
#define PyNs3LteRrcSapReportConfigToAddMod_wrapper_registry (*_PyNs3LteRrcSapReportConfigToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RlcConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRlcConfig;


extern PyTypeObject *_PyNs3LteRrcSapRlcConfig_Type;
#define PyNs3LteRrcSapRlcConfig_Type (*_PyNs3LteRrcSapRlcConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRlcConfig_wrapper_registry;
#define PyNs3LteRrcSapRlcConfig_wrapper_registry (*_PyNs3LteRrcSapRlcConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReconfiguration *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReconfiguration;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReconfiguration_Type;
#define PyNs3LteRrcSapRrcConnectionReconfiguration_Type (*_PyNs3LteRrcSapRrcConnectionReconfiguration_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReconfiguration_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReconfiguration_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReconfiguration_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReconfigurationCompleted *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReconfigurationCompleted;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_Type;
#define PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_Type (*_PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishment *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishment;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReestablishment_Type;
#define PyNs3LteRrcSapRrcConnectionReestablishment_Type (*_PyNs3LteRrcSapRrcConnectionReestablishment_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReestablishment_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReestablishment_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReestablishment_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishmentComplete *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishmentComplete;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReestablishmentComplete_Type;
#define PyNs3LteRrcSapRrcConnectionReestablishmentComplete_Type (*_PyNs3LteRrcSapRrcConnectionReestablishmentComplete_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReestablishmentComplete_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReestablishmentComplete_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReestablishmentComplete_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishmentReject *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishmentReject;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReestablishmentReject_Type;
#define PyNs3LteRrcSapRrcConnectionReestablishmentReject_Type (*_PyNs3LteRrcSapRrcConnectionReestablishmentReject_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReestablishmentReject_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReestablishmentReject_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReestablishmentReject_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishmentRequest *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishmentRequest;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReestablishmentRequest_Type;
#define PyNs3LteRrcSapRrcConnectionReestablishmentRequest_Type (*_PyNs3LteRrcSapRrcConnectionReestablishmentRequest_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReestablishmentRequest_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReestablishmentRequest_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReestablishmentRequest_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReject *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReject;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionReject_Type;
#define PyNs3LteRrcSapRrcConnectionReject_Type (*_PyNs3LteRrcSapRrcConnectionReject_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionReject_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionReject_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionReject_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionRelease *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionRelease;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionRelease_Type;
#define PyNs3LteRrcSapRrcConnectionRelease_Type (*_PyNs3LteRrcSapRrcConnectionRelease_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionRelease_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionRelease_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionRelease_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionRequest *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionRequest;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionRequest_Type;
#define PyNs3LteRrcSapRrcConnectionRequest_Type (*_PyNs3LteRrcSapRrcConnectionRequest_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionRequest_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionRequest_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionRequest_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionSetup *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionSetup;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionSetup_Type;
#define PyNs3LteRrcSapRrcConnectionSetup_Type (*_PyNs3LteRrcSapRrcConnectionSetup_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionSetup_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionSetup_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionSetup_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionSetupCompleted *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionSetupCompleted;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionSetupCompleted_Type;
#define PyNs3LteRrcSapRrcConnectionSetupCompleted_Type (*_PyNs3LteRrcSapRrcConnectionSetupCompleted_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionSetupCompleted_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionSetupCompleted_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionSetupCompleted_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionSwitch *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionSwitch;


extern PyTypeObject *_PyNs3LteRrcSapRrcConnectionSwitch_Type;
#define PyNs3LteRrcSapRrcConnectionSwitch_Type (*_PyNs3LteRrcSapRrcConnectionSwitch_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapRrcConnectionSwitch_wrapper_registry;
#define PyNs3LteRrcSapRrcConnectionSwitch_wrapper_registry (*_PyNs3LteRrcSapRrcConnectionSwitch_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SCellToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSCellToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapSCellToAddMod_Type;
#define PyNs3LteRrcSapSCellToAddMod_Type (*_PyNs3LteRrcSapSCellToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSCellToAddMod_wrapper_registry;
#define PyNs3LteRrcSapSCellToAddMod_wrapper_registry (*_PyNs3LteRrcSapSCellToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SoundingRsUlConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSoundingRsUlConfigCommon;


extern PyTypeObject *_PyNs3LteRrcSapSoundingRsUlConfigCommon_Type;
#define PyNs3LteRrcSapSoundingRsUlConfigCommon_Type (*_PyNs3LteRrcSapSoundingRsUlConfigCommon_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSoundingRsUlConfigCommon_wrapper_registry;
#define PyNs3LteRrcSapSoundingRsUlConfigCommon_wrapper_registry (*_PyNs3LteRrcSapSoundingRsUlConfigCommon_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SoundingRsUlConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSoundingRsUlConfigDedicated;


extern PyTypeObject *_PyNs3LteRrcSapSoundingRsUlConfigDedicated_Type;
#define PyNs3LteRrcSapSoundingRsUlConfigDedicated_Type (*_PyNs3LteRrcSapSoundingRsUlConfigDedicated_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSoundingRsUlConfigDedicated_wrapper_registry;
#define PyNs3LteRrcSapSoundingRsUlConfigDedicated_wrapper_registry (*_PyNs3LteRrcSapSoundingRsUlConfigDedicated_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SpeedStatePars *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSpeedStatePars;


extern PyTypeObject *_PyNs3LteRrcSapSpeedStatePars_Type;
#define PyNs3LteRrcSapSpeedStatePars_Type (*_PyNs3LteRrcSapSpeedStatePars_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSpeedStatePars_wrapper_registry;
#define PyNs3LteRrcSapSpeedStatePars_wrapper_registry (*_PyNs3LteRrcSapSpeedStatePars_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SpeedStateScaleFactors *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSpeedStateScaleFactors;


extern PyTypeObject *_PyNs3LteRrcSapSpeedStateScaleFactors_Type;
#define PyNs3LteRrcSapSpeedStateScaleFactors_Type (*_PyNs3LteRrcSapSpeedStateScaleFactors_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSpeedStateScaleFactors_wrapper_registry;
#define PyNs3LteRrcSapSpeedStateScaleFactors_wrapper_registry (*_PyNs3LteRrcSapSpeedStateScaleFactors_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SrbToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSrbToAddMod;


extern PyTypeObject *_PyNs3LteRrcSapSrbToAddMod_Type;
#define PyNs3LteRrcSapSrbToAddMod_Type (*_PyNs3LteRrcSapSrbToAddMod_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSrbToAddMod_wrapper_registry;
#define PyNs3LteRrcSapSrbToAddMod_wrapper_registry (*_PyNs3LteRrcSapSrbToAddMod_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SystemInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSystemInformation;


extern PyTypeObject *_PyNs3LteRrcSapSystemInformation_Type;
#define PyNs3LteRrcSapSystemInformation_Type (*_PyNs3LteRrcSapSystemInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSystemInformation_wrapper_registry;
#define PyNs3LteRrcSapSystemInformation_wrapper_registry (*_PyNs3LteRrcSapSystemInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SystemInformationBlockType1 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSystemInformationBlockType1;


extern PyTypeObject *_PyNs3LteRrcSapSystemInformationBlockType1_Type;
#define PyNs3LteRrcSapSystemInformationBlockType1_Type (*_PyNs3LteRrcSapSystemInformationBlockType1_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSystemInformationBlockType1_wrapper_registry;
#define PyNs3LteRrcSapSystemInformationBlockType1_wrapper_registry (*_PyNs3LteRrcSapSystemInformationBlockType1_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SystemInformationBlockType2 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSystemInformationBlockType2;


extern PyTypeObject *_PyNs3LteRrcSapSystemInformationBlockType2_Type;
#define PyNs3LteRrcSapSystemInformationBlockType2_Type (*_PyNs3LteRrcSapSystemInformationBlockType2_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapSystemInformationBlockType2_wrapper_registry;
#define PyNs3LteRrcSapSystemInformationBlockType2_wrapper_registry (*_PyNs3LteRrcSapSystemInformationBlockType2_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ThresholdEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapThresholdEutra;


extern PyTypeObject *_PyNs3LteRrcSapThresholdEutra_Type;
#define PyNs3LteRrcSapThresholdEutra_Type (*_PyNs3LteRrcSapThresholdEutra_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapThresholdEutra_wrapper_registry;
#define PyNs3LteRrcSapThresholdEutra_wrapper_registry (*_PyNs3LteRrcSapThresholdEutra_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::UlConfiguration *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapUlConfiguration;


extern PyTypeObject *_PyNs3LteRrcSapUlConfiguration_Type;
#define PyNs3LteRrcSapUlConfiguration_Type (*_PyNs3LteRrcSapUlConfiguration_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapUlConfiguration_wrapper_registry;
#define PyNs3LteRrcSapUlConfiguration_wrapper_registry (*_PyNs3LteRrcSapUlConfiguration_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::UlPowerControlCommonSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapUlPowerControlCommonSCell;


extern PyTypeObject *_PyNs3LteRrcSapUlPowerControlCommonSCell_Type;
#define PyNs3LteRrcSapUlPowerControlCommonSCell_Type (*_PyNs3LteRrcSapUlPowerControlCommonSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapUlPowerControlCommonSCell_wrapper_registry;
#define PyNs3LteRrcSapUlPowerControlCommonSCell_wrapper_registry (*_PyNs3LteRrcSapUlPowerControlCommonSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::UlPowerControlDedicatedSCell *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapUlPowerControlDedicatedSCell;


extern PyTypeObject *_PyNs3LteRrcSapUlPowerControlDedicatedSCell_Type;
#define PyNs3LteRrcSapUlPowerControlDedicatedSCell_Type (*_PyNs3LteRrcSapUlPowerControlDedicatedSCell_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRrcSapUlPowerControlDedicatedSCell_wrapper_registry;
#define PyNs3LteRrcSapUlPowerControlDedicatedSCell_wrapper_registry (*_PyNs3LteRrcSapUlPowerControlDedicatedSCell_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumValueHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumValueHelper;


extern PyTypeObject *_PyNs3LteSpectrumValueHelper_Type;
#define PyNs3LteSpectrumValueHelper_Type (*_PyNs3LteSpectrumValueHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3LteSpectrumValueHelper_wrapper_registry;
#define PyNs3LteSpectrumValueHelper_wrapper_registry (*_PyNs3LteSpectrumValueHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCcmRrcSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCcmRrcSapProvider;


extern PyTypeObject *_PyNs3LteUeCcmRrcSapProvider_Type;
#define PyNs3LteUeCcmRrcSapProvider_Type (*_PyNs3LteUeCcmRrcSapProvider_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeCcmRrcSapProvider_wrapper_registry;
#define PyNs3LteUeCcmRrcSapProvider_wrapper_registry (*_PyNs3LteUeCcmRrcSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCcmRrcSapProvider::LcsConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCcmRrcSapProviderLcsConfig;


extern PyTypeObject *_PyNs3LteUeCcmRrcSapProviderLcsConfig_Type;
#define PyNs3LteUeCcmRrcSapProviderLcsConfig_Type (*_PyNs3LteUeCcmRrcSapProviderLcsConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeCcmRrcSapProviderLcsConfig_wrapper_registry;
#define PyNs3LteUeCcmRrcSapProviderLcsConfig_wrapper_registry (*_PyNs3LteUeCcmRrcSapProviderLcsConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCcmRrcSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCcmRrcSapUser;


extern PyTypeObject *_PyNs3LteUeCcmRrcSapUser_Type;
#define PyNs3LteUeCcmRrcSapUser_Type (*_PyNs3LteUeCcmRrcSapUser_Type)

class PyNs3LteUeCcmRrcSapUser__PythonHelper : public ns3::LteUeCcmRrcSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeCcmRrcSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteUeCcmRrcSapUser_wrapper_registry;
#define PyNs3LteUeCcmRrcSapUser_wrapper_registry (*_PyNs3LteUeCcmRrcSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCmacSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCmacSapProvider;


extern PyTypeObject *_PyNs3LteUeCmacSapProvider_Type;
#define PyNs3LteUeCmacSapProvider_Type (*_PyNs3LteUeCmacSapProvider_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeCmacSapProvider_wrapper_registry;
#define PyNs3LteUeCmacSapProvider_wrapper_registry (*_PyNs3LteUeCmacSapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCmacSapProvider::LogicalChannelConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCmacSapProviderLogicalChannelConfig;


extern PyTypeObject *_PyNs3LteUeCmacSapProviderLogicalChannelConfig_Type;
#define PyNs3LteUeCmacSapProviderLogicalChannelConfig_Type (*_PyNs3LteUeCmacSapProviderLogicalChannelConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeCmacSapProviderLogicalChannelConfig_wrapper_registry;
#define PyNs3LteUeCmacSapProviderLogicalChannelConfig_wrapper_registry (*_PyNs3LteUeCmacSapProviderLogicalChannelConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCmacSapProvider::RachConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCmacSapProviderRachConfig;


extern PyTypeObject *_PyNs3LteUeCmacSapProviderRachConfig_Type;
#define PyNs3LteUeCmacSapProviderRachConfig_Type (*_PyNs3LteUeCmacSapProviderRachConfig_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeCmacSapProviderRachConfig_wrapper_registry;
#define PyNs3LteUeCmacSapProviderRachConfig_wrapper_registry (*_PyNs3LteUeCmacSapProviderRachConfig_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCmacSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCmacSapUser;


extern PyTypeObject *_PyNs3LteUeCmacSapUser_Type;
#define PyNs3LteUeCmacSapUser_Type (*_PyNs3LteUeCmacSapUser_Type)

class PyNs3LteUeCmacSapUser__PythonHelper : public ns3::LteUeCmacSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeCmacSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteUeCmacSapUser_wrapper_registry;
#define PyNs3LteUeCmacSapUser_wrapper_registry (*_PyNs3LteUeCmacSapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeConfig_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeConfig_t;


extern PyTypeObject *_PyNs3LteUeConfig_t_Type;
#define PyNs3LteUeConfig_t_Type (*_PyNs3LteUeConfig_t_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeConfig_t_wrapper_registry;
#define PyNs3LteUeConfig_t_wrapper_registry (*_PyNs3LteUeConfig_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapProvider;


extern PyTypeObject *_PyNs3LteUeCphySapProvider_Type;
#define PyNs3LteUeCphySapProvider_Type (*_PyNs3LteUeCphySapProvider_Type)

class PyNs3LteUeCphySapProvider__PythonHelper : public ns3::LteUeCphySapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeCphySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteUeCphySapProvider_wrapper_registry;
#define PyNs3LteUeCphySapProvider_wrapper_registry (*_PyNs3LteUeCphySapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapUser;


extern PyTypeObject *_PyNs3LteUeCphySapUser_Type;
#define PyNs3LteUeCphySapUser_Type (*_PyNs3LteUeCphySapUser_Type)

class PyNs3LteUeCphySapUser__PythonHelper : public ns3::LteUeCphySapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeCphySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteUeCphySapUser_wrapper_registry;
#define PyNs3LteUeCphySapUser_wrapper_registry (*_PyNs3LteUeCphySapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapUser::UeMeasurementsElement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapUserUeMeasurementsElement;


extern PyTypeObject *_PyNs3LteUeCphySapUserUeMeasurementsElement_Type;
#define PyNs3LteUeCphySapUserUeMeasurementsElement_Type (*_PyNs3LteUeCphySapUserUeMeasurementsElement_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeCphySapUserUeMeasurementsElement_wrapper_registry;
#define PyNs3LteUeCphySapUserUeMeasurementsElement_wrapper_registry (*_PyNs3LteUeCphySapUserUeMeasurementsElement_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapUser::UeMeasurementsParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapUserUeMeasurementsParameters;


extern PyTypeObject *_PyNs3LteUeCphySapUserUeMeasurementsParameters_Type;
#define PyNs3LteUeCphySapUserUeMeasurementsParameters_Type (*_PyNs3LteUeCphySapUserUeMeasurementsParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeCphySapUserUeMeasurementsParameters_wrapper_registry;
#define PyNs3LteUeCphySapUserUeMeasurementsParameters_wrapper_registry (*_PyNs3LteUeCphySapUserUeMeasurementsParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUePhySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePhySapProvider;


extern PyTypeObject *_PyNs3LteUePhySapProvider_Type;
#define PyNs3LteUePhySapProvider_Type (*_PyNs3LteUePhySapProvider_Type)

class PyNs3LteUePhySapProvider__PythonHelper : public ns3::LteUePhySapProvider
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePhySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteUePhySapProvider_wrapper_registry;
#define PyNs3LteUePhySapProvider_wrapper_registry (*_PyNs3LteUePhySapProvider_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUePhySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePhySapUser;


extern PyTypeObject *_PyNs3LteUePhySapUser_Type;
#define PyNs3LteUePhySapUser_Type (*_PyNs3LteUePhySapUser_Type)

class PyNs3LteUePhySapUser__PythonHelper : public ns3::LteUePhySapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePhySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3LteUePhySapUser_wrapper_registry;
#define PyNs3LteUePhySapUser_wrapper_registry (*_PyNs3LteUePhySapUser_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapProvider *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapProvider;


extern PyTypeObject *_PyNs3LteUeRrcSapProvider_Type;
#define PyNs3LteUeRrcSapProvider_Type (*_PyNs3LteUeRrcSapProvider_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapProvider::CompleteSetupParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapProviderCompleteSetupParameters;


extern PyTypeObject *_PyNs3LteUeRrcSapProviderCompleteSetupParameters_Type;
#define PyNs3LteUeRrcSapProviderCompleteSetupParameters_Type (*_PyNs3LteUeRrcSapProviderCompleteSetupParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeRrcSapProviderCompleteSetupParameters_wrapper_registry;
#define PyNs3LteUeRrcSapProviderCompleteSetupParameters_wrapper_registry (*_PyNs3LteUeRrcSapProviderCompleteSetupParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapUser;


extern PyTypeObject *_PyNs3LteUeRrcSapUser_Type;
#define PyNs3LteUeRrcSapUser_Type (*_PyNs3LteUeRrcSapUser_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapUser::SetupParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapUserSetupParameters;


extern PyTypeObject *_PyNs3LteUeRrcSapUserSetupParameters_Type;
#define PyNs3LteUeRrcSapUserSetupParameters_Type (*_PyNs3LteUeRrcSapUserSetupParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteUeRrcSapUserSetupParameters_wrapper_registry;
#define PyNs3LteUeRrcSapUserSetupParameters_wrapper_registry (*_PyNs3LteUeRrcSapUserSetupParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac48Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48Address;


extern PyTypeObject *_PyNs3Mac48Address_Type;
#define PyNs3Mac48Address_Type (*_PyNs3Mac48Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;
#define PyNs3Mac48Address_wrapper_registry (*_PyNs3Mac48Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac64Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac64Address;


extern PyTypeObject *_PyNs3Mac64Address_Type;
#define PyNs3Mac64Address_Type (*_PyNs3Mac64Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac64Address_wrapper_registry;
#define PyNs3Mac64Address_wrapper_registry (*_PyNs3Mac64Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac8Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac8Address;


extern PyTypeObject *_PyNs3Mac8Address_Type;
#define PyNs3Mac8Address_Type (*_PyNs3Mac8Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac8Address_wrapper_registry;
#define PyNs3Mac8Address_wrapper_registry (*_PyNs3Mac8Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::MacCeListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacCeListElement_s;


extern PyTypeObject *_PyNs3MacCeListElement_s_Type;
#define PyNs3MacCeListElement_s_Type (*_PyNs3MacCeListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3MacCeListElement_s_wrapper_registry;
#define PyNs3MacCeListElement_s_wrapper_registry (*_PyNs3MacCeListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::MacCeValue_u *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacCeValue_u;


extern PyTypeObject *_PyNs3MacCeValue_u_Type;
#define PyNs3MacCeValue_u_Type (*_PyNs3MacCeValue_u_Type)

extern std::map<void*, PyObject*> *_PyNs3MacCeValue_u_wrapper_registry;
#define PyNs3MacCeValue_u_wrapper_registry (*_PyNs3MacCeValue_u_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Names *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Names;


extern PyTypeObject *_PyNs3Names_Type;
#define PyNs3Names_Type (*_PyNs3Names_Type)

extern std::map<void*, PyObject*> *_PyNs3Names_wrapper_registry;
#define PyNs3Names_wrapper_registry (*_PyNs3Names_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NetDeviceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceContainer;


extern PyTypeObject *_PyNs3NetDeviceContainer_Type;
#define PyNs3NetDeviceContainer_Type (*_PyNs3NetDeviceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;
#define PyNs3NetDeviceContainer_wrapper_registry (*_PyNs3NetDeviceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject *_PyNs3NodeContainer_Type;
#define PyNs3NodeContainer_Type (*_PyNs3NodeContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;
#define PyNs3NodeContainer_wrapper_registry (*_PyNs3NodeContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject *_PyNs3ObjectBase_Type;
#define PyNs3ObjectBase_Type (*_PyNs3ObjectBase_Type)

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;
#define PyNs3ObjectBase_wrapper_registry (*_PyNs3ObjectBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject *_PyNs3ObjectDeleter_Type;
#define PyNs3ObjectDeleter_Type (*_PyNs3ObjectDeleter_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;
#define PyNs3ObjectDeleter_wrapper_registry (*_PyNs3ObjectDeleter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject *_PyNs3ObjectFactory_Type;
#define PyNs3ObjectFactory_Type (*_PyNs3ObjectFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;
#define PyNs3ObjectFactory_wrapper_registry (*_PyNs3ObjectFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadata;


extern PyTypeObject *_PyNs3PacketMetadata_Type;
#define PyNs3PacketMetadata_Type (*_PyNs3PacketMetadata_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;
#define PyNs3PacketMetadata_wrapper_registry (*_PyNs3PacketMetadata_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItem;


extern PyTypeObject *_PyNs3PacketMetadataItem_Type;
#define PyNs3PacketMetadataItem_Type (*_PyNs3PacketMetadataItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;
#define PyNs3PacketMetadataItem_wrapper_registry (*_PyNs3PacketMetadataItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::ItemIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItemIterator;


extern PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
#define PyNs3PacketMetadataItemIterator_Type (*_PyNs3PacketMetadataItemIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;
#define PyNs3PacketMetadataItemIterator_wrapper_registry (*_PyNs3PacketMetadataItemIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIterator;


extern PyTypeObject *_PyNs3PacketTagIterator_Type;
#define PyNs3PacketTagIterator_Type (*_PyNs3PacketTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;
#define PyNs3PacketTagIterator_wrapper_registry (*_PyNs3PacketTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIteratorItem;


extern PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
#define PyNs3PacketTagIteratorItem_Type (*_PyNs3PacketTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;
#define PyNs3PacketTagIteratorItem_wrapper_registry (*_PyNs3PacketTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagList;


extern PyTypeObject *_PyNs3PacketTagList_Type;
#define PyNs3PacketTagList_Type (*_PyNs3PacketTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;
#define PyNs3PacketTagList_wrapper_registry (*_PyNs3PacketTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList::TagData *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagListTagData;


extern PyTypeObject *_PyNs3PacketTagListTagData_Type;
#define PyNs3PacketTagListTagData_Type (*_PyNs3PacketTagListTagData_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;
#define PyNs3PacketTagListTagData_wrapper_registry (*_PyNs3PacketTagListTagData_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PagingInfoListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PagingInfoListElement_s;


extern PyTypeObject *_PyNs3PagingInfoListElement_s_Type;
#define PyNs3PagingInfoListElement_s_Type (*_PyNs3PagingInfoListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3PagingInfoListElement_s_wrapper_registry;
#define PyNs3PagingInfoListElement_s_wrapper_registry (*_PyNs3PagingInfoListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ParameterLogger *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParameterLogger;


extern PyTypeObject *_PyNs3ParameterLogger_Type;
#define PyNs3ParameterLogger_Type (*_PyNs3ParameterLogger_Type)

extern std::map<void*, PyObject*> *_PyNs3ParameterLogger_wrapper_registry;
#define PyNs3ParameterLogger_wrapper_registry (*_PyNs3ParameterLogger_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PhichListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhichListElement_s;


extern PyTypeObject *_PyNs3PhichListElement_s_Type;
#define PyNs3PhichListElement_s_Type (*_PyNs3PhichListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3PhichListElement_s_wrapper_registry;
#define PyNs3PhichListElement_s_wrapper_registry (*_PyNs3PhichListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PhyReceptionStatParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhyReceptionStatParameters;


extern PyTypeObject *_PyNs3PhyReceptionStatParameters_Type;
#define PyNs3PhyReceptionStatParameters_Type (*_PyNs3PhyReceptionStatParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3PhyReceptionStatParameters_wrapper_registry;
#define PyNs3PhyReceptionStatParameters_wrapper_registry (*_PyNs3PhyReceptionStatParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PhyTransmissionStatParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhyTransmissionStatParameters;


extern PyTypeObject *_PyNs3PhyTransmissionStatParameters_Type;
#define PyNs3PhyTransmissionStatParameters_Type (*_PyNs3PhyTransmissionStatParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3PhyTransmissionStatParameters_wrapper_registry;
#define PyNs3PhyTransmissionStatParameters_wrapper_registry (*_PyNs3PhyTransmissionStatParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::QueueSize *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueSize;


extern PyTypeObject *_PyNs3QueueSize_Type;
#define PyNs3QueueSize_Type (*_PyNs3QueueSize_Type)

extern std::map<void*, PyObject*> *_PyNs3QueueSize_wrapper_registry;
#define PyNs3QueueSize_wrapper_registry (*_PyNs3QueueSize_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::RachListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RachListElement_s;


extern PyTypeObject *_PyNs3RachListElement_s_Type;
#define PyNs3RachListElement_s_Type (*_PyNs3RachListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3RachListElement_s_wrapper_registry;
#define PyNs3RachListElement_s_wrapper_registry (*_PyNs3RachListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::RlcPduListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RlcPduListElement_s;


extern PyTypeObject *_PyNs3RlcPduListElement_s_Type;
#define PyNs3RlcPduListElement_s_Type (*_PyNs3RlcPduListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3RlcPduListElement_s_wrapper_registry;
#define PyNs3RlcPduListElement_s_wrapper_registry (*_PyNs3RlcPduListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SbMeasResult_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SbMeasResult_s;


extern PyTypeObject *_PyNs3SbMeasResult_s_Type;
#define PyNs3SbMeasResult_s_Type (*_PyNs3SbMeasResult_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SbMeasResult_s_wrapper_registry;
#define PyNs3SbMeasResult_s_wrapper_registry (*_PyNs3SbMeasResult_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SequenceNumber10 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequenceNumber10;


extern PyTypeObject *_PyNs3SequenceNumber10_Type;
#define PyNs3SequenceNumber10_Type (*_PyNs3SequenceNumber10_Type)

extern std::map<void*, PyObject*> *_PyNs3SequenceNumber10_wrapper_registry;
#define PyNs3SequenceNumber10_wrapper_registry (*_PyNs3SequenceNumber10_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SiConfiguration_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SiConfiguration_s;


extern PyTypeObject *_PyNs3SiConfiguration_s_Type;
#define PyNs3SiConfiguration_s_Type (*_PyNs3SiConfiguration_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SiConfiguration_s_wrapper_registry;
#define PyNs3SiConfiguration_s_wrapper_registry (*_PyNs3SiConfiguration_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SiMessageListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SiMessageListElement_s;


extern PyTypeObject *_PyNs3SiMessageListElement_s_Type;
#define PyNs3SiMessageListElement_s_Type (*_PyNs3SiMessageListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SiMessageListElement_s_wrapper_registry;
#define PyNs3SiMessageListElement_s_wrapper_registry (*_PyNs3SiMessageListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;

#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject *_PyNs3Simulator_Type;
#define PyNs3Simulator_Type (*_PyNs3Simulator_Type)

extern std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;
#define PyNs3Simulator_wrapper_registry (*_PyNs3Simulator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SpsConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpsConfig_s;


extern PyTypeObject *_PyNs3SpsConfig_s_Type;
#define PyNs3SpsConfig_s_Type (*_PyNs3SpsConfig_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SpsConfig_s_wrapper_registry;
#define PyNs3SpsConfig_s_wrapper_registry (*_PyNs3SpsConfig_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SrConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SrConfig_s;


extern PyTypeObject *_PyNs3SrConfig_s_Type;
#define PyNs3SrConfig_s_Type (*_PyNs3SrConfig_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SrConfig_s_wrapper_registry;
#define PyNs3SrConfig_s_wrapper_registry (*_PyNs3SrConfig_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SrListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SrListElement_s;


extern PyTypeObject *_PyNs3SrListElement_s_Type;
#define PyNs3SrListElement_s_Type (*_PyNs3SrListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3SrListElement_s_wrapper_registry;
#define PyNs3SrListElement_s_wrapper_registry (*_PyNs3SrListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::StatisticalSummary *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3StatisticalSummary;


extern PyTypeObject *_PyNs3StatisticalSummary_Type;
#define PyNs3StatisticalSummary_Type (*_PyNs3StatisticalSummary_Type)

class PyNs3StatisticalSummary__PythonHelper : public ns3::StatisticalSummary
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3StatisticalSummary__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3StatisticalSummary_wrapper_registry;
#define PyNs3StatisticalSummary_wrapper_registry (*_PyNs3StatisticalSummary_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Tag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tag;


extern PyTypeObject *_PyNs3Tag_Type;
#define PyNs3Tag_Type (*_PyNs3Tag_Type)


typedef struct {
    PyObject_HEAD
    ns3::TagBuffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TagBuffer;


extern PyTypeObject *_PyNs3TagBuffer_Type;
#define PyNs3TagBuffer_Type (*_PyNs3TagBuffer_Type)

extern std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;
#define PyNs3TagBuffer_wrapper_registry (*_PyNs3TagBuffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TbId_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TbId_t;


extern PyTypeObject *_PyNs3TbId_t_Type;
#define PyNs3TbId_t_Type (*_PyNs3TbId_t_Type)

extern std::map<void*, PyObject*> *_PyNs3TbId_t_wrapper_registry;
#define PyNs3TbId_t_wrapper_registry (*_PyNs3TbId_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TimeWithUnit *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeWithUnit;


extern PyTypeObject *_PyNs3TimeWithUnit_Type;
#define PyNs3TimeWithUnit_Type (*_PyNs3TimeWithUnit_Type)

extern std::map<void*, PyObject*> *_PyNs3TimeWithUnit_wrapper_registry;
#define PyNs3TimeWithUnit_wrapper_registry (*_PyNs3TimeWithUnit_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< bool > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Bool;


extern PyTypeObject *_PyNs3TracedValue__Bool_Type;
#define PyNs3TracedValue__Bool_Type (*_PyNs3TracedValue__Bool_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Bool_wrapper_registry;
#define PyNs3TracedValue__Bool_wrapper_registry (*_PyNs3TracedValue__Bool_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< unsigned int > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Unsigned_int;


extern PyTypeObject *_PyNs3TracedValue__Unsigned_int_Type;
#define PyNs3TracedValue__Unsigned_int_Type (*_PyNs3TracedValue__Unsigned_int_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_int_wrapper_registry;
#define PyNs3TracedValue__Unsigned_int_wrapper_registry (*_PyNs3TracedValue__Unsigned_int_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TransmissionModesLayers *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TransmissionModesLayers;


extern PyTypeObject *_PyNs3TransmissionModesLayers_Type;
#define PyNs3TransmissionModesLayers_Type (*_PyNs3TransmissionModesLayers_Type)

extern std::map<void*, PyObject*> *_PyNs3TransmissionModesLayers_wrapper_registry;
#define PyNs3TransmissionModesLayers_wrapper_registry (*_PyNs3TransmissionModesLayers_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject *_PyNs3TypeId_Type;
#define PyNs3TypeId_Type (*_PyNs3TypeId_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;
#define PyNs3TypeId_wrapper_registry (*_PyNs3TypeId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
#define PyNs3TypeIdAttributeInformation_Type (*_PyNs3TypeIdAttributeInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;
#define PyNs3TypeIdAttributeInformation_wrapper_registry (*_PyNs3TypeIdAttributeInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
#define PyNs3TypeIdTraceSourceInformation_Type (*_PyNs3TypeIdTraceSourceInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;
#define PyNs3TypeIdTraceSourceInformation_wrapper_registry (*_PyNs3TypeIdTraceSourceInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UeCapabilities_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeCapabilities_s;


extern PyTypeObject *_PyNs3UeCapabilities_s_Type;
#define PyNs3UeCapabilities_s_Type (*_PyNs3UeCapabilities_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UeCapabilities_s_wrapper_registry;
#define PyNs3UeCapabilities_s_wrapper_registry (*_PyNs3UeCapabilities_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UeSelected_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeSelected_s;


extern PyTypeObject *_PyNs3UeSelected_s_Type;
#define PyNs3UeSelected_s_Type (*_PyNs3UeSelected_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UeSelected_s_wrapper_registry;
#define PyNs3UeSelected_s_wrapper_registry (*_PyNs3UeSelected_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UlCqi_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlCqi_s;


extern PyTypeObject *_PyNs3UlCqi_s_Type;
#define PyNs3UlCqi_s_Type (*_PyNs3UlCqi_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UlCqi_s_wrapper_registry;
#define PyNs3UlCqi_s_wrapper_registry (*_PyNs3UlCqi_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UlDciListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlDciListElement_s;


extern PyTypeObject *_PyNs3UlDciListElement_s_Type;
#define PyNs3UlDciListElement_s_Type (*_PyNs3UlDciListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UlDciListElement_s_wrapper_registry;
#define PyNs3UlDciListElement_s_wrapper_registry (*_PyNs3UlDciListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UlGrant_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlGrant_s;


extern PyTypeObject *_PyNs3UlGrant_s_Type;
#define PyNs3UlGrant_s_Type (*_PyNs3UlGrant_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UlGrant_s_wrapper_registry;
#define PyNs3UlGrant_s_wrapper_registry (*_PyNs3UlGrant_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UlInfoListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlInfoListElement_s;


extern PyTypeObject *_PyNs3UlInfoListElement_s_Type;
#define PyNs3UlInfoListElement_s_Type (*_PyNs3UlInfoListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3UlInfoListElement_s_wrapper_registry;
#define PyNs3UlInfoListElement_s_wrapper_registry (*_PyNs3UlInfoListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector2D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2D;


extern PyTypeObject *_PyNs3Vector2D_Type;
#define PyNs3Vector2D_Type (*_PyNs3Vector2D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector2D_wrapper_registry;
#define PyNs3Vector2D_wrapper_registry (*_PyNs3Vector2D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector3D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3D;


extern PyTypeObject *_PyNs3Vector3D_Type;
#define PyNs3Vector3D_Type (*_PyNs3Vector3D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector3D_wrapper_registry;
#define PyNs3Vector3D_wrapper_registry (*_PyNs3Vector3D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::VendorSpecificListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3VendorSpecificListElement_s;


extern PyTypeObject *_PyNs3VendorSpecificListElement_s_Type;
#define PyNs3VendorSpecificListElement_s_Type (*_PyNs3VendorSpecificListElement_s_Type)

extern std::map<void*, PyObject*> *_PyNs3VendorSpecificListElement_s_wrapper_registry;
#define PyNs3VendorSpecificListElement_s_wrapper_registry (*_PyNs3VendorSpecificListElement_s_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject *_PyNs3Empty_Type;
#define PyNs3Empty_Type (*_PyNs3Empty_Type)

extern std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;
#define PyNs3Empty_wrapper_registry (*_PyNs3Empty_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject *_PyNs3Int64x64_t_Type;
#define PyNs3Int64x64_t_Type (*_PyNs3Int64x64_t_Type)

extern std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;
#define PyNs3Int64x64_t_wrapper_registry (*_PyNs3Int64x64_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::tbInfo_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TbInfo_t;


extern PyTypeObject *_PyNs3TbInfo_t_Type;
#define PyNs3TbInfo_t_Type (*_PyNs3TbInfo_t_Type)

extern std::map<void*, PyObject*> *_PyNs3TbInfo_t_wrapper_registry;
#define PyNs3TbInfo_t_wrapper_registry (*_PyNs3TbInfo_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Chunk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Chunk;


extern PyTypeObject *_PyNs3Chunk_Type;
#define PyNs3Chunk_Type (*_PyNs3Chunk_Type)


typedef struct {
    PyObject_HEAD
    ns3::EpcX2PdcpProvider *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2PdcpProvider;


extern PyTypeObject *_PyNs3EpcX2PdcpProvider_Type;
#define PyNs3EpcX2PdcpProvider_Type (*_PyNs3EpcX2PdcpProvider_Type)


typedef struct {
    PyObject_HEAD
    ns3::EpcX2PdcpUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2PdcpUser;


extern PyTypeObject *_PyNs3EpcX2PdcpUser_Type;
#define PyNs3EpcX2PdcpUser_Type (*_PyNs3EpcX2PdcpUser_Type)


typedef struct {
    PyObject_HEAD
    ns3::EpcX2RlcProvider *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2RlcProvider;


extern PyTypeObject *_PyNs3EpcX2RlcProvider_Type;
#define PyNs3EpcX2RlcProvider_Type (*_PyNs3EpcX2RlcProvider_Type)


typedef struct {
    PyObject_HEAD
    ns3::EpcX2RlcUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2RlcUser;


extern PyTypeObject *_PyNs3EpcX2RlcUser_Type;
#define PyNs3EpcX2RlcUser_Type (*_PyNs3EpcX2RlcUser_Type)


typedef struct {
    PyObject_HEAD
    ns3::Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Header;


extern PyTypeObject *_PyNs3Header_Type;
#define PyNs3Header_Type (*_PyNs3Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteCcmMacSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteCcmMacSapUser;


extern PyTypeObject *_PyNs3LteCcmMacSapUser_Type;
#define PyNs3LteCcmMacSapUser_Type (*_PyNs3LteCcmMacSapUser_Type)

class PyNs3LteCcmMacSapUser__PythonHelper : public ns3::LteCcmMacSapUser
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteCcmMacSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapProvider *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapProvider;


extern PyTypeObject *_PyNs3LteEnbRrcSapProvider_Type;
#define PyNs3LteEnbRrcSapProvider_Type (*_PyNs3LteEnbRrcSapProvider_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters;


extern PyTypeObject *_PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_Type;
#define PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_Type (*_PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_wrapper_registry;
#define PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_wrapper_registry (*_PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapUser;


extern PyTypeObject *_PyNs3LteEnbRrcSapUser_Type;
#define PyNs3LteEnbRrcSapUser_Type (*_PyNs3LteEnbRrcSapUser_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapUser::SetupUeParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapUserSetupUeParameters;


extern PyTypeObject *_PyNs3LteEnbRrcSapUserSetupUeParameters_Type;
#define PyNs3LteEnbRrcSapUserSetupUeParameters_Type (*_PyNs3LteEnbRrcSapUserSetupUeParameters_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbRrcSapUserSetupUeParameters_wrapper_registry;
#define PyNs3LteEnbRrcSapUserSetupUeParameters_wrapper_registry (*_PyNs3LteEnbRrcSapUserSetupUeParameters_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LtePdcpHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpHeader;


extern PyTypeObject *_PyNs3LtePdcpHeader_Type;
#define PyNs3LtePdcpHeader_Type (*_PyNs3LtePdcpHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteRadioBearerTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRadioBearerTag;


extern PyTypeObject *_PyNs3LteRadioBearerTag_Type;
#define PyNs3LteRadioBearerTag_Type (*_PyNs3LteRadioBearerTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
#define PyNs3ObjectAggregateIterator_Type (*_PyNs3ObjectAggregateIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;
#define PyNs3ObjectAggregateIterator_wrapper_registry (*_PyNs3ObjectAggregateIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketBurst *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketBurst;


extern PyTypeObject *_PyNs3PacketBurst_Type;
#define PyNs3PacketBurst_Type (*_PyNs3PacketBurst_Type)

class PyNs3PacketBurst__PythonHelper : public ns3::PacketBurst
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PacketBurst__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PacketFilter *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketFilter;


extern PyTypeObject *_PyNs3PacketFilter_Type;
#define PyNs3PacketFilter_Type (*_PyNs3PacketFilter_Type)

class PyNs3PacketFilter__PythonHelper : public ns3::PacketFilter
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PacketFilter__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationDelayModel;


extern PyTypeObject *_PyNs3PropagationDelayModel_Type;
#define PyNs3PropagationDelayModel_Type (*_PyNs3PropagationDelayModel_Type)

class PyNs3PropagationDelayModel__PythonHelper : public ns3::PropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationLossModel;


extern PyTypeObject *_PyNs3PropagationLossModel_Type;
#define PyNs3PropagationLossModel_Type (*_PyNs3PropagationLossModel_Type)

class PyNs3PropagationLossModel__PythonHelper : public ns3::PropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::QueueDisc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueDisc;


extern PyTypeObject *_PyNs3QueueDisc_Type;
#define PyNs3QueueDisc_Type (*_PyNs3QueueDisc_Type)

class PyNs3QueueDisc__PythonHelper : public ns3::QueueDisc
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QueueDisc__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::QueueDisc::Stats *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueDiscStats;


extern PyTypeObject *_PyNs3QueueDiscStats_Type;
#define PyNs3QueueDiscStats_Type (*_PyNs3QueueDiscStats_Type)

extern std::map<void*, PyObject*> *_PyNs3QueueDiscStats_wrapper_registry;
#define PyNs3QueueDiscStats_wrapper_registry (*_PyNs3QueueDiscStats_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::QueueDiscClass *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueDiscClass;


extern PyTypeObject *_PyNs3QueueDiscClass_Type;
#define PyNs3QueueDiscClass_Type (*_PyNs3QueueDiscClass_Type)

class PyNs3QueueDiscClass__PythonHelper : public ns3::QueueDiscClass
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QueueDiscClass__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomPropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomPropagationDelayModel;


extern PyTypeObject *_PyNs3RandomPropagationDelayModel_Type;
#define PyNs3RandomPropagationDelayModel_Type (*_PyNs3RandomPropagationDelayModel_Type)

class PyNs3RandomPropagationDelayModel__PythonHelper : public ns3::RandomPropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomPropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomPropagationLossModel;


extern PyTypeObject *_PyNs3RandomPropagationLossModel_Type;
#define PyNs3RandomPropagationLossModel_Type (*_PyNs3RandomPropagationLossModel_Type)

class PyNs3RandomPropagationLossModel__PythonHelper : public ns3::RandomPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableStream *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableStream;


extern PyTypeObject *_PyNs3RandomVariableStream_Type;
#define PyNs3RandomVariableStream_Type (*_PyNs3RandomVariableStream_Type)

class PyNs3RandomVariableStream__PythonHelper : public ns3::RandomVariableStream
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomVariableStream__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RangePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RangePropagationLossModel;


extern PyTypeObject *_PyNs3RangePropagationLossModel_Type;
#define PyNs3RangePropagationLossModel_Type (*_PyNs3RangePropagationLossModel_Type)

class PyNs3RangePropagationLossModel__PythonHelper : public ns3::RangePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RangePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RlcBearerInfo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RlcBearerInfo;


extern PyTypeObject *_PyNs3RlcBearerInfo_Type;
#define PyNs3RlcBearerInfo_Type (*_PyNs3RlcBearerInfo_Type)


typedef struct {
    PyObject_HEAD
    ns3::SequentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialRandomVariable;


extern PyTypeObject *_PyNs3SequentialRandomVariable_Type;
#define PyNs3SequentialRandomVariable_Type (*_PyNs3SequentialRandomVariable_Type)

class PyNs3SequentialRandomVariable__PythonHelper : public ns3::SequentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SequentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EpcTft, ns3::empty, ns3::DefaultDeleter<ns3::EpcTft> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt___Type;
#define PyNs3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt___Type (*_PyNs3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EpcTftClassifier, ns3::empty, ns3::DefaultDeleter<ns3::EpcTftClassifier> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EpcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTftClassifier__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EpcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTftClassifier__gt___Type;
#define PyNs3SimpleRefCount__Ns3EpcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTftClassifier__gt___Type (*_PyNs3SimpleRefCount__Ns3EpcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTftClassifier__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EpcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTftClassifier__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EpcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTftClassifier__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EpcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTftClassifier__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type;
#define PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type (*_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type;
#define PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type (*_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::LteControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::LteControlMessage> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt___Type;
#define PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt___Type (*_PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::LteHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteHarqPhy> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt___Type;
#define PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt___Type (*_PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type;
#define PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type (*_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt___Type (*_PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Socket *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Socket;


extern PyTypeObject *_PyNs3Socket_Type;
#define PyNs3Socket_Type (*_PyNs3Socket_Type)

class PyNs3Socket__PythonHelper : public ns3::Socket
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Socket__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SocketIpTosTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpTosTag;


extern PyTypeObject *_PyNs3SocketIpTosTag_Type;
#define PyNs3SocketIpTosTag_Type (*_PyNs3SocketIpTosTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpTtlTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpTtlTag;


extern PyTypeObject *_PyNs3SocketIpTtlTag_Type;
#define PyNs3SocketIpTtlTag_Type (*_PyNs3SocketIpTtlTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpv6HopLimitTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpv6HopLimitTag;


extern PyTypeObject *_PyNs3SocketIpv6HopLimitTag_Type;
#define PyNs3SocketIpv6HopLimitTag_Type (*_PyNs3SocketIpv6HopLimitTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpv6TclassTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpv6TclassTag;


extern PyTypeObject *_PyNs3SocketIpv6TclassTag_Type;
#define PyNs3SocketIpv6TclassTag_Type (*_PyNs3SocketIpv6TclassTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketPriorityTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketPriorityTag;


extern PyTypeObject *_PyNs3SocketPriorityTag_Type;
#define PyNs3SocketPriorityTag_Type (*_PyNs3SocketPriorityTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketSetDontFragmentTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketSetDontFragmentTag;


extern PyTypeObject *_PyNs3SocketSetDontFragmentTag_Type;
#define PyNs3SocketSetDontFragmentTag_Type (*_PyNs3SocketSetDontFragmentTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumInterference *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumInterference;


extern PyTypeObject *_PyNs3SpectrumInterference_Type;
#define PyNs3SpectrumInterference_Type (*_PyNs3SpectrumInterference_Type)

class PyNs3SpectrumInterference__PythonHelper : public ns3::SpectrumInterference
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumInterference__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumModel;


extern PyTypeObject *_PyNs3SpectrumModel_Type;
#define PyNs3SpectrumModel_Type (*_PyNs3SpectrumModel_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPhy;


extern PyTypeObject *_PyNs3SpectrumPhy_Type;
#define PyNs3SpectrumPhy_Type (*_PyNs3SpectrumPhy_Type)

class PyNs3SpectrumPhy__PythonHelper : public ns3::SpectrumPhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPropagationLossModel;


extern PyTypeObject *_PyNs3SpectrumPropagationLossModel_Type;
#define PyNs3SpectrumPropagationLossModel_Type (*_PyNs3SpectrumPropagationLossModel_Type)

class PyNs3SpectrumPropagationLossModel__PythonHelper : public ns3::SpectrumPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumSignalParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumSignalParameters;


extern PyTypeObject *_PyNs3SpectrumSignalParameters_Type;
#define PyNs3SpectrumSignalParameters_Type (*_PyNs3SpectrumSignalParameters_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumValue;


extern PyTypeObject *_PyNs3SpectrumValue_Type;
#define PyNs3SpectrumValue_Type (*_PyNs3SpectrumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ThreeLogDistancePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeLogDistancePropagationLossModel;


extern PyTypeObject *_PyNs3ThreeLogDistancePropagationLossModel_Type;
#define PyNs3ThreeLogDistancePropagationLossModel_Type (*_PyNs3ThreeLogDistancePropagationLossModel_Type)

class PyNs3ThreeLogDistancePropagationLossModel__PythonHelper : public ns3::ThreeLogDistancePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeLogDistancePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject *_PyNs3Time_Type;
#define PyNs3Time_Type (*_PyNs3Time_Type)

extern std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;
#define PyNs3Time_wrapper_registry (*_PyNs3Time_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject *_PyNs3TraceSourceAccessor_Type;
#define PyNs3TraceSourceAccessor_Type (*_PyNs3TraceSourceAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::Trailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Trailer;


extern PyTypeObject *_PyNs3Trailer_Type;
#define PyNs3Trailer_Type (*_PyNs3Trailer_Type)


typedef struct {
    PyObject_HEAD
    ns3::TriangularRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularRandomVariable;


extern PyTypeObject *_PyNs3TriangularRandomVariable_Type;
#define PyNs3TriangularRandomVariable_Type (*_PyNs3TriangularRandomVariable_Type)

class PyNs3TriangularRandomVariable__PythonHelper : public ns3::TriangularRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TriangularRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::TwoRayGroundPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TwoRayGroundPropagationLossModel;


extern PyTypeObject *_PyNs3TwoRayGroundPropagationLossModel_Type;
#define PyNs3TwoRayGroundPropagationLossModel_Type (*_PyNs3TwoRayGroundPropagationLossModel_Type)

class PyNs3TwoRayGroundPropagationLossModel__PythonHelper : public ns3::TwoRayGroundPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TwoRayGroundPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UeManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeManager;


extern PyTypeObject *_PyNs3UeManager_Type;
#define PyNs3UeManager_Type (*_PyNs3UeManager_Type)

class PyNs3UeManager__PythonHelper : public ns3::UeManager
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UeManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UniformRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformRandomVariable;


extern PyTypeObject *_PyNs3UniformRandomVariable_Type;
#define PyNs3UniformRandomVariable_Type (*_PyNs3UniformRandomVariable_Type)

class PyNs3UniformRandomVariable__PythonHelper : public ns3::UniformRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UniformRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::VendorSpecificValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3VendorSpecificValue;


extern PyTypeObject *_PyNs3VendorSpecificValue_Type;
#define PyNs3VendorSpecificValue_Type (*_PyNs3VendorSpecificValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::WeibullRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullRandomVariable;


extern PyTypeObject *_PyNs3WeibullRandomVariable_Type;
#define PyNs3WeibullRandomVariable_Type (*_PyNs3WeibullRandomVariable_Type)

class PyNs3WeibullRandomVariable__PythonHelper : public ns3::WeibullRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WeibullRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZetaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaRandomVariable;


extern PyTypeObject *_PyNs3ZetaRandomVariable_Type;
#define PyNs3ZetaRandomVariable_Type (*_PyNs3ZetaRandomVariable_Type)

class PyNs3ZetaRandomVariable__PythonHelper : public ns3::ZetaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZetaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZipfRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfRandomVariable;


extern PyTypeObject *_PyNs3ZipfRandomVariable_Type;
#define PyNs3ZipfRandomVariable_Type (*_PyNs3ZipfRandomVariable_Type)

class PyNs3ZipfRandomVariable__PythonHelper : public ns3::ZipfRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZipfRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AntennaModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AntennaModel;


extern PyTypeObject *_PyNs3AntennaModel_Type;
#define PyNs3AntennaModel_Type (*_PyNs3AntennaModel_Type)

class PyNs3AntennaModel__PythonHelper : public ns3::AntennaModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AntennaModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Asn1Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Asn1Header;


extern PyTypeObject *_PyNs3Asn1Header_Type;
#define PyNs3Asn1Header_Type (*_PyNs3Asn1Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject *_PyNs3AttributeAccessor_Type;
#define PyNs3AttributeAccessor_Type (*_PyNs3AttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject *_PyNs3AttributeChecker_Type;
#define PyNs3AttributeChecker_Type (*_PyNs3AttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanChecker;


extern PyTypeObject *_PyNs3BooleanChecker_Type;
#define PyNs3BooleanChecker_Type (*_PyNs3BooleanChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanValue;


extern PyTypeObject *_PyNs3BooleanValue_Type;
#define PyNs3BooleanValue_Type (*_PyNs3BooleanValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BoxChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BoxChecker;


extern PyTypeObject *_PyNs3BoxChecker_Type;
#define PyNs3BoxChecker_Type (*_PyNs3BoxChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::BoxValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BoxValue;


extern PyTypeObject *_PyNs3BoxValue_Type;
#define PyNs3BoxValue_Type (*_PyNs3BoxValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Building *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Building;


extern PyTypeObject *_PyNs3Building_Type;
#define PyNs3Building_Type (*_PyNs3Building_Type)

class PyNs3Building__PythonHelper : public ns3::Building
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Building__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::BuildingsPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BuildingsPropagationLossModel;


extern PyTypeObject *_PyNs3BuildingsPropagationLossModel_Type;
#define PyNs3BuildingsPropagationLossModel_Type (*_PyNs3BuildingsPropagationLossModel_Type)

class PyNs3BuildingsPropagationLossModel__PythonHelper : public ns3::BuildingsPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BuildingsPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject *_PyNs3CallbackChecker_Type;
#define PyNs3CallbackChecker_Type (*_PyNs3CallbackChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject *_PyNs3CallbackImplBase_Type;
#define PyNs3CallbackImplBase_Type (*_PyNs3CallbackImplBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject *_PyNs3CallbackValue_Type;
#define PyNs3CallbackValue_Type (*_PyNs3CallbackValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Channel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Channel;


extern PyTypeObject *_PyNs3Channel_Type;
#define PyNs3Channel_Type (*_PyNs3Channel_Type)

class PyNs3Channel__PythonHelper : public ns3::Channel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Channel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::CoDelQueueDisc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CoDelQueueDisc;


extern PyTypeObject *_PyNs3CoDelQueueDisc_Type;
#define PyNs3CoDelQueueDisc_Type (*_PyNs3CoDelQueueDisc_Type)

class PyNs3CoDelQueueDisc__PythonHelper : public ns3::CoDelQueueDisc
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CoDelQueueDisc__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ComponentCarrier *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ComponentCarrier;


extern PyTypeObject *_PyNs3ComponentCarrier_Type;
#define PyNs3ComponentCarrier_Type (*_PyNs3ComponentCarrier_Type)

class PyNs3ComponentCarrier__PythonHelper : public ns3::ComponentCarrier
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ComponentCarrier__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ComponentCarrierEnb *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ComponentCarrierEnb;


extern PyTypeObject *_PyNs3ComponentCarrierEnb_Type;
#define PyNs3ComponentCarrierEnb_Type (*_PyNs3ComponentCarrierEnb_Type)

class PyNs3ComponentCarrierEnb__PythonHelper : public ns3::ComponentCarrierEnb
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ComponentCarrierEnb__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ComponentCarrierUe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ComponentCarrierUe;


extern PyTypeObject *_PyNs3ComponentCarrierUe_Type;
#define PyNs3ComponentCarrierUe_Type (*_PyNs3ComponentCarrierUe_Type)

class PyNs3ComponentCarrierUe__PythonHelper : public ns3::ComponentCarrierUe
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ComponentCarrierUe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ConstantRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantRandomVariable;


extern PyTypeObject *_PyNs3ConstantRandomVariable_Type;
#define PyNs3ConstantRandomVariable_Type (*_PyNs3ConstantRandomVariable_Type)

class PyNs3ConstantRandomVariable__PythonHelper : public ns3::ConstantRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ConstantSpeedPropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantSpeedPropagationDelayModel;


extern PyTypeObject *_PyNs3ConstantSpeedPropagationDelayModel_Type;
#define PyNs3ConstantSpeedPropagationDelayModel_Type (*_PyNs3ConstantSpeedPropagationDelayModel_Type)

class PyNs3ConstantSpeedPropagationDelayModel__PythonHelper : public ns3::ConstantSpeedPropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantSpeedPropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DataCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataCalculator;


extern PyTypeObject *_PyNs3DataCalculator_Type;
#define PyNs3DataCalculator_Type (*_PyNs3DataCalculator_Type)

class PyNs3DataCalculator__PythonHelper : public ns3::DataCalculator
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DataCalculator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DataOutputInterface *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataOutputInterface;


extern PyTypeObject *_PyNs3DataOutputInterface_Type;
#define PyNs3DataOutputInterface_Type (*_PyNs3DataOutputInterface_Type)


typedef struct {
    PyObject_HEAD
    ns3::DataRateChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateChecker;


extern PyTypeObject *_PyNs3DataRateChecker_Type;
#define PyNs3DataRateChecker_Type (*_PyNs3DataRateChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::DataRateValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateValue;


extern PyTypeObject *_PyNs3DataRateValue_Type;
#define PyNs3DataRateValue_Type (*_PyNs3DataRateValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::DeterministicRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicRandomVariable;


extern PyTypeObject *_PyNs3DeterministicRandomVariable_Type;
#define PyNs3DeterministicRandomVariable_Type (*_PyNs3DeterministicRandomVariable_Type)

class PyNs3DeterministicRandomVariable__PythonHelper : public ns3::DeterministicRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DeterministicRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DoubleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleValue;


extern PyTypeObject *_PyNs3DoubleValue_Type;
#define PyNs3DoubleValue_Type (*_PyNs3DoubleValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalRandomVariable;


extern PyTypeObject *_PyNs3EmpiricalRandomVariable_Type;
#define PyNs3EmpiricalRandomVariable_Type (*_PyNs3EmpiricalRandomVariable_Type)

class PyNs3EmpiricalRandomVariable__PythonHelper : public ns3::EmpiricalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EmpiricalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeAccessor;


extern PyTypeObject *_PyNs3EmptyAttributeAccessor_Type;
#define PyNs3EmptyAttributeAccessor_Type (*_PyNs3EmptyAttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeChecker;


extern PyTypeObject *_PyNs3EmptyAttributeChecker_Type;
#define PyNs3EmptyAttributeChecker_Type (*_PyNs3EmptyAttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject *_PyNs3EmptyAttributeValue_Type;
#define PyNs3EmptyAttributeValue_Type (*_PyNs3EmptyAttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumChecker;


extern PyTypeObject *_PyNs3EnumChecker_Type;
#define PyNs3EnumChecker_Type (*_PyNs3EnumChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumValue;


extern PyTypeObject *_PyNs3EnumValue_Type;
#define PyNs3EnumValue_Type (*_PyNs3EnumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EpcHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcHelper;


extern PyTypeObject *_PyNs3EpcHelper_Type;
#define PyNs3EpcHelper_Type (*_PyNs3EpcHelper_Type)

class PyNs3EpcHelper__PythonHelper : public ns3::EpcHelper
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EpcTft *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcTft;


extern PyTypeObject *_PyNs3EpcTft_Type;
#define PyNs3EpcTft_Type (*_PyNs3EpcTft_Type)


typedef struct {
    PyObject_HEAD
    ns3::EpcTft::PacketFilter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcTftPacketFilter;


extern PyTypeObject *_PyNs3EpcTftPacketFilter_Type;
#define PyNs3EpcTftPacketFilter_Type (*_PyNs3EpcTftPacketFilter_Type)

extern std::map<void*, PyObject*> *_PyNs3EpcTftPacketFilter_wrapper_registry;
#define PyNs3EpcTftPacketFilter_wrapper_registry (*_PyNs3EpcTftPacketFilter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EpcTftClassifier *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcTftClassifier;


extern PyTypeObject *_PyNs3EpcTftClassifier_Type;
#define PyNs3EpcTftClassifier_Type (*_PyNs3EpcTftClassifier_Type)


typedef struct {
    PyObject_HEAD
    ns3::EpcUeNas *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcUeNas;


extern PyTypeObject *_PyNs3EpcUeNas_Type;
#define PyNs3EpcUeNas_Type (*_PyNs3EpcUeNas_Type)

class PyNs3EpcUeNas__PythonHelper : public ns3::EpcUeNas
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcUeNas__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ErlangRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangRandomVariable;


extern PyTypeObject *_PyNs3ErlangRandomVariable_Type;
#define PyNs3ErlangRandomVariable_Type (*_PyNs3ErlangRandomVariable_Type)

class PyNs3ErlangRandomVariable__PythonHelper : public ns3::ErlangRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErlangRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject *_PyNs3EventImpl_Type;
#define PyNs3EventImpl_Type (*_PyNs3EventImpl_Type)


typedef struct {
    PyObject_HEAD
    ns3::ExponentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialRandomVariable;


extern PyTypeObject *_PyNs3ExponentialRandomVariable_Type;
#define PyNs3ExponentialRandomVariable_Type (*_PyNs3ExponentialRandomVariable_Type)

class PyNs3ExponentialRandomVariable__PythonHelper : public ns3::ExponentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ExponentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::FfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacScheduler;


extern PyTypeObject *_PyNs3FfMacScheduler_Type;
#define PyNs3FfMacScheduler_Type (*_PyNs3FfMacScheduler_Type)


typedef struct {
    PyObject_HEAD
    ns3::FixedRssLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FixedRssLossModel;


extern PyTypeObject *_PyNs3FixedRssLossModel_Type;
#define PyNs3FixedRssLossModel_Type (*_PyNs3FixedRssLossModel_Type)

class PyNs3FixedRssLossModel__PythonHelper : public ns3::FixedRssLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FixedRssLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::FriisPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FriisPropagationLossModel;


extern PyTypeObject *_PyNs3FriisPropagationLossModel_Type;
#define PyNs3FriisPropagationLossModel_Type (*_PyNs3FriisPropagationLossModel_Type)

class PyNs3FriisPropagationLossModel__PythonHelper : public ns3::FriisPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FriisPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::GammaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaRandomVariable;


extern PyTypeObject *_PyNs3GammaRandomVariable_Type;
#define PyNs3GammaRandomVariable_Type (*_PyNs3GammaRandomVariable_Type)

class PyNs3GammaRandomVariable__PythonHelper : public ns3::GammaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GammaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::IntegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntegerValue;


extern PyTypeObject *_PyNs3IntegerValue_Type;
#define PyNs3IntegerValue_Type (*_PyNs3IntegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4;


extern PyTypeObject *_PyNs3Ipv4_Type;
#define PyNs3Ipv4_Type (*_PyNs3Ipv4_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressChecker;


extern PyTypeObject *_PyNs3Ipv4AddressChecker_Type;
#define PyNs3Ipv4AddressChecker_Type (*_PyNs3Ipv4AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressValue;


extern PyTypeObject *_PyNs3Ipv4AddressValue_Type;
#define PyNs3Ipv4AddressValue_Type (*_PyNs3Ipv4AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskChecker;


extern PyTypeObject *_PyNs3Ipv4MaskChecker_Type;
#define PyNs3Ipv4MaskChecker_Type (*_PyNs3Ipv4MaskChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskValue;


extern PyTypeObject *_PyNs3Ipv4MaskValue_Type;
#define PyNs3Ipv4MaskValue_Type (*_PyNs3Ipv4MaskValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MulticastRoute *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MulticastRoute;


extern PyTypeObject *_PyNs3Ipv4MulticastRoute_Type;
#define PyNs3Ipv4MulticastRoute_Type (*_PyNs3Ipv4MulticastRoute_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Route *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Route;


extern PyTypeObject *_PyNs3Ipv4Route_Type;
#define PyNs3Ipv4Route_Type (*_PyNs3Ipv4Route_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6;


extern PyTypeObject *_PyNs3Ipv6_Type;
#define PyNs3Ipv6_Type (*_PyNs3Ipv6_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressChecker;


extern PyTypeObject *_PyNs3Ipv6AddressChecker_Type;
#define PyNs3Ipv6AddressChecker_Type (*_PyNs3Ipv6AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressValue;


extern PyTypeObject *_PyNs3Ipv6AddressValue_Type;
#define PyNs3Ipv6AddressValue_Type (*_PyNs3Ipv6AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixChecker;


extern PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;
#define PyNs3Ipv6PrefixChecker_Type (*_PyNs3Ipv6PrefixChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixValue;


extern PyTypeObject *_PyNs3Ipv6PrefixValue_Type;
#define PyNs3Ipv6PrefixValue_Type (*_PyNs3Ipv6PrefixValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::LogDistancePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogDistancePropagationLossModel;


extern PyTypeObject *_PyNs3LogDistancePropagationLossModel_Type;
#define PyNs3LogDistancePropagationLossModel_Type (*_PyNs3LogDistancePropagationLossModel_Type)

class PyNs3LogDistancePropagationLossModel__PythonHelper : public ns3::LogDistancePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogDistancePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LogNormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalRandomVariable;


extern PyTypeObject *_PyNs3LogNormalRandomVariable_Type;
#define PyNs3LogNormalRandomVariable_Type (*_PyNs3LogNormalRandomVariable_Type)

class PyNs3LogNormalRandomVariable__PythonHelper : public ns3::LogNormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogNormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteAmc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAmc;


extern PyTypeObject *_PyNs3LteAmc_Type;
#define PyNs3LteAmc_Type (*_PyNs3LteAmc_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteAnr *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAnr;


extern PyTypeObject *_PyNs3LteAnr_Type;
#define PyNs3LteAnr_Type (*_PyNs3LteAnr_Type)

class PyNs3LteAnr__PythonHelper : public ns3::LteAnr
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteAnr__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteControlMessage;


extern PyTypeObject *_PyNs3LteControlMessage_Type;
#define PyNs3LteControlMessage_Type (*_PyNs3LteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteEnbComponentCarrierManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbComponentCarrierManager;


extern PyTypeObject *_PyNs3LteEnbComponentCarrierManager_Type;
#define PyNs3LteEnbComponentCarrierManager_Type (*_PyNs3LteEnbComponentCarrierManager_Type)

class PyNs3LteEnbComponentCarrierManager__PythonHelper : public ns3::LteEnbComponentCarrierManager
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbComponentCarrierManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteEnbMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbMac;


extern PyTypeObject *_PyNs3LteEnbMac_Type;
#define PyNs3LteEnbMac_Type (*_PyNs3LteEnbMac_Type)

class PyNs3LteEnbMac__PythonHelper : public ns3::LteEnbMac
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrc;


extern PyTypeObject *_PyNs3LteEnbRrc_Type;
#define PyNs3LteEnbRrc_Type (*_PyNs3LteEnbRrc_Type)

class PyNs3LteEnbRrc__PythonHelper : public ns3::LteEnbRrc
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbRrc__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrc::HandoverEventInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcHandoverEventInfo;


extern PyTypeObject *_PyNs3LteEnbRrcHandoverEventInfo_Type;
#define PyNs3LteEnbRrcHandoverEventInfo_Type (*_PyNs3LteEnbRrcHandoverEventInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbRrcHandoverEventInfo_wrapper_registry;
#define PyNs3LteEnbRrcHandoverEventInfo_wrapper_registry (*_PyNs3LteEnbRrcHandoverEventInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrc::MmWaveComponentCarrierConf *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcMmWaveComponentCarrierConf;


extern PyTypeObject *_PyNs3LteEnbRrcMmWaveComponentCarrierConf_Type;
#define PyNs3LteEnbRrcMmWaveComponentCarrierConf_Type (*_PyNs3LteEnbRrcMmWaveComponentCarrierConf_Type)

extern std::map<void*, PyObject*> *_PyNs3LteEnbRrcMmWaveComponentCarrierConf_wrapper_registry;
#define PyNs3LteEnbRrcMmWaveComponentCarrierConf_wrapper_registry (*_PyNs3LteEnbRrcMmWaveComponentCarrierConf_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteFfrAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfrAlgorithm;


extern PyTypeObject *_PyNs3LteFfrAlgorithm_Type;
#define PyNs3LteFfrAlgorithm_Type (*_PyNs3LteFfrAlgorithm_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteHandoverAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHandoverAlgorithm;


extern PyTypeObject *_PyNs3LteHandoverAlgorithm_Type;
#define PyNs3LteHandoverAlgorithm_Type (*_PyNs3LteHandoverAlgorithm_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteHarqPhy *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHarqPhy;


extern PyTypeObject *_PyNs3LteHarqPhy_Type;
#define PyNs3LteHarqPhy_Type (*_PyNs3LteHarqPhy_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteInterference *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteInterference;


extern PyTypeObject *_PyNs3LteInterference_Type;
#define PyNs3LteInterference_Type (*_PyNs3LteInterference_Type)

class PyNs3LteInterference__PythonHelper : public ns3::LteInterference
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteInterference__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LtePdcp *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcp;


extern PyTypeObject *_PyNs3LtePdcp_Type;
#define PyNs3LtePdcp_Type (*_PyNs3LtePdcp_Type)

class PyNs3LtePdcp__PythonHelper : public ns3::LtePdcp
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LtePdcp__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LtePdcp::Status *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpStatus;


extern PyTypeObject *_PyNs3LtePdcpStatus_Type;
#define PyNs3LtePdcpStatus_Type (*_PyNs3LtePdcpStatus_Type)

extern std::map<void*, PyObject*> *_PyNs3LtePdcpStatus_wrapper_registry;
#define PyNs3LtePdcpStatus_wrapper_registry (*_PyNs3LtePdcpStatus_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LtePhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePhy;


extern PyTypeObject *_PyNs3LtePhy_Type;
#define PyNs3LtePhy_Type (*_PyNs3LtePhy_Type)

class PyNs3LtePhy__PythonHelper : public ns3::LtePhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LtePhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteRadioBearerInfo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRadioBearerInfo;


extern PyTypeObject *_PyNs3LteRadioBearerInfo_Type;
#define PyNs3LteRadioBearerInfo_Type (*_PyNs3LteRadioBearerInfo_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteRlc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlc;


extern PyTypeObject *_PyNs3LteRlc_Type;
#define PyNs3LteRlc_Type (*_PyNs3LteRlc_Type)

class PyNs3LteRlc__PythonHelper : public ns3::LteRlc
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlc__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteRlcAm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcAm;


extern PyTypeObject *_PyNs3LteRlcAm_Type;
#define PyNs3LteRlcAm_Type (*_PyNs3LteRlcAm_Type)

class PyNs3LteRlcAm__PythonHelper : public ns3::LteRlcAm
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlcAm__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteRlcAm::RetxPdu *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcAmRetxPdu;


extern PyTypeObject *_PyNs3LteRlcAmRetxPdu_Type;
#define PyNs3LteRlcAmRetxPdu_Type (*_PyNs3LteRlcAmRetxPdu_Type)

extern std::map<void*, PyObject*> *_PyNs3LteRlcAmRetxPdu_wrapper_registry;
#define PyNs3LteRlcAmRetxPdu_wrapper_registry (*_PyNs3LteRlcAmRetxPdu_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LteRlcSm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcSm;


extern PyTypeObject *_PyNs3LteRlcSm_Type;
#define PyNs3LteRlcSm_Type (*_PyNs3LteRlcSm_Type)

class PyNs3LteRlcSm__PythonHelper : public ns3::LteRlcSm
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlcSm__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteSignalingRadioBearerInfo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSignalingRadioBearerInfo;


extern PyTypeObject *_PyNs3LteSignalingRadioBearerInfo_Type;
#define PyNs3LteSignalingRadioBearerInfo_Type (*_PyNs3LteSignalingRadioBearerInfo_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumPhy;


extern PyTypeObject *_PyNs3LteSpectrumPhy_Type;
#define PyNs3LteSpectrumPhy_Type (*_PyNs3LteSpectrumPhy_Type)

class PyNs3LteSpectrumPhy__PythonHelper : public ns3::LteSpectrumPhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteSpectrumPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteStatsCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteStatsCalculator;


extern PyTypeObject *_PyNs3LteStatsCalculator_Type;
#define PyNs3LteStatsCalculator_Type (*_PyNs3LteStatsCalculator_Type)

class PyNs3LteStatsCalculator__PythonHelper : public ns3::LteStatsCalculator
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteStatsCalculator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteUeMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeMac;


extern PyTypeObject *_PyNs3LteUeMac_Type;
#define PyNs3LteUeMac_Type (*_PyNs3LteUeMac_Type)

class PyNs3LteUeMac__PythonHelper : public ns3::LteUeMac
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteUePhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePhy;


extern PyTypeObject *_PyNs3LteUePhy_Type;
#define PyNs3LteUePhy_Type (*_PyNs3LteUePhy_Type)

class PyNs3LteUePhy__PythonHelper : public ns3::LteUePhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteUePowerControl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePowerControl;


extern PyTypeObject *_PyNs3LteUePowerControl_Type;
#define PyNs3LteUePowerControl_Type (*_PyNs3LteUePowerControl_Type)

class PyNs3LteUePowerControl__PythonHelper : public ns3::LteUePowerControl
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePowerControl__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteUeRrc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrc;


extern PyTypeObject *_PyNs3LteUeRrc_Type;
#define PyNs3LteUeRrc_Type (*_PyNs3LteUeRrc_Type)

class PyNs3LteUeRrc__PythonHelper : public ns3::LteUeRrc
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeRrc__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressChecker;


extern PyTypeObject *_PyNs3Mac48AddressChecker_Type;
#define PyNs3Mac48AddressChecker_Type (*_PyNs3Mac48AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressValue;


extern PyTypeObject *_PyNs3Mac48AddressValue_Type;
#define PyNs3Mac48AddressValue_Type (*_PyNs3Mac48AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac64AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac64AddressChecker;


extern PyTypeObject *_PyNs3Mac64AddressChecker_Type;
#define PyNs3Mac64AddressChecker_Type (*_PyNs3Mac64AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac64AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac64AddressValue;


extern PyTypeObject *_PyNs3Mac64AddressValue_Type;
#define PyNs3Mac64AddressValue_Type (*_PyNs3Mac64AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::MatrixPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MatrixPropagationLossModel;


extern PyTypeObject *_PyNs3MatrixPropagationLossModel_Type;
#define PyNs3MatrixPropagationLossModel_Type (*_PyNs3MatrixPropagationLossModel_Type)

class PyNs3MatrixPropagationLossModel__PythonHelper : public ns3::MatrixPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MatrixPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::MibLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MibLteControlMessage;


extern PyTypeObject *_PyNs3MibLteControlMessage_Type;
#define PyNs3MibLteControlMessage_Type (*_PyNs3MibLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::MinMaxAvgTotalCalculator< unsigned int > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MinMaxAvgTotalCalculator__Unsigned_int;


extern PyTypeObject *_PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type;
#define PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type (*_PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type)

class PyNs3MinMaxAvgTotalCalculator__Unsigned_int__PythonHelper : public ns3::MinMaxAvgTotalCalculator< unsigned int >
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MinMaxAvgTotalCalculator__Unsigned_int__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::MinMaxAvgTotalCalculator< unsigned long > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MinMaxAvgTotalCalculator__Unsigned_long;


extern PyTypeObject *_PyNs3MinMaxAvgTotalCalculator__Unsigned_long_Type;
#define PyNs3MinMaxAvgTotalCalculator__Unsigned_long_Type (*_PyNs3MinMaxAvgTotalCalculator__Unsigned_long_Type)

class PyNs3MinMaxAvgTotalCalculator__Unsigned_long__PythonHelper : public ns3::MinMaxAvgTotalCalculator< unsigned long >
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MinMaxAvgTotalCalculator__Unsigned_long__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::MobilityBuildingInfo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MobilityBuildingInfo;


extern PyTypeObject *_PyNs3MobilityBuildingInfo_Type;
#define PyNs3MobilityBuildingInfo_Type (*_PyNs3MobilityBuildingInfo_Type)


typedef struct {
    PyObject_HEAD
    ns3::MobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MobilityModel;


extern PyTypeObject *_PyNs3MobilityModel_Type;
#define PyNs3MobilityModel_Type (*_PyNs3MobilityModel_Type)

class PyNs3MobilityModel__PythonHelper : public ns3::MobilityModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NakagamiPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NakagamiPropagationLossModel;


extern PyTypeObject *_PyNs3NakagamiPropagationLossModel_Type;
#define PyNs3NakagamiPropagationLossModel_Type (*_PyNs3NakagamiPropagationLossModel_Type)

class PyNs3NakagamiPropagationLossModel__PythonHelper : public ns3::NakagamiPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NakagamiPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDevice;


extern PyTypeObject *_PyNs3NetDevice_Type;
#define PyNs3NetDevice_Type (*_PyNs3NetDevice_Type)


typedef struct {
    PyObject_HEAD
    ns3::NixVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NixVector;


extern PyTypeObject *_PyNs3NixVector_Type;
#define PyNs3NixVector_Type (*_PyNs3NixVector_Type)


typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject *_PyNs3Node_Type;
#define PyNs3Node_Type (*_PyNs3Node_Type)

class PyNs3Node__PythonHelper : public ns3::Node
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Node__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalRandomVariable;


extern PyTypeObject *_PyNs3NormalRandomVariable_Type;
#define PyNs3NormalRandomVariable_Type (*_PyNs3NormalRandomVariable_Type)

class PyNs3NormalRandomVariable__PythonHelper : public ns3::NormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject *_PyNs3ObjectFactoryChecker_Type;
#define PyNs3ObjectFactoryChecker_Type (*_PyNs3ObjectFactoryChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject *_PyNs3ObjectFactoryValue_Type;
#define PyNs3ObjectFactoryValue_Type (*_PyNs3ObjectFactoryValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Packet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Packet;


extern PyTypeObject *_PyNs3Packet_Type;
#define PyNs3Packet_Type (*_PyNs3Packet_Type)


typedef struct {
    PyObject_HEAD
    ns3::ParetoRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoRandomVariable;


extern PyTypeObject *_PyNs3ParetoRandomVariable_Type;
#define PyNs3ParetoRandomVariable_Type (*_PyNs3ParetoRandomVariable_Type)

class PyNs3ParetoRandomVariable__PythonHelper : public ns3::ParetoRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ParetoRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PointerChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerChecker;


extern PyTypeObject *_PyNs3PointerChecker_Type;
#define PyNs3PointerChecker_Type (*_PyNs3PointerChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::PointerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerValue;


extern PyTypeObject *_PyNs3PointerValue_Type;
#define PyNs3PointerValue_Type (*_PyNs3PointerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::QueueItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueItem;


extern PyTypeObject *_PyNs3QueueItem_Type;
#define PyNs3QueueItem_Type (*_PyNs3QueueItem_Type)


typedef struct {
    PyObject_HEAD
    ns3::QueueSizeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueSizeChecker;


extern PyTypeObject *_PyNs3QueueSizeChecker_Type;
#define PyNs3QueueSizeChecker_Type (*_PyNs3QueueSizeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::QueueSizeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueSizeValue;


extern PyTypeObject *_PyNs3QueueSizeValue_Type;
#define PyNs3QueueSizeValue_Type (*_PyNs3QueueSizeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::RachPreambleLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RachPreambleLteControlMessage;


extern PyTypeObject *_PyNs3RachPreambleLteControlMessage_Type;
#define PyNs3RachPreambleLteControlMessage_Type (*_PyNs3RachPreambleLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::RarLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RarLteControlMessage;


extern PyTypeObject *_PyNs3RarLteControlMessage_Type;
#define PyNs3RarLteControlMessage_Type (*_PyNs3RarLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::RarLteControlMessage::Rar *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RarLteControlMessageRar;


extern PyTypeObject *_PyNs3RarLteControlMessageRar_Type;
#define PyNs3RarLteControlMessageRar_Type (*_PyNs3RarLteControlMessageRar_Type)

extern std::map<void*, PyObject*> *_PyNs3RarLteControlMessageRar_wrapper_registry;
#define PyNs3RarLteControlMessageRar_wrapper_registry (*_PyNs3RarLteControlMessageRar_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::RrcAsn1Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcAsn1Header;


extern PyTypeObject *_PyNs3RrcAsn1Header_Type;
#define PyNs3RrcAsn1Header_Type (*_PyNs3RrcAsn1Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcDlCcchMessage *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcDlCcchMessage;


extern PyTypeObject *_PyNs3RrcDlCcchMessage_Type;
#define PyNs3RrcDlCcchMessage_Type (*_PyNs3RrcDlCcchMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcDlDcchMessage *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcDlDcchMessage;


extern PyTypeObject *_PyNs3RrcDlDcchMessage_Type;
#define PyNs3RrcDlDcchMessage_Type (*_PyNs3RrcDlDcchMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcUlCcchMessage *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcUlCcchMessage;


extern PyTypeObject *_PyNs3RrcUlCcchMessage_Type;
#define PyNs3RrcUlCcchMessage_Type (*_PyNs3RrcUlCcchMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcUlDcchMessage *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcUlDcchMessage;


extern PyTypeObject *_PyNs3RrcUlDcchMessage_Type;
#define PyNs3RrcUlDcchMessage_Type (*_PyNs3RrcUlDcchMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::Sib1LteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Sib1LteControlMessage;


extern PyTypeObject *_PyNs3Sib1LteControlMessage_Type;
#define PyNs3Sib1LteControlMessage_Type (*_PyNs3Sib1LteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumChannel;


extern PyTypeObject *_PyNs3SpectrumChannel_Type;
#define PyNs3SpectrumChannel_Type (*_PyNs3SpectrumChannel_Type)

class PyNs3SpectrumChannel__PythonHelper : public ns3::SpectrumChannel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::StringChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StringChecker;


extern PyTypeObject *_PyNs3StringChecker_Type;
#define PyNs3StringChecker_Type (*_PyNs3StringChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::StringValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StringValue;


extern PyTypeObject *_PyNs3StringValue_Type;
#define PyNs3StringValue_Type (*_PyNs3StringValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject *_PyNs3TimeValue_Type;
#define PyNs3TimeValue_Type (*_PyNs3TimeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject *_PyNs3TypeIdChecker_Type;
#define PyNs3TypeIdChecker_Type (*_PyNs3TypeIdChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject *_PyNs3TypeIdValue_Type;
#define PyNs3TypeIdValue_Type (*_PyNs3TypeIdValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject *_PyNs3UintegerValue_Type;
#define PyNs3UintegerValue_Type (*_PyNs3UintegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UlDciLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlDciLteControlMessage;


extern PyTypeObject *_PyNs3UlDciLteControlMessage_Type;
#define PyNs3UlDciLteControlMessage_Type (*_PyNs3UlDciLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DChecker;


extern PyTypeObject *_PyNs3Vector2DChecker_Type;
#define PyNs3Vector2DChecker_Type (*_PyNs3Vector2DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DValue;


extern PyTypeObject *_PyNs3Vector2DValue_Type;
#define PyNs3Vector2DValue_Type (*_PyNs3Vector2DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DChecker;


extern PyTypeObject *_PyNs3Vector3DChecker_Type;
#define PyNs3Vector3DChecker_Type (*_PyNs3Vector3DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DValue;


extern PyTypeObject *_PyNs3Vector3DValue_Type;
#define PyNs3Vector3DValue_Type (*_PyNs3Vector3DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressChecker;


extern PyTypeObject *_PyNs3AddressChecker_Type;
#define PyNs3AddressChecker_Type (*_PyNs3AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressValue;


extern PyTypeObject *_PyNs3AddressValue_Type;
#define PyNs3AddressValue_Type (*_PyNs3AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BsrLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BsrLteControlMessage;


extern PyTypeObject *_PyNs3BsrLteControlMessage_Type;
#define PyNs3BsrLteControlMessage_Type (*_PyNs3BsrLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Bool_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Ns3ObjectBase___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Bool_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Bool_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Bool_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Bool_Bool_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, const ns3::SpectrumValue &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Const_ns3SpectrumValue___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Const_ns3SpectrumValue___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Const_ns3SpectrumValue___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Const_ns3SpectrumValue___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::DlSchedulingCallbackInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3DlSchedulingCallbackInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3DlSchedulingCallbackInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3DlSchedulingCallbackInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3DlSchedulingCallbackInfo_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::EpcUeNas::State, ns3::EpcUeNas::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3EpcUeNasState_Ns3EpcUeNasState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3EpcUeNasState_Ns3EpcUeNasState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3EpcUeNasState_Ns3EpcUeNasState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3EpcUeNasState_Ns3EpcUeNasState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3PhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3PhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3PhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3PhyReceptionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3PhyTransmissionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3PhyTransmissionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3PhyTransmissionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3PhyTransmissionStatParameters_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Ptr__lt__const_ns3MobilityModel__gt___Double_Double_Double_Double_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3MobilityModel__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PacketBurst__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PacketBurst__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PacketBurst__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3PacketBurst__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::QueueDiscItem>, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Const_char___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Const_char___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Const_char___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Const_char___star___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::QueueDiscItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3QueueDiscItem__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Ns3Ptr__lt__const_ns3SpectrumPhy__gt___Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::LteUeRrc>, std::list<ns3::LteRrcSap::SCellToAddMod, std::allocator<ns3::LteRrcSap::SCellToAddMod> >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3LteUeRrc__gt___StdList__lt__ns3LteRrcSapSCellToAddMod__stdAllocator__lt__ns3LteRrcSapSCellToAddMod__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3LteUeRrc__gt___StdList__lt__ns3LteRrcSapSCellToAddMod__stdAllocator__lt__ns3LteRrcSapSCellToAddMod__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3LteUeRrc__gt___StdList__lt__ns3LteRrcSapSCellToAddMod__stdAllocator__lt__ns3LteRrcSapSCellToAddMod__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3LteUeRrc__gt___StdList__lt__ns3LteRrcSapSCellToAddMod__stdAllocator__lt__ns3LteRrcSapSCellToAddMod__gt_____gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Ptr__lt__const_ns3Packet__gt___Unsigned_short_Const_ns3Address___amp___Const_ns3Address___amp___Ns3NetDevicePacketType_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3NetDevice__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Packet__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Const_ns3Address___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3Socket__gt___Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Ptr__lt__ns3SpectrumSignalParameters__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Time_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned int, unsigned int, unsigned short, unsigned char, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Unsigned_short_Unsigned_char_Unsigned_short_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Unsigned_short_Unsigned_char_Unsigned_short_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Unsigned_short_Unsigned_char_Unsigned_short_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_int_Unsigned_int_Unsigned_short_Unsigned_char_Unsigned_short_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned long, ns3::SpectrumValue &, ns3::SpectrumValue &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_long_Ns3SpectrumValue___amp___Ns3SpectrumValue___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_long_Ns3SpectrumValue___amp___Ns3SpectrumValue___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_long_Ns3SpectrumValue___amp___Ns3SpectrumValue___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_long_Ns3SpectrumValue___amp___Ns3SpectrumValue___amp___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned long, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned long, unsigned short, long double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Long_double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Long_double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Long_double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Long_double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned long, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::LteRrcSap::MeasurementReport, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteRrcSapMeasurementReport_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteRrcSapMeasurementReport_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteRrcSapMeasurementReport_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteRrcSapMeasurementReport_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::LteUeRrc::State, ns3::LteUeRrc::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteUeRrcState_Ns3LteUeRrcState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteUeRrcState_Ns3LteUeRrcState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteUeRrcState_Ns3LteUeRrcState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3LteUeRrcState_Ns3LteUeRrcState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::UeManager::State, ns3::UeManager::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3UeManagerState_Ns3UeManagerState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3UeManagerState_Ns3UeManagerState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3UeManagerState_Ns3UeManagerState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3UeManagerState_Ns3UeManagerState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned long, unsigned short, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_long_Unsigned_short_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Ns3Ptr__lt__ns3SpectrumValue__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Ns3Ptr__lt__ns3SpectrumValue__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Ns3Ptr__lt__ns3SpectrumValue__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Ns3Ptr__lt__ns3SpectrumValue__gt___Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned char, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Unsigned_int_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned char, unsigned int, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_char_Unsigned_int_Unsigned_long_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Bool_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Bool_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Bool_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Bool_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Double_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3LteUePhyState_Ns3LteUePhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3LteUePhyState_Ns3LteUePhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3LteUePhyState_Ns3LteUePhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3LteUePhyState_Ns3LteUePhyState_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, unsigned short, unsigned short, unsigned int, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Unsigned_int_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject *_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Unsigned_int_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;
#define PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Unsigned_int_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type (*_PyNs3CallbackImpl__Void_Unsigned_short_Unsigned_short_Unsigned_int_Unsigned_char_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type)


typedef struct {
    PyObject_HEAD
    ns3::DlCqiLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlCqiLteControlMessage;


extern PyTypeObject *_PyNs3DlCqiLteControlMessage_Type;
#define PyNs3DlCqiLteControlMessage_Type (*_PyNs3DlCqiLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::DlDciLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlDciLteControlMessage;


extern PyTypeObject *_PyNs3DlDciLteControlMessage_Type;
#define PyNs3DlDciLteControlMessage_Type (*_PyNs3DlDciLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::DlHarqFeedbackLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlHarqFeedbackLteControlMessage;


extern PyTypeObject *_PyNs3DlHarqFeedbackLteControlMessage_Type;
#define PyNs3DlHarqFeedbackLteControlMessage_Type (*_PyNs3DlHarqFeedbackLteControlMessage_Type)


typedef struct {
    PyObject_HEAD
    ns3::HandoverPreparationInfoHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HandoverPreparationInfoHeader;


extern PyTypeObject *_PyNs3HandoverPreparationInfoHeader_Type;
#define PyNs3HandoverPreparationInfoHeader_Type (*_PyNs3HandoverPreparationInfoHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteDataRadioBearerInfo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteDataRadioBearerInfo;


extern PyTypeObject *_PyNs3LteDataRadioBearerInfo_Type;
#define PyNs3LteDataRadioBearerInfo_Type (*_PyNs3LteDataRadioBearerInfo_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteEnbPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbPhy;


extern PyTypeObject *_PyNs3LteEnbPhy_Type;
#define PyNs3LteEnbPhy_Type (*_PyNs3LteEnbPhy_Type)

class PyNs3LteEnbPhy__PythonHelper : public ns3::LteEnbPhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LteNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteNetDevice;


extern PyTypeObject *_PyNs3LteNetDevice_Type;
#define PyNs3LteNetDevice_Type (*_PyNs3LteNetDevice_Type)


typedef struct {
    PyObject_HEAD
    ns3::MeasurementReportHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MeasurementReportHeader;


extern PyTypeObject *_PyNs3MeasurementReportHeader_Type;
#define PyNs3MeasurementReportHeader_Type (*_PyNs3MeasurementReportHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::QueueDiscItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueDiscItem;


extern PyTypeObject *_PyNs3QueueDiscItem_Type;
#define PyNs3QueueDiscItem_Type (*_PyNs3QueueDiscItem_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectToMmWaveHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectToMmWaveHeader;


extern PyTypeObject *_PyNs3RrcConnectToMmWaveHeader_Type;
#define PyNs3RrcConnectToMmWaveHeader_Type (*_PyNs3RrcConnectToMmWaveHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReconfigurationCompleteHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReconfigurationCompleteHeader;


extern PyTypeObject *_PyNs3RrcConnectionReconfigurationCompleteHeader_Type;
#define PyNs3RrcConnectionReconfigurationCompleteHeader_Type (*_PyNs3RrcConnectionReconfigurationCompleteHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReconfigurationHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReconfigurationHeader;


extern PyTypeObject *_PyNs3RrcConnectionReconfigurationHeader_Type;
#define PyNs3RrcConnectionReconfigurationHeader_Type (*_PyNs3RrcConnectionReconfigurationHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReestablishmentCompleteHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReestablishmentCompleteHeader;


extern PyTypeObject *_PyNs3RrcConnectionReestablishmentCompleteHeader_Type;
#define PyNs3RrcConnectionReestablishmentCompleteHeader_Type (*_PyNs3RrcConnectionReestablishmentCompleteHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReestablishmentHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReestablishmentHeader;


extern PyTypeObject *_PyNs3RrcConnectionReestablishmentHeader_Type;
#define PyNs3RrcConnectionReestablishmentHeader_Type (*_PyNs3RrcConnectionReestablishmentHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReestablishmentRejectHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReestablishmentRejectHeader;


extern PyTypeObject *_PyNs3RrcConnectionReestablishmentRejectHeader_Type;
#define PyNs3RrcConnectionReestablishmentRejectHeader_Type (*_PyNs3RrcConnectionReestablishmentRejectHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReestablishmentRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReestablishmentRequestHeader;


extern PyTypeObject *_PyNs3RrcConnectionReestablishmentRequestHeader_Type;
#define PyNs3RrcConnectionReestablishmentRequestHeader_Type (*_PyNs3RrcConnectionReestablishmentRequestHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionRejectHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionRejectHeader;


extern PyTypeObject *_PyNs3RrcConnectionRejectHeader_Type;
#define PyNs3RrcConnectionRejectHeader_Type (*_PyNs3RrcConnectionRejectHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReleaseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReleaseHeader;


extern PyTypeObject *_PyNs3RrcConnectionReleaseHeader_Type;
#define PyNs3RrcConnectionReleaseHeader_Type (*_PyNs3RrcConnectionReleaseHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionRequestHeader;


extern PyTypeObject *_PyNs3RrcConnectionRequestHeader_Type;
#define PyNs3RrcConnectionRequestHeader_Type (*_PyNs3RrcConnectionRequestHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionSetupCompleteHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionSetupCompleteHeader;


extern PyTypeObject *_PyNs3RrcConnectionSetupCompleteHeader_Type;
#define PyNs3RrcConnectionSetupCompleteHeader_Type (*_PyNs3RrcConnectionSetupCompleteHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionSetupHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionSetupHeader;


extern PyTypeObject *_PyNs3RrcConnectionSetupHeader_Type;
#define PyNs3RrcConnectionSetupHeader_Type (*_PyNs3RrcConnectionSetupHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionSwitchHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionSwitchHeader;


extern PyTypeObject *_PyNs3RrcConnectionSwitchHeader_Type;
#define PyNs3RrcConnectionSwitchHeader_Type (*_PyNs3RrcConnectionSwitchHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::RrcNotifySecondaryConnectedHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcNotifySecondaryConnectedHeader;


extern PyTypeObject *_PyNs3RrcNotifySecondaryConnectedHeader_Type;
#define PyNs3RrcNotifySecondaryConnectedHeader_Type (*_PyNs3RrcNotifySecondaryConnectedHeader_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteEnbNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbNetDevice;


extern PyTypeObject *_PyNs3LteEnbNetDevice_Type;
#define PyNs3LteEnbNetDevice_Type (*_PyNs3LteEnbNetDevice_Type)


typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::mmwave::BeamformingParams > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3MmwaveBeamformingParams;


extern PyTypeObject PyNs3DefaultDeleter__Ns3MmwaveBeamformingParams_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3MmwaveBeamformingParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::mmwave::ChannelParams > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3MmwaveChannelParams;


extern PyTypeObject PyNs3DefaultDeleter__Ns3MmwaveChannelParams_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3MmwaveChannelParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::mmwave::MmWaveControlMessage > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3MmwaveMmWaveControlMessage;


extern PyTypeObject PyNs3DefaultDeleter__Ns3MmwaveMmWaveControlMessage_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3MmwaveMmWaveControlMessage_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::mmwave::MmWaveHarqPhy > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3MmwaveMmWaveHarqPhy;


extern PyTypeObject PyNs3DefaultDeleter__Ns3MmwaveMmWaveHarqPhy_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3MmwaveMmWaveHarqPhy_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::mmwave::Params3gpp > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3MmwaveParams3gpp;


extern PyTypeObject PyNs3DefaultDeleter__Ns3MmwaveParams3gpp_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3MmwaveParams3gpp_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::mmwave::TraceParams > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3MmwaveTraceParams;


extern PyTypeObject PyNs3DefaultDeleter__Ns3MmwaveTraceParams_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3MmwaveTraceParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DefaultDeleter< ns3::mmwave::mmWaveChunkProcessor > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultDeleter__Ns3MmwaveMmWaveChunkProcessor;


extern PyTypeObject PyNs3DefaultDeleter__Ns3MmwaveMmWaveChunkProcessor_Type;

extern std::map<void*, PyObject*> PyNs3DefaultDeleter__Ns3MmwaveMmWaveChunkProcessor_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::mmwave::BeamformingParams, ns3::empty, ns3::DefaultDeleter<ns3::mmwave::BeamformingParams> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MmwaveBeamformingParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveBeamformingParams__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MmwaveBeamformingParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveBeamformingParams__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MmwaveBeamformingParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveBeamformingParams__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::mmwave::ChannelParams, ns3::empty, ns3::DefaultDeleter<ns3::mmwave::ChannelParams> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MmwaveChannelParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveChannelParams__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MmwaveChannelParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveChannelParams__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MmwaveChannelParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveChannelParams__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::mmwave::MmWaveControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::mmwave::MmWaveControlMessage> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MmwaveMmWaveControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveControlMessage__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MmwaveMmWaveControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveControlMessage__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MmwaveMmWaveControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveControlMessage__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::mmwave::MmWaveHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::mmwave::MmWaveHarqPhy> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MmwaveMmWaveHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveHarqPhy__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MmwaveMmWaveHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveHarqPhy__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MmwaveMmWaveHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveHarqPhy__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::mmwave::Params3gpp, ns3::empty, ns3::DefaultDeleter<ns3::mmwave::Params3gpp> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MmwaveParams3gpp_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveParams3gpp__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MmwaveParams3gpp_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveParams3gpp__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MmwaveParams3gpp_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveParams3gpp__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::mmwave::TraceParams, ns3::empty, ns3::DefaultDeleter<ns3::mmwave::TraceParams> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MmwaveTraceParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveTraceParams__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MmwaveTraceParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveTraceParams__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MmwaveTraceParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveTraceParams__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::mmwave::channelMatrix, ns3::empty, ns3::DefaultDeleter<ns3::mmwave::channelMatrix> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MmwaveChannelMatrix_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveChannelMatrix__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MmwaveChannelMatrix_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveChannelMatrix__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MmwaveChannelMatrix_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveChannelMatrix__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::mmwave::mmWaveBeamFormingParams, ns3::empty, ns3::DefaultDeleter<ns3::mmwave::mmWaveBeamFormingParams> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MmwaveMmWaveBeamFormingParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveBeamFormingParams__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MmwaveMmWaveBeamFormingParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveBeamFormingParams__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MmwaveMmWaveBeamFormingParams_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveBeamFormingParams__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::mmwave::mmWaveBeamFormingTraces, ns3::empty, ns3::DefaultDeleter<ns3::mmwave::mmWaveBeamFormingTraces> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MmwaveMmWaveBeamFormingTraces_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveBeamFormingTraces__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MmwaveMmWaveBeamFormingTraces_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveBeamFormingTraces__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MmwaveMmWaveBeamFormingTraces_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveBeamFormingTraces__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::mmwave::mmWaveChunkProcessor, ns3::empty, ns3::DefaultDeleter<ns3::mmwave::mmWaveChunkProcessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MmwaveMmWaveChunkProcessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveChunkProcessor__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MmwaveMmWaveChunkProcessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveChunkProcessor__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MmwaveMmWaveChunkProcessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3MmwaveMmWaveChunkProcessor__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImpl< void, ns3::mmwave::RxPacketTraceParams, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImpl__Void_Ns3MmwaveRxPacketTraceParams_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty;


extern PyTypeObject PyNs3CallbackImpl__Void_Ns3MmwaveRxPacketTraceParams_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Ns3Empty_Type;


typedef struct {
    PyObject_HEAD
    std::vector< ns3::CeBitmap_e > *obj;
} Pystd__vector__lt___ns3__CeBitmap_e___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__CeBitmap_e___gt__ *container;
    std::vector< ns3::CeBitmap_e >::iterator *iterator;
} Pystd__vector__lt___ns3__CeBitmap_e___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__CeBitmap_e___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__CeBitmap_e___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__CeBitmap_e___gt__(PyObject *arg, std::vector< ns3::CeBitmap_e > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned char > *obj;
} Pystd__vector__lt___unsigned_char___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_char___gt__ *container;
    std::vector< unsigned char >::iterator *iterator;
} Pystd__vector__lt___unsigned_char___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_char___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_char___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_char___gt__(PyObject *arg, std::vector< unsigned char > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned short > *obj;
} Pystd__vector__lt___unsigned_short___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_short___gt__ *container;
    std::vector< unsigned short >::iterator *iterator;
} Pystd__vector__lt___unsigned_short___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_short___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_short___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_short___gt__(PyObject *arg, std::vector< unsigned short > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::DlInfoListElement_s::HarqStatus_e > *obj;
} Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__ *container;
    std::vector< ns3::DlInfoListElement_s::HarqStatus_e >::iterator *iterator;
} Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__(PyObject *arg, std::vector< ns3::DlInfoListElement_s::HarqStatus_e > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcEnbS1SapProvider::BearerToBeSwitched > *obj;
} Pystd__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt__ *container;
    std::list< ns3::EpcEnbS1SapProvider::BearerToBeSwitched >::iterator *iterator;
} Pystd__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt__(PyObject *arg, std::list< ns3::EpcEnbS1SapProvider::BearerToBeSwitched > *container);

typedef struct {
    PyObject_HEAD
    std::vector< bool > *obj;
} Pystd__vector__lt___bool___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___bool___gt__ *container;
    std::vector< bool >::iterator *iterator;
} Pystd__vector__lt___bool___gt__Iter;


extern PyTypeObject Pystd__vector__lt___bool___gt___Type;
extern PyTypeObject Pystd__vector__lt___bool___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___bool___gt__(PyObject *arg, std::vector< bool > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::UlHighInterferenceInformationItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::UlHighInterferenceInformationItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::UlHighInterferenceInformationItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::ErabToBeSetupItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::ErabToBeSetupItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::ErabToBeSetupItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::RlcSetupRequest > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__RlcSetupRequest___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__RlcSetupRequest___gt__ *container;
    std::vector< ns3::EpcX2Sap::RlcSetupRequest >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__RlcSetupRequest___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__RlcSetupRequest___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__RlcSetupRequest___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__RlcSetupRequest___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::RlcSetupRequest > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::ErabAdmittedItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::ErabAdmittedItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::ErabAdmittedItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::ErabNotAdmittedItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::ErabNotAdmittedItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::ErabNotAdmittedItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::CellInformationItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::CellInformationItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::CellInformationItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::CellMeasurementResultItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::CellMeasurementResultItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::CellMeasurementResultItem > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned long, double > *obj;
} Pystd__map__lt___unsigned_long__double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_long__double___gt__ *container;
    std::map< unsigned long, double >::iterator *iterator;
} Pystd__map__lt___unsigned_long__double___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_long__double___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_long__double___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_long__double___gt__(PyObject *arg, std::map< unsigned long, double > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::VendorSpecificListElement_s > *obj;
} Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__ *container;
    std::vector< ns3::VendorSpecificListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__VendorSpecificListElement_s___gt__(PyObject *arg, std::vector< ns3::VendorSpecificListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::LogicalChannelConfigListElement_s > *obj;
} Pystd__vector__lt___ns3__LogicalChannelConfigListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__LogicalChannelConfigListElement_s___gt__ *container;
    std::vector< ns3::LogicalChannelConfigListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__LogicalChannelConfigListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__LogicalChannelConfigListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__LogicalChannelConfigListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__LogicalChannelConfigListElement_s___gt__(PyObject *arg, std::vector< ns3::LogicalChannelConfigListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::PagingInfoListElement_s > *obj;
} Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__ *container;
    std::vector< ns3::PagingInfoListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__PagingInfoListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__PagingInfoListElement_s___gt__(PyObject *arg, std::vector< ns3::PagingInfoListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::DlInfoListElement_s > *obj;
} Pystd__vector__lt___ns3__DlInfoListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__DlInfoListElement_s___gt__ *container;
    std::vector< ns3::DlInfoListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__DlInfoListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__DlInfoListElement_s___gt__(PyObject *arg, std::vector< ns3::DlInfoListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::RachListElement_s > *obj;
} Pystd__vector__lt___ns3__RachListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__RachListElement_s___gt__ *container;
    std::vector< ns3::RachListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__RachListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__RachListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__RachListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__RachListElement_s___gt__(PyObject *arg, std::vector< ns3::RachListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::CqiListElement_s > *obj;
} Pystd__vector__lt___ns3__CqiListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__CqiListElement_s___gt__ *container;
    std::vector< ns3::CqiListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__CqiListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__CqiListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__CqiListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__CqiListElement_s___gt__(PyObject *arg, std::vector< ns3::CqiListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::UlInfoListElement_s > *obj;
} Pystd__vector__lt___ns3__UlInfoListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__UlInfoListElement_s___gt__ *container;
    std::vector< ns3::UlInfoListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__UlInfoListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__UlInfoListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__UlInfoListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__UlInfoListElement_s___gt__(PyObject *arg, std::vector< ns3::UlInfoListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::SrListElement_s > *obj;
} Pystd__vector__lt___ns3__SrListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__SrListElement_s___gt__ *container;
    std::vector< ns3::SrListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__SrListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__SrListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__SrListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__SrListElement_s___gt__(PyObject *arg, std::vector< ns3::SrListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::MacCeListElement_s > *obj;
} Pystd__vector__lt___ns3__MacCeListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__MacCeListElement_s___gt__ *container;
    std::vector< ns3::MacCeListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__MacCeListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__MacCeListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__MacCeListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__MacCeListElement_s___gt__(PyObject *arg, std::vector< ns3::MacCeListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::BuildDataListElement_s > *obj;
} Pystd__vector__lt___ns3__BuildDataListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__BuildDataListElement_s___gt__ *container;
    std::vector< ns3::BuildDataListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__BuildDataListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__BuildDataListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__BuildDataListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__BuildDataListElement_s___gt__(PyObject *arg, std::vector< ns3::BuildDataListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::BuildRarListElement_s > *obj;
} Pystd__vector__lt___ns3__BuildRarListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__BuildRarListElement_s___gt__ *container;
    std::vector< ns3::BuildRarListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__BuildRarListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__BuildRarListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__BuildRarListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__BuildRarListElement_s___gt__(PyObject *arg, std::vector< ns3::BuildRarListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::BuildBroadcastListElement_s > *obj;
} Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__ *container;
    std::vector< ns3::BuildBroadcastListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__BuildBroadcastListElement_s___gt__(PyObject *arg, std::vector< ns3::BuildBroadcastListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::UlDciListElement_s > *obj;
} Pystd__vector__lt___ns3__UlDciListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__UlDciListElement_s___gt__ *container;
    std::vector< ns3::UlDciListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__UlDciListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__UlDciListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__UlDciListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__UlDciListElement_s___gt__(PyObject *arg, std::vector< ns3::UlDciListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::PhichListElement_s > *obj;
} Pystd__vector__lt___ns3__PhichListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__PhichListElement_s___gt__ *container;
    std::vector< ns3::PhichListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__PhichListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__PhichListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__PhichListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__PhichListElement_s___gt__(PyObject *arg, std::vector< ns3::PhichListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::map< std::string, ns3::LogComponent * > *obj;
} Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__ *container;
    std::map< std::string, ns3::LogComponent * >::iterator *iterator;
} Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__Iter;


extern PyTypeObject Pystd__map__lt___std__string__ns3__LogComponent___star_____gt___Type;
extern PyTypeObject Pystd__map__lt___std__string__ns3__LogComponent___star_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___std__string__ns3__LogComponent___star_____gt__(PyObject *arg, std::map< std::string, ns3::LogComponent * > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::LteCcmRrcSapProvider::LcsConfig > *obj;
} Pystd__vector__lt___ns3__LteCcmRrcSapProvider__LcsConfig___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__LteCcmRrcSapProvider__LcsConfig___gt__ *container;
    std::vector< ns3::LteCcmRrcSapProvider::LcsConfig >::iterator *iterator;
} Pystd__vector__lt___ns3__LteCcmRrcSapProvider__LcsConfig___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__LteCcmRrcSapProvider__LcsConfig___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__LteCcmRrcSapProvider__LcsConfig___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__LteCcmRrcSapProvider__LcsConfig___gt__(PyObject *arg, std::vector< ns3::LteCcmRrcSapProvider::LcsConfig > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::LteRrcSap::LogicalChannelConfig > *obj;
} Pystd__vector__lt___ns3__LteRrcSap__LogicalChannelConfig___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__LteRrcSap__LogicalChannelConfig___gt__ *container;
    std::vector< ns3::LteRrcSap::LogicalChannelConfig >::iterator *iterator;
} Pystd__vector__lt___ns3__LteRrcSap__LogicalChannelConfig___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__LteRrcSap__LogicalChannelConfig___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__LteRrcSap__LogicalChannelConfig___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__LteRrcSap__LogicalChannelConfig___gt__(PyObject *arg, std::vector< ns3::LteRrcSap::LogicalChannelConfig > *container);

typedef struct {
    PyObject_HEAD
    std::list< unsigned int > *obj;
} Pystd__list__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___unsigned_int___gt__ *container;
    std::list< unsigned int >::iterator *iterator;
} Pystd__list__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__list__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__list__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___unsigned_int___gt__(PyObject *arg, std::list< unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::list< double > *obj;
} Pystd__list__lt___double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___double___gt__ *container;
    std::list< double >::iterator *iterator;
} Pystd__list__lt___double___gt__Iter;


extern PyTypeObject Pystd__list__lt___double___gt___Type;
extern PyTypeObject Pystd__list__lt___double___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___double___gt__(PyObject *arg, std::list< double > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::SrbToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::SrbToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::SrbToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::DrbToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::DrbToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::DrbToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< unsigned char > *obj;
} Pystd__list__lt___unsigned_char___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___unsigned_char___gt__ *container;
    std::list< unsigned char >::iterator *iterator;
} Pystd__list__lt___unsigned_char___gt__Iter;


extern PyTypeObject Pystd__list__lt___unsigned_char___gt___Type;
extern PyTypeObject Pystd__list__lt___unsigned_char___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___unsigned_char___gt__(PyObject *arg, std::list< unsigned char > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::CellsToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::CellsToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::CellsToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::BlackCellsToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::BlackCellsToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::BlackCellsToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasObjectToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::MeasObjectToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasObjectToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::ReportConfigToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::ReportConfigToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::ReportConfigToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasIdToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::MeasIdToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasIdToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasResultScell > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultScell___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasResultScell___gt__ *container;
    std::list< ns3::LteRrcSap::MeasResultScell >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultScell___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultScell___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultScell___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasResultScell___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasResultScell > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasResultBestNeighCell > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt__ *container;
    std::list< ns3::LteRrcSap::MeasResultBestNeighCell >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasResultBestNeighCell___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasResultBestNeighCell > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasResultEutra > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__ *container;
    std::list< ns3::LteRrcSap::MeasResultEutra >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasResultEutra > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::SCellToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__SCellToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__SCellToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::SCellToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__SCellToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__SCellToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__SCellToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__SCellToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::SCellToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::vector< int > *obj;
} Pystd__vector__lt___int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___int___gt__ *container;
    std::vector< int >::iterator *iterator;
} Pystd__vector__lt___int___gt__Iter;


extern PyTypeObject Pystd__vector__lt___int___gt___Type;
extern PyTypeObject Pystd__vector__lt___int___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___int___gt__(PyObject *arg, std::vector< int > *container);

typedef struct {
    PyObject_HEAD
    std::map< int, double > *obj;
} Pystd__map__lt___int__double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___int__double___gt__ *container;
    std::map< int, double >::iterator *iterator;
} Pystd__map__lt___int__double___gt__Iter;


extern PyTypeObject Pystd__map__lt___int__double___gt___Type;
extern PyTypeObject Pystd__map__lt___int__double___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___int__double___gt__(PyObject *arg, std::map< int, double > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::LteUeCcmRrcSapProvider::LcsConfig > *obj;
} Pystd__vector__lt___ns3__LteUeCcmRrcSapProvider__LcsConfig___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__LteUeCcmRrcSapProvider__LcsConfig___gt__ *container;
    std::vector< ns3::LteUeCcmRrcSapProvider::LcsConfig >::iterator *iterator;
} Pystd__vector__lt___ns3__LteUeCcmRrcSapProvider__LcsConfig___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__LteUeCcmRrcSapProvider__LcsConfig___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__LteUeCcmRrcSapProvider__LcsConfig___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__LteUeCcmRrcSapProvider__LcsConfig___gt__(PyObject *arg, std::vector< ns3::LteUeCcmRrcSapProvider::LcsConfig > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::LteUeCphySapUser::UeMeasurementsElement > *obj;
} Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__ *container;
    std::vector< ns3::LteUeCphySapUser::UeMeasurementsElement >::iterator *iterator;
} Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__(PyObject *arg, std::vector< ns3::LteUeCphySapUser::UeMeasurementsElement > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::HigherLayerSelected_s > *obj;
} Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__ *container;
    std::vector< ns3::HigherLayerSelected_s >::iterator *iterator;
} Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__HigherLayerSelected_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__HigherLayerSelected_s___gt__(PyObject *arg, std::vector< ns3::HigherLayerSelected_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::SiMessageListElement_s > *obj;
} Pystd__vector__lt___ns3__SiMessageListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__SiMessageListElement_s___gt__ *container;
    std::vector< ns3::SiMessageListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__SiMessageListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__SiMessageListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__SiMessageListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__SiMessageListElement_s___gt__(PyObject *arg, std::vector< ns3::SiMessageListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::Ptr< ns3::Packet > > *obj;
} Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__ *container;
    std::list< ns3::Ptr< ns3::Packet > >::iterator *iterator;
} Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::Packet > > *container);

typedef struct {
    PyObject_HEAD
    std::map< std::string, unsigned int > *obj;
} Pystd__map__lt___std__string__unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___std__string__unsigned_int___gt__ *container;
    std::map< std::string, unsigned int >::iterator *iterator;
} Pystd__map__lt___std__string__unsigned_int___gt__Iter;


extern PyTypeObject Pystd__map__lt___std__string__unsigned_int___gt___Type;
extern PyTypeObject Pystd__map__lt___std__string__unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___std__string__unsigned_int___gt__(PyObject *arg, std::map< std::string, unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::map< std::string, unsigned long > *obj;
} Pystd__map__lt___std__string__unsigned_long___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___std__string__unsigned_long___gt__ *container;
    std::map< std::string, unsigned long >::iterator *iterator;
} Pystd__map__lt___std__string__unsigned_long___gt__Iter;


extern PyTypeObject Pystd__map__lt___std__string__unsigned_long___gt___Type;
extern PyTypeObject Pystd__map__lt___std__string__unsigned_long___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___std__string__unsigned_long___gt__(PyObject *arg, std::map< std::string, unsigned long > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ipv6Address > *obj;
} Pystd__vector__lt___ns3__Ipv6Address___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ipv6Address___gt__ *container;
    std::vector< ns3::Ipv6Address >::iterator *iterator;
} Pystd__vector__lt___ns3__Ipv6Address___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ipv6Address___gt__(PyObject *arg, std::vector< ns3::Ipv6Address > *container);

typedef struct {
    PyObject_HEAD
    std::vector< double > *obj;
} Pystd__vector__lt___double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___double___gt__ *container;
    std::vector< double >::iterator *iterator;
} Pystd__vector__lt___double___gt__Iter;


extern PyTypeObject Pystd__vector__lt___double___gt___Type;
extern PyTypeObject Pystd__vector__lt___double___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___double___gt__(PyObject *arg, std::vector< double > *container);

typedef struct {
    PyObject_HEAD
    ns3::Bands *obj;
} Pyns3__Bands;


typedef struct {
    PyObject_HEAD
    Pyns3__Bands *container;
    ns3::Bands::iterator *iterator;
} Pyns3__BandsIter;


extern PyTypeObject Pyns3__Bands_Type;
extern PyTypeObject Pyns3__BandsIter_Type;

int _wrap_convert_py2c__ns3__Bands(PyObject *arg, ns3::Bands *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned int, unsigned int > *obj;
} Pystd__map__lt___unsigned_int__unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_int__unsigned_int___gt__ *container;
    std::map< unsigned int, unsigned int >::iterator *iterator;
} Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_int__unsigned_int___gt__(PyObject *arg, std::map< unsigned int, unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, double > *obj;
} Pystd__map__lt___unsigned_char__double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__double___gt__ *container;
    std::map< unsigned char, double >::iterator *iterator;
} Pystd__map__lt___unsigned_char__double___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__double___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__double___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__double___gt__(PyObject *arg, std::map< unsigned char, double > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierEnb > > *obj;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierEnb___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierEnb___gt_____gt__ *container;
    std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierEnb > >::iterator *iterator;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierEnb___gt_____gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierEnb___gt_____gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierEnb___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierEnb___gt_____gt__(PyObject *arg, std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierEnb > > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, ns3::LteEnbRrc::MmWaveComponentCarrierConf > *obj;
} Pystd__map__lt___unsigned_char__ns3__LteEnbRrc__MmWaveComponentCarrierConf___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__ns3__LteEnbRrc__MmWaveComponentCarrierConf___gt__ *container;
    std::map< unsigned char, ns3::LteEnbRrc::MmWaveComponentCarrierConf >::iterator *iterator;
} Pystd__map__lt___unsigned_char__ns3__LteEnbRrc__MmWaveComponentCarrierConf___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__LteEnbRrc__MmWaveComponentCarrierConf___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__LteEnbRrc__MmWaveComponentCarrierConf___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__ns3__LteEnbRrc__MmWaveComponentCarrierConf___gt__(PyObject *arg, std::map< unsigned char, ns3::LteEnbRrc::MmWaveComponentCarrierConf > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned long, ns3::LteEnbRrc::HandoverEventInfo > *obj;
} Pystd__map__lt___unsigned_long__ns3__LteEnbRrc__HandoverEventInfo___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_long__ns3__LteEnbRrc__HandoverEventInfo___gt__ *container;
    std::map< unsigned long, ns3::LteEnbRrc::HandoverEventInfo >::iterator *iterator;
} Pystd__map__lt___unsigned_long__ns3__LteEnbRrc__HandoverEventInfo___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_long__ns3__LteEnbRrc__HandoverEventInfo___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_long__ns3__LteEnbRrc__HandoverEventInfo___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_long__ns3__LteEnbRrc__HandoverEventInfo___gt__(PyObject *arg, std::map< unsigned long, ns3::LteEnbRrc::HandoverEventInfo > *container);

typedef struct {
    PyObject_HEAD
    ns3::HarqProcessInfoList_t *obj;
} Pyns3__HarqProcessInfoList_t;


typedef struct {
    PyObject_HEAD
    Pyns3__HarqProcessInfoList_t *container;
    ns3::HarqProcessInfoList_t::iterator *iterator;
} Pyns3__HarqProcessInfoList_tIter;


extern PyTypeObject Pyns3__HarqProcessInfoList_t_Type;
extern PyTypeObject Pyns3__HarqProcessInfoList_tIter_Type;

int _wrap_convert_py2c__ns3__HarqProcessInfoList_t(PyObject *arg, ns3::HarqProcessInfoList_t *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::Ptr< ns3::LteControlMessage > > *obj;
} Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__ *container;
    std::list< ns3::Ptr< ns3::LteControlMessage > >::iterator *iterator;
} Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::LteControlMessage > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::Packet > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::Packet > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::Packet > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::LteRlcAm::RetxPdu > *obj;
} Pystd__vector__lt___ns3__LteRlcAm__RetxPdu___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__LteRlcAm__RetxPdu___gt__ *container;
    std::vector< ns3::LteRlcAm::RetxPdu >::iterator *iterator;
} Pystd__vector__lt___ns3__LteRlcAm__RetxPdu___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__LteRlcAm__RetxPdu___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__LteRlcAm__RetxPdu___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__LteRlcAm__RetxPdu___gt__(PyObject *arg, std::vector< ns3::LteRlcAm::RetxPdu > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned int, ns3::Ptr< ns3::Packet > > *obj;
} Pystd__map__lt___unsigned_int__ns3__Ptr__lt___ns3__Packet___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_int__ns3__Ptr__lt___ns3__Packet___gt_____gt__ *container;
    std::map< unsigned int, ns3::Ptr< ns3::Packet > >::iterator *iterator;
} Pystd__map__lt___unsigned_int__ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_int__ns3__Ptr__lt___ns3__Packet___gt_____gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_int__ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_int__ns3__Ptr__lt___ns3__Packet___gt_____gt__(PyObject *arg, std::map< unsigned int, ns3::Ptr< ns3::Packet > > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::UlDciLteControlMessage > *obj;
} Pystd__list__lt___ns3__UlDciLteControlMessage___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__UlDciLteControlMessage___gt__ *container;
    std::list< ns3::UlDciLteControlMessage >::iterator *iterator;
} Pystd__list__lt___ns3__UlDciLteControlMessage___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__UlDciLteControlMessage___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__UlDciLteControlMessage___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__UlDciLteControlMessage___gt__(PyObject *arg, std::list< ns3::UlDciLteControlMessage > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Config::MatchContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConfigMatchContainer;


extern PyTypeObject *_PyNs3ConfigMatchContainer_Type;
#define PyNs3ConfigMatchContainer_Type (*_PyNs3ConfigMatchContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3ConfigMatchContainer_wrapper_registry;
#define PyNs3ConfigMatchContainer_wrapper_registry (*_PyNs3ConfigMatchContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::Object > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::Object > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::Object > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< std::string > *obj;
} Pystd__vector__lt___std__string___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___std__string___gt__ *container;
    std::vector< std::string >::iterator *iterator;
} Pystd__vector__lt___std__string___gt__Iter;


extern PyTypeObject Pystd__vector__lt___std__string___gt___Type;
extern PyTypeObject Pystd__vector__lt___std__string___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector< std::string > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Implementation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashImplementation;


extern PyTypeObject *_PyNs3HashImplementation_Type;
#define PyNs3HashImplementation_Type (*_PyNs3HashImplementation_Type)

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Fnv1a *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionFnv1a;


extern PyTypeObject *_PyNs3HashFunctionFnv1a_Type;
#define PyNs3HashFunctionFnv1a_Type (*_PyNs3HashFunctionFnv1a_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash32;


extern PyTypeObject *_PyNs3HashFunctionHash32_Type;
#define PyNs3HashFunctionHash32_Type (*_PyNs3HashFunctionHash32_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash64 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash64;


extern PyTypeObject *_PyNs3HashFunctionHash64_Type;
#define PyNs3HashFunctionHash64_Type (*_PyNs3HashFunctionHash64_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Murmur3 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionMurmur3;


extern PyTypeObject *_PyNs3HashFunctionMurmur3_Type;
#define PyNs3HashFunctionMurmur3_Type (*_PyNs3HashFunctionMurmur3_Type)

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::mmwave::AntennaArrayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveAntennaArrayModel;


extern PyTypeObject PyNs3MmwaveAntennaArrayModel_Type;

class PyNs3MmwaveAntennaArrayModel__PythonHelper : public ns3::mmwave::AntennaArrayModel
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveAntennaArrayModel__PythonHelper(ns3::mmwave::AntennaArrayModel const & arg0)
        : ns3::mmwave::AntennaArrayModel(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveAntennaArrayModel__PythonHelper()
        : ns3::mmwave::AntennaArrayModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveAntennaArrayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3MmwaveAntennaArrayModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3MmwaveAntennaArrayModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveAntennaArrayModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveAntennaArrayModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual double GetGainDb(ns3::Angles a);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveAntennaArrayModel__PythonHelper")
        .SetParent< ns3::mmwave::AntennaArrayModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveAntennaArrayModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::BeamformingParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveBeamformingParams;


extern PyTypeObject PyNs3MmwaveBeamformingParams_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::BuildingsObstaclePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveBuildingsObstaclePropagationLossModel;


extern PyTypeObject PyNs3MmwaveBuildingsObstaclePropagationLossModel_Type;

class PyNs3MmwaveBuildingsObstaclePropagationLossModel__PythonHelper : public ns3::mmwave::BuildingsObstaclePropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveBuildingsObstaclePropagationLossModel__PythonHelper()
        : ns3::mmwave::BuildingsObstaclePropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveBuildingsObstaclePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoAssignStreams(PyNs3MmwaveBuildingsObstaclePropagationLossModel *self, PyObject *args, PyObject *kwargs);
    inline int64_t DoAssignStreams__parent_caller(int64_t stream)
    { return ns3::BuildingsPropagationLossModel::DoAssignStreams(stream); }

    static PyObject * _wrap_DoDispose(PyNs3MmwaveBuildingsObstaclePropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3MmwaveBuildingsObstaclePropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveBuildingsObstaclePropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveBuildingsObstaclePropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual double GetLoss(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual int64_t DoAssignStreams(int64_t stream);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveBuildingsObstaclePropagationLossModel__PythonHelper")
        .SetParent< ns3::mmwave::BuildingsObstaclePropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveBuildingsObstaclePropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::ChannelParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveChannelParams;


extern PyTypeObject PyNs3MmwaveChannelParams_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::CoreNetworkStatsCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveCoreNetworkStatsCalculator;


extern PyTypeObject PyNs3MmwaveCoreNetworkStatsCalculator_Type;

class PyNs3MmwaveCoreNetworkStatsCalculator__PythonHelper : public ns3::mmwave::CoreNetworkStatsCalculator
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveCoreNetworkStatsCalculator__PythonHelper()
        : ns3::mmwave::CoreNetworkStatsCalculator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveCoreNetworkStatsCalculator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveCoreNetworkStatsCalculator *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveCoreNetworkStatsCalculator *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveCoreNetworkStatsCalculator *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveCoreNetworkStatsCalculator__PythonHelper")
        .SetParent< ns3::mmwave::CoreNetworkStatsCalculator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveCoreNetworkStatsCalculator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::DciInfoElement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveDciInfoElement;


extern PyTypeObject PyNs3MmwaveDciInfoElement_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveDciInfoElement_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::DciInfoElementTdma *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveDciInfoElementTdma;


extern PyTypeObject PyNs3MmwaveDciInfoElementTdma_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveDciInfoElementTdma_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::DlCqiInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveDlCqiInfo;


extern PyTypeObject PyNs3MmwaveDlCqiInfo_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveDlCqiInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::DlDciInfoElementTdma *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveDlDciInfoElementTdma;


extern PyTypeObject PyNs3MmwaveDlDciInfoElementTdma_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveDlDciInfoElementTdma_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::DlHarqInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveDlHarqInfo;


extern PyTypeObject PyNs3MmwaveDlHarqInfo_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveDlHarqInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::EnbPhyPacketCountParameter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveEnbPhyPacketCountParameter;


extern PyTypeObject PyNs3MmwaveEnbPhyPacketCountParameter_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveEnbPhyPacketCountParameter_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::ExpectedTbInfo_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveExpectedTbInfo_t;


extern PyTypeObject PyNs3MmwaveExpectedTbInfo_t_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveExpectedTbInfo_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MacCeElement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMacCeElement;


extern PyTypeObject PyNs3MmwaveMacCeElement_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMacCeElement_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MacCeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMacCeValue;


extern PyTypeObject PyNs3MmwaveMacCeValue_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMacCeValue_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MacPduInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMacPduInfo;


extern PyTypeObject PyNs3MmwaveMacPduInfo_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMacPduInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MacSubheader *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMacSubheader;


extern PyTypeObject PyNs3MmwaveMacSubheader_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMacSubheader_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::McStatsCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMcStatsCalculator;


extern PyTypeObject PyNs3MmwaveMcStatsCalculator_Type;

class PyNs3MmwaveMcStatsCalculator__PythonHelper : public ns3::mmwave::McStatsCalculator
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMcStatsCalculator__PythonHelper()
        : ns3::mmwave::McStatsCalculator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMcStatsCalculator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMcStatsCalculator *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMcStatsCalculator *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMcStatsCalculator *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMcStatsCalculator__PythonHelper")
        .SetParent< ns3::mmwave::McStatsCalculator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMcStatsCalculator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::McUeNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMcUeNetDevice;


extern PyTypeObject PyNs3MmwaveMcUeNetDevice_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWave3gppBuildingsPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel;


extern PyTypeObject PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel_Type;

class PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel__PythonHelper : public ns3::mmwave::MmWave3gppBuildingsPropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel__PythonHelper()
        : ns3::mmwave::MmWave3gppBuildingsPropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoAssignStreams(PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel *self, PyObject *args, PyObject *kwargs);
    inline int64_t DoAssignStreams__parent_caller(int64_t stream)
    { return ns3::BuildingsPropagationLossModel::DoAssignStreams(stream); }

    static PyObject * _wrap_DoDispose(PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual double GetLoss(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual int64_t DoAssignStreams(int64_t stream);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel__PythonHelper")
        .SetParent< ns3::mmwave::MmWave3gppBuildingsPropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWave3gppBuildingsPropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWave3gppChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWave3gppChannel;


extern PyTypeObject PyNs3MmwaveMmWave3gppChannel_Type;

class PyNs3MmwaveMmWave3gppChannel__PythonHelper : public ns3::mmwave::MmWave3gppChannel
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWave3gppChannel__PythonHelper(ns3::mmwave::MmWave3gppChannel const & arg0)
        : ns3::mmwave::MmWave3gppChannel(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWave3gppChannel__PythonHelper()
        : ns3::mmwave::MmWave3gppChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWave3gppChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWave3gppChannel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWave3gppChannel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWave3gppChannel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::Ptr< ns3::SpectrumValue > DoCalcRxPowerSpectralDensity(ns3::Ptr< ns3::SpectrumValue const > txPsd, ns3::Ptr< ns3::MobilityModel const > a, ns3::Ptr< ns3::MobilityModel const > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWave3gppChannel__PythonHelper")
        .SetParent< ns3::mmwave::MmWave3gppChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWave3gppChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWave3gppPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWave3gppPropagationLossModel;


extern PyTypeObject PyNs3MmwaveMmWave3gppPropagationLossModel_Type;

class PyNs3MmwaveMmWave3gppPropagationLossModel__PythonHelper : public ns3::mmwave::MmWave3gppPropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWave3gppPropagationLossModel__PythonHelper()
        : ns3::mmwave::MmWave3gppPropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWave3gppPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3MmwaveMmWave3gppPropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWave3gppPropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWave3gppPropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWave3gppPropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual int64_t DoAssignStreams(int64_t stream);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWave3gppPropagationLossModel__PythonHelper")
        .SetParent< ns3::mmwave::MmWave3gppPropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWave3gppPropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveAmc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveAmc;


extern PyTypeObject PyNs3MmwaveMmWaveAmc_Type;
extern PyTypeObject PyNs3MmwaveMmWaveAmcMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveBeamforming *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveBeamforming;


extern PyTypeObject PyNs3MmwaveMmWaveBeamforming_Type;

class PyNs3MmwaveMmWaveBeamforming__PythonHelper : public ns3::mmwave::MmWaveBeamforming
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveBeamforming__PythonHelper(ns3::mmwave::MmWaveBeamforming const & arg0)
        : ns3::mmwave::MmWaveBeamforming(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveBeamforming__PythonHelper(uint32_t enbAntenna, uint32_t ueAntenna)
        : ns3::mmwave::MmWaveBeamforming(enbAntenna, ueAntenna), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveBeamforming__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveBeamforming *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveBeamforming *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveBeamforming *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::Ptr< ns3::SpectrumValue > DoCalcRxPowerSpectralDensity(ns3::Ptr< ns3::SpectrumValue const > txPsd, ns3::Ptr< ns3::MobilityModel const > a, ns3::Ptr< ns3::MobilityModel const > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveBeamforming__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveBeamforming > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveBeamforming__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveBearerStatsCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveBearerStatsCalculator;


extern PyTypeObject PyNs3MmwaveMmWaveBearerStatsCalculator_Type;

class PyNs3MmwaveMmWaveBearerStatsCalculator__PythonHelper : public ns3::mmwave::MmWaveBearerStatsCalculator
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveBearerStatsCalculator__PythonHelper()
        : ns3::mmwave::MmWaveBearerStatsCalculator(), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveBearerStatsCalculator__PythonHelper(std::string protocolType)
        : ns3::mmwave::MmWaveBearerStatsCalculator(protocolType), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveBearerStatsCalculator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveBearerStatsCalculator *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveBearerStatsCalculator *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveBearerStatsCalculator *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveBearerStatsCalculator__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveBearerStatsCalculator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveBearerStatsCalculator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveBearerStatsConnector *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveBearerStatsConnector;


extern PyTypeObject PyNs3MmwaveMmWaveBearerStatsConnector_Type;

class PyNs3MmwaveMmWaveBearerStatsConnector__PythonHelper : public ns3::mmwave::MmWaveBearerStatsConnector
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveBearerStatsConnector__PythonHelper()
        : ns3::mmwave::MmWaveBearerStatsConnector(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveBearerStatsConnector__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveBearerStatsConnector *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveBearerStatsConnector *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveBearerStatsConnector *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveBearerStatsConnector__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveBearerStatsConnector > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveBearerStatsConnector__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveChannelMatrix *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveChannelMatrix;


extern PyTypeObject PyNs3MmwaveMmWaveChannelMatrix_Type;

class PyNs3MmwaveMmWaveChannelMatrix__PythonHelper : public ns3::mmwave::MmWaveChannelMatrix
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveChannelMatrix__PythonHelper(ns3::mmwave::MmWaveChannelMatrix const & arg0)
        : ns3::mmwave::MmWaveChannelMatrix(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveChannelMatrix__PythonHelper()
        : ns3::mmwave::MmWaveChannelMatrix(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveChannelMatrix__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveChannelMatrix *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveChannelMatrix *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveChannelMatrix *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::Ptr< ns3::SpectrumValue > DoCalcRxPowerSpectralDensity(ns3::Ptr< ns3::SpectrumValue const > txPsd, ns3::Ptr< ns3::MobilityModel const > a, ns3::Ptr< ns3::MobilityModel const > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveChannelMatrix__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveChannelMatrix > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveChannelMatrix__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveChannelRaytracing *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveChannelRaytracing;


extern PyTypeObject PyNs3MmwaveMmWaveChannelRaytracing_Type;

class PyNs3MmwaveMmWaveChannelRaytracing__PythonHelper : public ns3::mmwave::MmWaveChannelRaytracing
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveChannelRaytracing__PythonHelper(ns3::mmwave::MmWaveChannelRaytracing const & arg0)
        : ns3::mmwave::MmWaveChannelRaytracing(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveChannelRaytracing__PythonHelper()
        : ns3::mmwave::MmWaveChannelRaytracing(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveChannelRaytracing__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveChannelRaytracing *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveChannelRaytracing *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveChannelRaytracing *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::Ptr< ns3::SpectrumValue > DoCalcRxPowerSpectralDensity(ns3::Ptr< ns3::SpectrumValue const > txPsd, ns3::Ptr< ns3::MobilityModel const > a, ns3::Ptr< ns3::MobilityModel const > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveChannelRaytracing__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveChannelRaytracing > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveChannelRaytracing__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveComponentCarrier *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveComponentCarrier;


extern PyTypeObject PyNs3MmwaveMmWaveComponentCarrier_Type;

class PyNs3MmwaveMmWaveComponentCarrier__PythonHelper : public ns3::mmwave::MmWaveComponentCarrier
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveComponentCarrier__PythonHelper(ns3::mmwave::MmWaveComponentCarrier const & arg0)
        : ns3::mmwave::MmWaveComponentCarrier(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveComponentCarrier__PythonHelper()
        : ns3::mmwave::MmWaveComponentCarrier(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveComponentCarrier__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveComponentCarrier *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::mmwave::MmWaveComponentCarrier::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveComponentCarrier *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveComponentCarrier *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveComponentCarrier__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveComponentCarrier > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveComponentCarrier__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveComponentCarrierEnb *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveComponentCarrierEnb;


extern PyTypeObject PyNs3MmwaveMmWaveComponentCarrierEnb_Type;

class PyNs3MmwaveMmWaveComponentCarrierEnb__PythonHelper : public ns3::mmwave::MmWaveComponentCarrierEnb
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveComponentCarrierEnb__PythonHelper(ns3::mmwave::MmWaveComponentCarrierEnb const & arg0)
        : ns3::mmwave::MmWaveComponentCarrierEnb(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveComponentCarrierEnb__PythonHelper()
        : ns3::mmwave::MmWaveComponentCarrierEnb(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveComponentCarrierEnb__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveComponentCarrierEnb *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::mmwave::MmWaveComponentCarrierEnb::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveComponentCarrierEnb *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveComponentCarrierEnb *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveComponentCarrierEnb__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveComponentCarrierEnb > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveComponentCarrierEnb__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveComponentCarrierUe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveComponentCarrierUe;


extern PyTypeObject PyNs3MmwaveMmWaveComponentCarrierUe_Type;

class PyNs3MmwaveMmWaveComponentCarrierUe__PythonHelper : public ns3::mmwave::MmWaveComponentCarrierUe
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveComponentCarrierUe__PythonHelper(ns3::mmwave::MmWaveComponentCarrierUe const & arg0)
        : ns3::mmwave::MmWaveComponentCarrierUe(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveComponentCarrierUe__PythonHelper()
        : ns3::mmwave::MmWaveComponentCarrierUe(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveComponentCarrierUe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveComponentCarrierUe *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::mmwave::MmWaveComponentCarrierUe::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveComponentCarrierUe *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveComponentCarrierUe *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveComponentCarrierUe__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveComponentCarrierUe > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveComponentCarrierUe__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveControlMessage;


extern PyTypeObject PyNs3MmwaveMmWaveControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveDciMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveDciMessage;


extern PyTypeObject PyNs3MmwaveMmWaveDciMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveDlCqiMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveDlCqiMessage;


extern PyTypeObject PyNs3MmwaveMmWaveDlCqiMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveDlHarqFeedbackMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveDlHarqFeedbackMessage;


extern PyTypeObject PyNs3MmwaveMmWaveDlHarqFeedbackMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveDlHarqProcessInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveDlHarqProcessInfo;


extern PyTypeObject PyNs3MmwaveMmWaveDlHarqProcessInfo_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveDlHarqProcessInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveEnbMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveEnbMac;


extern PyTypeObject PyNs3MmwaveMmWaveEnbMac_Type;

class PyNs3MmwaveMmWaveEnbMac__PythonHelper : public ns3::mmwave::MmWaveEnbMac
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveEnbMac__PythonHelper(ns3::mmwave::MmWaveEnbMac const & arg0)
        : ns3::mmwave::MmWaveEnbMac(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveEnbMac__PythonHelper()
        : ns3::mmwave::MmWaveEnbMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveEnbMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveEnbMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveEnbMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveEnbMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveEnbMac__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveEnbMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveEnbMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveEnbMac::ReportBufferStatusParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveEnbMacReportBufferStatusParameters;


extern PyTypeObject PyNs3MmwaveMmWaveEnbMacReportBufferStatusParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveEnbMacReportBufferStatusParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveEnbMac::TransmitPduParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveEnbMacTransmitPduParameters;


extern PyTypeObject PyNs3MmwaveMmWaveEnbMacTransmitPduParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveEnbMacTransmitPduParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveEnbPhySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveEnbPhySapUser;


extern PyTypeObject PyNs3MmwaveMmWaveEnbPhySapUser_Type;

class PyNs3MmwaveMmWaveEnbPhySapUser__PythonHelper : public ns3::mmwave::MmWaveEnbPhySapUser
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveEnbPhySapUser__PythonHelper()
        : ns3::mmwave::MmWaveEnbPhySapUser(), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveEnbPhySapUser__PythonHelper(ns3::mmwave::MmWaveEnbPhySapUser const & arg0)
        : ns3::mmwave::MmWaveEnbPhySapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveEnbPhySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void ReceiveControlMessage(ns3::Ptr< ns3::mmwave::MmWaveControlMessage > msg);

    virtual void ReceivePhyPdu(ns3::Ptr< ns3::Packet > p);

    virtual void ReceiveRachPreamble(uint32_t raId);

    virtual void SubframeIndication(ns3::mmwave::SfnSf arg0);

    virtual void UlCqiReport(ns3::mmwave::MmWaveMacSchedSapProvider::SchedUlCqiInfoReqParameters ulcqi);

    virtual void UlHarqFeedback(ns3::mmwave::UlHarqInfo params);
};

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveEnbPhySapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveEnbRrcProtocolIdeal *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveEnbRrcProtocolIdeal;


extern PyTypeObject PyNs3MmwaveMmWaveEnbRrcProtocolIdeal_Type;

class PyNs3MmwaveMmWaveEnbRrcProtocolIdeal__PythonHelper : public ns3::mmwave::MmWaveEnbRrcProtocolIdeal
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveEnbRrcProtocolIdeal__PythonHelper(ns3::mmwave::MmWaveEnbRrcProtocolIdeal const & arg0)
        : ns3::mmwave::MmWaveEnbRrcProtocolIdeal(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveEnbRrcProtocolIdeal__PythonHelper()
        : ns3::mmwave::MmWaveEnbRrcProtocolIdeal(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveEnbRrcProtocolIdeal__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveEnbRrcProtocolIdeal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveEnbRrcProtocolIdeal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveEnbRrcProtocolIdeal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveEnbRrcProtocolIdeal__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveEnbRrcProtocolIdeal > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveEnbRrcProtocolIdeal__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveHarqPhy *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveHarqPhy;


extern PyTypeObject PyNs3MmwaveMmWaveHarqPhy_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveHarqProcessInfoElement_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveHarqProcessInfoElement_t;


extern PyTypeObject PyNs3MmwaveMmWaveHarqProcessInfoElement_t_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveHarqProcessInfoElement_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveHelper;


extern PyTypeObject PyNs3MmwaveMmWaveHelper_Type;

class PyNs3MmwaveMmWaveHelper__PythonHelper : public ns3::mmwave::MmWaveHelper
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveHelper__PythonHelper(ns3::mmwave::MmWaveHelper const & arg0)
        : ns3::mmwave::MmWaveHelper(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveHelper__PythonHelper()
        : ns3::mmwave::MmWaveHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveHelper *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::mmwave::MmWaveHelper::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveHelper *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveHelper *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveHelper__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveHelper > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveHelper__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveLosTracker *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveLosTracker;


extern PyTypeObject PyNs3MmwaveMmWaveLosTracker_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveLteEnbRrcProtocolReal *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveLteEnbRrcProtocolReal;


extern PyTypeObject PyNs3MmwaveMmWaveLteEnbRrcProtocolReal_Type;

class PyNs3MmwaveMmWaveLteEnbRrcProtocolReal__PythonHelper : public ns3::mmwave::MmWaveLteEnbRrcProtocolReal
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveLteEnbRrcProtocolReal__PythonHelper(ns3::mmwave::MmWaveLteEnbRrcProtocolReal const & arg0)
        : ns3::mmwave::MmWaveLteEnbRrcProtocolReal(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveLteEnbRrcProtocolReal__PythonHelper()
        : ns3::mmwave::MmWaveLteEnbRrcProtocolReal(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveLteEnbRrcProtocolReal__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveLteEnbRrcProtocolReal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveLteEnbRrcProtocolReal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveLteEnbRrcProtocolReal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveLteEnbRrcProtocolReal__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveLteEnbRrcProtocolReal > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveLteEnbRrcProtocolReal__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveLteUeRrcProtocolReal *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveLteUeRrcProtocolReal;


extern PyTypeObject PyNs3MmwaveMmWaveLteUeRrcProtocolReal_Type;

class PyNs3MmwaveMmWaveLteUeRrcProtocolReal__PythonHelper : public ns3::mmwave::MmWaveLteUeRrcProtocolReal
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveLteUeRrcProtocolReal__PythonHelper(ns3::mmwave::MmWaveLteUeRrcProtocolReal const & arg0)
        : ns3::mmwave::MmWaveLteUeRrcProtocolReal(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveLteUeRrcProtocolReal__PythonHelper()
        : ns3::mmwave::MmWaveLteUeRrcProtocolReal(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveLteUeRrcProtocolReal__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveLteUeRrcProtocolReal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveLteUeRrcProtocolReal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveLteUeRrcProtocolReal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveLteUeRrcProtocolReal__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveLteUeRrcProtocolReal > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveLteUeRrcProtocolReal__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMac;


extern PyTypeObject PyNs3MmwaveMmWaveMac_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapProvider;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapProvider_Type;

class PyNs3MmwaveMmWaveMacCschedSapProvider__PythonHelper : public ns3::mmwave::MmWaveMacCschedSapProvider
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveMacCschedSapProvider__PythonHelper()
        : ns3::mmwave::MmWaveMacCschedSapProvider(), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveMacCschedSapProvider__PythonHelper(ns3::mmwave::MmWaveMacCschedSapProvider const & arg0)
        : ns3::mmwave::MmWaveMacCschedSapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveMacCschedSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void CschedCellConfigReq(ns3::mmwave::MmWaveMacCschedSapProvider::CschedCellConfigReqParameters const & params);

    virtual void CschedLcConfigReq(ns3::mmwave::MmWaveMacCschedSapProvider::CschedLcConfigReqParameters const & params);

    virtual void CschedLcReleaseReq(ns3::mmwave::MmWaveMacCschedSapProvider::CschedLcReleaseReqParameters const & params);

    virtual void CschedUeConfigReq(ns3::mmwave::MmWaveMacCschedSapProvider::CschedUeConfigReqParameters const & params);

    virtual void CschedUeReleaseReq(ns3::mmwave::MmWaveMacCschedSapProvider::CschedUeReleaseReqParameters const & params);
};

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapProvider::CschedCellConfigReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapProviderCschedCellConfigReqParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapProviderCschedCellConfigReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapProviderCschedCellConfigReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapProvider::CschedLcConfigReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapProviderCschedLcConfigReqParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapProviderCschedLcConfigReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapProviderCschedLcConfigReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapProvider::CschedLcReleaseReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapProviderCschedLcReleaseReqParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapProviderCschedLcReleaseReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapProviderCschedLcReleaseReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapProvider::CschedUeConfigReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapProviderCschedUeConfigReqParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapProviderCschedUeConfigReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapProviderCschedUeConfigReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapProvider::CschedUeReleaseReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapProviderCschedUeReleaseReqParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapProviderCschedUeReleaseReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapProviderCschedUeReleaseReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapUser;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapUser_Type;

class PyNs3MmwaveMmWaveMacCschedSapUser__PythonHelper : public ns3::mmwave::MmWaveMacCschedSapUser
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveMacCschedSapUser__PythonHelper()
        : ns3::mmwave::MmWaveMacCschedSapUser(), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveMacCschedSapUser__PythonHelper(ns3::mmwave::MmWaveMacCschedSapUser const & arg0)
        : ns3::mmwave::MmWaveMacCschedSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveMacCschedSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void CschedCellConfigCnf(ns3::mmwave::MmWaveMacCschedSapUser::CschedCellConfigCnfParameters const & params);

    virtual void CschedCellConfigUpdateInd(ns3::mmwave::MmWaveMacCschedSapUser::CschedCellConfigUpdateIndParameters const & params);

    virtual void CschedLcConfigCnf(ns3::mmwave::MmWaveMacCschedSapUser::CschedLcConfigCnfParameters const & params);

    virtual void CschedLcReleaseCnf(ns3::mmwave::MmWaveMacCschedSapUser::CschedLcReleaseCnfParameters const & params);

    virtual void CschedUeConfigCnf(ns3::mmwave::MmWaveMacCschedSapUser::CschedUeConfigCnfParameters const & params);

    virtual void CschedUeConfigUpdateInd(ns3::mmwave::MmWaveMacCschedSapUser::CschedUeConfigUpdateIndParameters const & params);

    virtual void CschedUeReleaseCnf(ns3::mmwave::MmWaveMacCschedSapUser::CschedUeReleaseCnfParameters const & params);
};

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapUser::CschedCellConfigCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapUserCschedCellConfigCnfParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapUserCschedCellConfigCnfParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapUserCschedCellConfigCnfParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapUser::CschedCellConfigUpdateIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapUserCschedCellConfigUpdateIndParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapUserCschedCellConfigUpdateIndParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapUserCschedCellConfigUpdateIndParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapUser::CschedLcConfigCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapUserCschedLcConfigCnfParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapUserCschedLcConfigCnfParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapUserCschedLcConfigCnfParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapUser::CschedLcReleaseCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapUserCschedLcReleaseCnfParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapUserCschedLcReleaseCnfParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapUserCschedLcReleaseCnfParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapUser::CschedUeConfigCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapUserCschedUeConfigCnfParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapUserCschedUeConfigCnfParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapUserCschedUeConfigCnfParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapUser::CschedUeConfigUpdateIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapUserCschedUeConfigUpdateIndParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapUserCschedUeConfigUpdateIndParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapUserCschedUeConfigUpdateIndParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacCschedSapUser::CschedUeReleaseCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacCschedSapUserCschedUeReleaseCnfParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacCschedSapUserCschedUeReleaseCnfParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacCschedSapUserCschedUeReleaseCnfParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacPduHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacPduHeader;


extern PyTypeObject PyNs3MmwaveMmWaveMacPduHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacPduTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacPduTag;


extern PyTypeObject PyNs3MmwaveMmWaveMacPduTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacSchedSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacSchedSapProvider;


extern PyTypeObject PyNs3MmwaveMmWaveMacSchedSapProvider_Type;

class PyNs3MmwaveMmWaveMacSchedSapProvider__PythonHelper : public ns3::mmwave::MmWaveMacSchedSapProvider
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveMacSchedSapProvider__PythonHelper()
        : ns3::mmwave::MmWaveMacSchedSapProvider(), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveMacSchedSapProvider__PythonHelper(ns3::mmwave::MmWaveMacSchedSapProvider const & arg0)
        : ns3::mmwave::MmWaveMacSchedSapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveMacSchedSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void SchedDlCqiInfoReq(ns3::mmwave::MmWaveMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params);

    virtual void SchedDlRlcBufferReq(ns3::mmwave::MmWaveMacSchedSapProvider::SchedDlRlcBufferReqParameters const & params);

    virtual void SchedSetMcs(int mcs);

    virtual void SchedTriggerReq(ns3::mmwave::MmWaveMacSchedSapProvider::SchedTriggerReqParameters const & params);

    virtual void SchedUlCqiInfoReq(ns3::mmwave::MmWaveMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params);

    virtual void SchedUlMacCtrlInfoReq(ns3::mmwave::MmWaveMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters const & params);
};

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacSchedSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacSchedSapProvider::SchedDlCqiInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacSchedSapProviderSchedDlCqiInfoReqParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacSchedSapProviderSchedDlCqiInfoReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacSchedSapProviderSchedDlCqiInfoReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacSchedSapProvider::SchedDlRlcBufferReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacSchedSapProviderSchedDlRlcBufferReqParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacSchedSapProviderSchedDlRlcBufferReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacSchedSapProviderSchedDlRlcBufferReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacSchedSapProvider::SchedTriggerReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacSchedSapProviderSchedTriggerReqParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacSchedSapProviderSchedTriggerReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacSchedSapProviderSchedTriggerReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacSchedSapProvider::SchedUlCqiInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacSchedSapProviderSchedUlCqiInfoReqParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacSchedSapProviderSchedUlCqiInfoReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacSchedSapProviderSchedUlCqiInfoReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacSchedSapProviderSchedUlMacCtrlInfoReqParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacSchedSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacSchedSapUser;


extern PyTypeObject PyNs3MmwaveMmWaveMacSchedSapUser_Type;

class PyNs3MmwaveMmWaveMacSchedSapUser__PythonHelper : public ns3::mmwave::MmWaveMacSchedSapUser
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveMacSchedSapUser__PythonHelper()
        : ns3::mmwave::MmWaveMacSchedSapUser(), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveMacSchedSapUser__PythonHelper(ns3::mmwave::MmWaveMacSchedSapUser const & arg0)
        : ns3::mmwave::MmWaveMacSchedSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveMacSchedSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void SchedConfigInd(ns3::mmwave::MmWaveMacSchedSapUser::SchedConfigIndParameters const & params);
};

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacSchedSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacSchedSapUser::SchedConfigIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacSchedSapUserSchedConfigIndParameters;


extern PyTypeObject PyNs3MmwaveMmWaveMacSchedSapUserSchedConfigIndParameters_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMacSchedSapUserSchedConfigIndParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMacScheduler;


extern PyTypeObject PyNs3MmwaveMmWaveMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMiErrorModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMiErrorModel;


extern PyTypeObject PyNs3MmwaveMmWaveMiErrorModel_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveMiErrorModel_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveMibMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveMibMessage;


extern PyTypeObject PyNs3MmwaveMmWaveMibMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveNetDevice;


extern PyTypeObject PyNs3MmwaveMmWaveNetDevice_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveNoOpComponentCarrierManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveNoOpComponentCarrierManager;


extern PyTypeObject PyNs3MmwaveMmWaveNoOpComponentCarrierManager_Type;

class PyNs3MmwaveMmWaveNoOpComponentCarrierManager__PythonHelper : public ns3::mmwave::MmWaveNoOpComponentCarrierManager
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveNoOpComponentCarrierManager__PythonHelper(ns3::mmwave::MmWaveNoOpComponentCarrierManager const & arg0)
        : ns3::mmwave::MmWaveNoOpComponentCarrierManager(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveNoOpComponentCarrierManager__PythonHelper()
        : ns3::mmwave::MmWaveNoOpComponentCarrierManager(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveNoOpComponentCarrierManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoAddUe(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoAddUe__parent_caller(uint16_t rnti, uint8_t state)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoAddUe(rnti, state); }

    static PyObject * _wrap_DoDispose(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoInitialize(); }

    static PyObject * _wrap_DoNotifyHarqDeliveryFailure(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoNotifyHarqDeliveryFailure__parent_caller()
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoNotifyHarqDeliveryFailure(); }

    static PyObject * _wrap_DoNotifyPrbOccupancy(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoNotifyPrbOccupancy__parent_caller(double prbOccupancy, uint8_t componentCarrierId)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoNotifyPrbOccupancy(prbOccupancy, componentCarrierId); }

    static PyObject * _wrap_DoNotifyTxOpportunity(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoNotifyTxOpportunity__parent_caller(ns3::LteMacSapUser::TxOpportunityParameters txOpParams)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoNotifyTxOpportunity(txOpParams); }

    static PyObject * _wrap_DoReceivePdu(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoReceivePdu__parent_caller(ns3::LteMacSapUser::ReceivePduParameters rxPduParams)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoReceivePdu(rxPduParams); }

    static PyObject * _wrap_DoReleaseDataRadioBearer(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline std::vector< unsigned char > DoReleaseDataRadioBearer__parent_caller(uint16_t rnti, uint8_t lcid)
    { return ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoReleaseDataRadioBearer(rnti, lcid); }

    static PyObject * _wrap_DoRemoveUe(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoRemoveUe__parent_caller(uint16_t rnti)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoRemoveUe(rnti); }

    static PyObject * _wrap_DoReportBufferStatus(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoReportBufferStatus__parent_caller(ns3::LteMacSapProvider::ReportBufferStatusParameters params)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoReportBufferStatus(params); }

    static PyObject * _wrap_DoReportUeMeas(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoReportUeMeas__parent_caller(uint16_t rnti, ns3::LteRrcSap::MeasResults measResults)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoReportUeMeas(rnti, measResults); }

    static PyObject * _wrap_DoTransmitPdu(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoTransmitPdu__parent_caller(ns3::LteMacSapProvider::TransmitPduParameters params)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoTransmitPdu(params); }

    static PyObject * _wrap_DoUlReceiveMacCe(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoUlReceiveMacCe__parent_caller(ns3::MacCeListElement_s bsr, uint8_t componentCarrierId)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoUlReceiveMacCe(bsr, componentCarrierId); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveNoOpComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoAddUe(uint16_t rnti, uint8_t state);

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void DoNotifyHarqDeliveryFailure();

    virtual void DoNotifyPrbOccupancy(double prbOccupancy, uint8_t componentCarrierId);

    virtual void DoNotifyTxOpportunity(ns3::LteMacSapUser::TxOpportunityParameters txOpParams);

    virtual void DoReceivePdu(ns3::LteMacSapUser::ReceivePduParameters rxPduParams);

    virtual std::vector< unsigned char > DoReleaseDataRadioBearer(uint16_t rnti, uint8_t lcid);

    virtual void DoRemoveUe(uint16_t rnti);

    virtual void DoReportBufferStatus(ns3::LteMacSapProvider::ReportBufferStatusParameters params);

    virtual void DoReportUeMeas(uint16_t rnti, ns3::LteRrcSap::MeasResults measResults);

    virtual void DoTransmitPdu(ns3::LteMacSapProvider::TransmitPduParameters params);

    virtual void DoUlReceiveMacCe(ns3::MacCeListElement_s bsr, uint8_t componentCarrierId);

    virtual ns3::LteCcmMacSapUser * GetLteCcmMacSapUser();

    virtual ns3::LteCcmRrcSapProvider * GetLteCcmRrcSapProvider();

    virtual ns3::LteMacSapProvider * GetLteMacSapProvider();

    virtual void SetBandwidthMap(std::map< unsigned char, double > bandwidthMap);

    virtual void SetNumberOfComponentCarriers(uint16_t noOfComponentCarriers);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveNoOpComponentCarrierManager__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveNoOpComponentCarrierManager > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveNoOpComponentCarrierManager__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWavePhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWavePhy;


extern PyTypeObject PyNs3MmwaveMmWavePhy_Type;

class PyNs3MmwaveMmWavePhy__PythonHelper : public ns3::mmwave::MmWavePhy
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWavePhy__PythonHelper(ns3::mmwave::MmWavePhy const & arg0)
        : ns3::mmwave::MmWavePhy(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWavePhy__PythonHelper()
        : ns3::mmwave::MmWavePhy(), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWavePhy__PythonHelper(ns3::Ptr< ns3::mmwave::MmWaveSpectrumPhy > dlChannelPhy, ns3::Ptr< ns3::mmwave::MmWaveSpectrumPhy > ulChannelPhy)
        : ns3::mmwave::MmWavePhy(dlChannelPhy, ulChannelPhy), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWavePhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWavePhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWavePhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity();

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::Ptr< ns3::PacketBurst > GetPacketBurst(ns3::mmwave::SfnSf arg0);

    virtual void SendRachPreamble(uint32_t PreambleId, uint32_t Rnti);

    virtual void SetMacPdu(ns3::Ptr< ns3::Packet > pb);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWavePhy__PythonHelper")
        .SetParent< ns3::mmwave::MmWavePhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWavePhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWavePhyMacCommon *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWavePhyMacCommon;


extern PyTypeObject PyNs3MmwaveMmWavePhyMacCommon_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWavePhyRxTrace *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWavePhyRxTrace;


extern PyTypeObject PyNs3MmwaveMmWavePhyRxTrace_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWavePhySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWavePhySapProvider;


extern PyTypeObject PyNs3MmwaveMmWavePhySapProvider_Type;

class PyNs3MmwaveMmWavePhySapProvider__PythonHelper : public ns3::mmwave::MmWavePhySapProvider
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWavePhySapProvider__PythonHelper()
        : ns3::mmwave::MmWavePhySapProvider(), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWavePhySapProvider__PythonHelper(ns3::mmwave::MmWavePhySapProvider const & arg0)
        : ns3::mmwave::MmWavePhySapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWavePhySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void SendControlMessage(ns3::Ptr< ns3::mmwave::MmWaveControlMessage > msg);

    virtual void SendMacPdu(ns3::Ptr< ns3::Packet > p);

    virtual void SendRachPreamble(uint8_t PreambleId, uint8_t Rnti);

    virtual void SetDlSfAllocInfo(ns3::mmwave::SfAllocInfo sfAllocInfo);

    virtual void SetUlSfAllocInfo(ns3::mmwave::SfAllocInfo sfAllocInfo);
};

extern std::map<void*, PyObject*> PyNs3MmwaveMmWavePhySapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWavePointToPointEpcHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWavePointToPointEpcHelper;


extern PyTypeObject PyNs3MmwaveMmWavePointToPointEpcHelper_Type;

class PyNs3MmwaveMmWavePointToPointEpcHelper__PythonHelper : public ns3::mmwave::MmWavePointToPointEpcHelper
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWavePointToPointEpcHelper__PythonHelper()
        : ns3::mmwave::MmWavePointToPointEpcHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWavePointToPointEpcHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWavePointToPointEpcHelper *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWavePointToPointEpcHelper *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWavePointToPointEpcHelper *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual void AddEnb(ns3::Ptr< ns3::Node > enbNode, ns3::Ptr< ns3::NetDevice > lteEnbNetDevice, uint16_t cellId);

    virtual void AddUe(ns3::Ptr< ns3::NetDevice > ueLteDevice, uint64_t imsi);

    virtual void AddX2Interface(ns3::Ptr< ns3::Node > enbNode1, ns3::Ptr< ns3::Node > enbNode2);

    virtual uint8_t ActivateEpsBearer(ns3::Ptr< ns3::NetDevice > ueLteDevice, uint64_t imsi, ns3::Ptr< ns3::EpcTft > tft, ns3::EpsBearer bearer);

    virtual uint8_t ActivateEpsBearer(ns3::Ptr< ns3::NetDevice > ueLteDevice, ns3::Ptr< ns3::EpcUeNas > ueNas, uint64_t imsi, ns3::Ptr< ns3::EpcTft > tft, ns3::EpsBearer bearer);

    virtual ns3::Ptr< ns3::Node > GetPgwNode();

    virtual ns3::Ptr< ns3::Node > GetMmeNode();

    virtual ns3::Ipv4InterfaceContainer AssignUeIpv4Address(ns3::NetDeviceContainer ueDevices);

    virtual ns3::Ipv6InterfaceContainer AssignUeIpv6Address(ns3::NetDeviceContainer ueDevices);

    virtual ns3::Ipv4Address GetUeDefaultGatewayAddress();

    virtual ns3::Ipv6Address GetUeDefaultGatewayAddress6();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWavePointToPointEpcHelper__PythonHelper")
        .SetParent< ns3::mmwave::MmWavePointToPointEpcHelper > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWavePointToPointEpcHelper__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWavePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWavePropagationLossModel;


extern PyTypeObject PyNs3MmwaveMmWavePropagationLossModel_Type;

class PyNs3MmwaveMmWavePropagationLossModel__PythonHelper : public ns3::mmwave::MmWavePropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWavePropagationLossModel__PythonHelper()
        : ns3::mmwave::MmWavePropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWavePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoDispose(PyNs3MmwaveMmWavePropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWavePropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWavePropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWavePropagationLossModel *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual int64_t DoAssignStreams(int64_t stream);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWavePropagationLossModel__PythonHelper")
        .SetParent< ns3::mmwave::MmWavePropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWavePropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveRachPreambleMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveRachPreambleMessage;


extern PyTypeObject PyNs3MmwaveMmWaveRachPreambleMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveRadioBearerTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveRadioBearerTag;


extern PyTypeObject PyNs3MmwaveMmWaveRadioBearerTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveRarMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveRarMessage;


extern PyTypeObject PyNs3MmwaveMmWaveRarMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveRarMessage::Rar *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveRarMessageRar;


extern PyTypeObject PyNs3MmwaveMmWaveRarMessageRar_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveRarMessageRar_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveRealProtocolRlcSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveRealProtocolRlcSapUser;


extern PyTypeObject PyNs3MmwaveMmWaveRealProtocolRlcSapUser_Type;

class PyNs3MmwaveMmWaveRealProtocolRlcSapUser__PythonHelper : public ns3::mmwave::MmWaveRealProtocolRlcSapUser
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveRealProtocolRlcSapUser__PythonHelper(ns3::mmwave::MmWaveRealProtocolRlcSapUser const & arg0)
        : ns3::mmwave::MmWaveRealProtocolRlcSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveRealProtocolRlcSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void ReceivePdcpPdu(ns3::Ptr< ns3::Packet > p);
};


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveRrComponentCarrierManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveRrComponentCarrierManager;


extern PyTypeObject PyNs3MmwaveMmWaveRrComponentCarrierManager_Type;

class PyNs3MmwaveMmWaveRrComponentCarrierManager__PythonHelper : public ns3::mmwave::MmWaveRrComponentCarrierManager
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveRrComponentCarrierManager__PythonHelper(ns3::mmwave::MmWaveRrComponentCarrierManager const & arg0)
        : ns3::mmwave::MmWaveRrComponentCarrierManager(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveRrComponentCarrierManager__PythonHelper()
        : ns3::mmwave::MmWaveRrComponentCarrierManager(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveRrComponentCarrierManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoReportBufferStatus(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoReportBufferStatus__parent_caller(ns3::LteMacSapProvider::ReportBufferStatusParameters params)
    { ns3::mmwave::MmWaveRrComponentCarrierManager::DoReportBufferStatus(params); }

    static PyObject * _wrap_DoUlReceiveMacCe(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoUlReceiveMacCe__parent_caller(ns3::MacCeListElement_s bsr, uint8_t componentCarrierId)
    { ns3::mmwave::MmWaveRrComponentCarrierManager::DoUlReceiveMacCe(bsr, componentCarrierId); }

    static PyObject * _wrap_DoAddUe(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoAddUe__parent_caller(uint16_t rnti, uint8_t state)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoAddUe(rnti, state); }

    static PyObject * _wrap_DoDispose(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoInitialize(); }

    static PyObject * _wrap_DoNotifyHarqDeliveryFailure(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoNotifyHarqDeliveryFailure__parent_caller()
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoNotifyHarqDeliveryFailure(); }

    static PyObject * _wrap_DoNotifyPrbOccupancy(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoNotifyPrbOccupancy__parent_caller(double prbOccupancy, uint8_t componentCarrierId)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoNotifyPrbOccupancy(prbOccupancy, componentCarrierId); }

    static PyObject * _wrap_DoNotifyTxOpportunity(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoNotifyTxOpportunity__parent_caller(ns3::LteMacSapUser::TxOpportunityParameters txOpParams)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoNotifyTxOpportunity(txOpParams); }

    static PyObject * _wrap_DoReceivePdu(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoReceivePdu__parent_caller(ns3::LteMacSapUser::ReceivePduParameters rxPduParams)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoReceivePdu(rxPduParams); }

    static PyObject * _wrap_DoReleaseDataRadioBearer(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline std::vector< unsigned char > DoReleaseDataRadioBearer__parent_caller(uint16_t rnti, uint8_t lcid)
    { return ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoReleaseDataRadioBearer(rnti, lcid); }

    static PyObject * _wrap_DoRemoveUe(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoRemoveUe__parent_caller(uint16_t rnti)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoRemoveUe(rnti); }

    static PyObject * _wrap_DoReportUeMeas(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoReportUeMeas__parent_caller(uint16_t rnti, ns3::LteRrcSap::MeasResults measResults)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoReportUeMeas(rnti, measResults); }

    static PyObject * _wrap_DoTransmitPdu(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoTransmitPdu__parent_caller(ns3::LteMacSapProvider::TransmitPduParameters params)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoTransmitPdu(params); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveRrComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoReportBufferStatus(ns3::LteMacSapProvider::ReportBufferStatusParameters params);

    virtual void DoUlReceiveMacCe(ns3::MacCeListElement_s bsr, uint8_t componentCarrierId);

    virtual void DoAddUe(uint16_t rnti, uint8_t state);

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void DoNotifyHarqDeliveryFailure();

    virtual void DoNotifyPrbOccupancy(double prbOccupancy, uint8_t componentCarrierId);

    virtual void DoNotifyTxOpportunity(ns3::LteMacSapUser::TxOpportunityParameters txOpParams);

    virtual void DoReceivePdu(ns3::LteMacSapUser::ReceivePduParameters rxPduParams);

    virtual std::vector< unsigned char > DoReleaseDataRadioBearer(uint16_t rnti, uint8_t lcid);

    virtual void DoRemoveUe(uint16_t rnti);

    virtual void DoReportUeMeas(uint16_t rnti, ns3::LteRrcSap::MeasResults measResults);

    virtual void DoTransmitPdu(ns3::LteMacSapProvider::TransmitPduParameters params);

    virtual ns3::LteCcmMacSapUser * GetLteCcmMacSapUser();

    virtual ns3::LteCcmRrcSapProvider * GetLteCcmRrcSapProvider();

    virtual ns3::LteMacSapProvider * GetLteMacSapProvider();

    virtual void SetBandwidthMap(std::map< unsigned char, double > bandwidthMap);

    virtual void SetNumberOfComponentCarriers(uint16_t noOfComponentCarriers);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveRrComponentCarrierManager__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveRrComponentCarrierManager > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveRrComponentCarrierManager__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveSib1Message *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveSib1Message;


extern PyTypeObject PyNs3MmwaveMmWaveSib1Message_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveSpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveSpectrumPhy;


extern PyTypeObject PyNs3MmwaveMmWaveSpectrumPhy_Type;

class PyNs3MmwaveMmWaveSpectrumPhy__PythonHelper : public ns3::mmwave::MmWaveSpectrumPhy
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveSpectrumPhy__PythonHelper()
        : ns3::mmwave::MmWaveSpectrumPhy(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveSpectrumPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveSpectrumPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveSpectrumPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveSpectrumPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual void SetDevice(ns3::Ptr< ns3::NetDevice > d);

    virtual ns3::Ptr< ns3::NetDevice > GetDevice() const;

    virtual void SetMobility(ns3::Ptr< ns3::MobilityModel > m);

    virtual ns3::Ptr< ns3::MobilityModel > GetMobility();

    virtual void SetChannel(ns3::Ptr< ns3::SpectrumChannel > c);

    virtual ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel() const;

    virtual ns3::Ptr< ns3::AntennaModel > GetRxAntenna();

    virtual void StartRx(ns3::Ptr< ns3::SpectrumSignalParameters > params);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveSpectrumPhy__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveSpectrumPhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveSpectrumPhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveSpectrumSignalParametersDlCtrlFrame *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveSpectrumSignalParametersDlCtrlFrame;


extern PyTypeObject PyNs3MmwaveMmWaveSpectrumSignalParametersDlCtrlFrame_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveSpectrumValueHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveSpectrumValueHelper;


extern PyTypeObject PyNs3MmwaveMmWaveSpectrumValueHelper_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveSpectrumValueHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveTbStats_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveTbStats_t;


extern PyTypeObject PyNs3MmwaveMmWaveTbStats_t_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveTbStats_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveTdmaDciMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveTdmaDciMessage;


extern PyTypeObject PyNs3MmwaveMmWaveTdmaDciMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveUeMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveUeMac;


extern PyTypeObject PyNs3MmwaveMmWaveUeMac_Type;

class PyNs3MmwaveMmWaveUeMac__PythonHelper : public ns3::mmwave::MmWaveUeMac
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveUeMac__PythonHelper(ns3::mmwave::MmWaveUeMac const & arg0)
        : ns3::mmwave::MmWaveUeMac(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveUeMac__PythonHelper()
        : ns3::mmwave::MmWaveUeMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveUeMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveUeMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveUeMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveUeMac *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveUeMac__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveUeMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveUeMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveUeNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveUeNetDevice;


extern PyTypeObject PyNs3MmwaveMmWaveUeNetDevice_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveUePhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveUePhy;


extern PyTypeObject PyNs3MmwaveMmWaveUePhy_Type;

class PyNs3MmwaveMmWaveUePhy__PythonHelper : public ns3::mmwave::MmWaveUePhy
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveUePhy__PythonHelper(ns3::mmwave::MmWaveUePhy const & arg0)
        : ns3::mmwave::MmWaveUePhy(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveUePhy__PythonHelper()
        : ns3::mmwave::MmWaveUePhy(), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveUePhy__PythonHelper(ns3::Ptr< ns3::mmwave::MmWaveSpectrumPhy > ulPhy, ns3::Ptr< ns3::mmwave::MmWaveSpectrumPhy > dlPhy)
        : ns3::mmwave::MmWaveUePhy(ulPhy, dlPhy), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveUePhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveUePhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveUePhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity();

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::Ptr< ns3::PacketBurst > GetPacketBurst(ns3::mmwave::SfnSf arg0);

    virtual void SendRachPreamble(uint32_t PreambleId, uint32_t Rnti);

    virtual void SetMacPdu(ns3::Ptr< ns3::Packet > pb);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveUePhy__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveUePhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveUePhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveUePhySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveUePhySapUser;


extern PyTypeObject PyNs3MmwaveMmWaveUePhySapUser_Type;

class PyNs3MmwaveMmWaveUePhySapUser__PythonHelper : public ns3::mmwave::MmWaveUePhySapUser
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveUePhySapUser__PythonHelper()
        : ns3::mmwave::MmWaveUePhySapUser(), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveUePhySapUser__PythonHelper(ns3::mmwave::MmWaveUePhySapUser const & arg0)
        : ns3::mmwave::MmWaveUePhySapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveUePhySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void ReceiveControlMessage(ns3::Ptr< ns3::mmwave::MmWaveControlMessage > msg);

    virtual void ReceivePhyPdu(ns3::Ptr< ns3::Packet > p);

    virtual void SetConfigurationParameters(ns3::Ptr< ns3::mmwave::MmWavePhyMacCommon > params);

    virtual void SubframeIndication(ns3::mmwave::SfnSf arg0);
};

extern std::map<void*, PyObject*> PyNs3MmwaveMmWaveUePhySapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveUeRrcProtocolIdeal *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveUeRrcProtocolIdeal;


extern PyTypeObject PyNs3MmwaveMmWaveUeRrcProtocolIdeal_Type;

class PyNs3MmwaveMmWaveUeRrcProtocolIdeal__PythonHelper : public ns3::mmwave::MmWaveUeRrcProtocolIdeal
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveUeRrcProtocolIdeal__PythonHelper(ns3::mmwave::MmWaveUeRrcProtocolIdeal const & arg0)
        : ns3::mmwave::MmWaveUeRrcProtocolIdeal(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveUeRrcProtocolIdeal__PythonHelper()
        : ns3::mmwave::MmWaveUeRrcProtocolIdeal(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveUeRrcProtocolIdeal__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveUeRrcProtocolIdeal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveUeRrcProtocolIdeal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveUeRrcProtocolIdeal *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveUeRrcProtocolIdeal__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveUeRrcProtocolIdeal > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveUeRrcProtocolIdeal__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmwaveSpectrumSignalParametersDataFrame *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmwaveSpectrumSignalParametersDataFrame;


extern PyTypeObject PyNs3MmwaveMmwaveSpectrumSignalParametersDataFrame_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::Params3gpp *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveParams3gpp;


extern PyTypeObject PyNs3MmwaveParams3gpp_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::ParamsTable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveParamsTable;


extern PyTypeObject PyNs3MmwaveParamsTable_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::RlcListElement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveRlcListElement;


extern PyTypeObject PyNs3MmwaveRlcListElement_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveRlcListElement_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::RlcPduInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveRlcPduInfo;


extern PyTypeObject PyNs3MmwaveRlcPduInfo_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveRlcPduInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::RxPacketTraceParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveRxPacketTraceParams;


extern PyTypeObject PyNs3MmwaveRxPacketTraceParams_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveRxPacketTraceParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::SchedInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveSchedInfo;


extern PyTypeObject PyNs3MmwaveSchedInfo_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveSchedInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::SfAllocInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveSfAllocInfo;


extern PyTypeObject PyNs3MmwaveSfAllocInfo_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveSfAllocInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::SfnSf *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveSfnSf;


extern PyTypeObject PyNs3MmwaveSfnSf_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveSfnSf_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::SlotAllocInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveSlotAllocInfo;


extern PyTypeObject PyNs3MmwaveSlotAllocInfo_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveSlotAllocInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::TbAllocInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveTbAllocInfo;


extern PyTypeObject PyNs3MmwaveTbAllocInfo_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveTbAllocInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::TbInfoElement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveTbInfoElement;


extern PyTypeObject PyNs3MmwaveTbInfoElement_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveTbInfoElement_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::TraceParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveTraceParams;


extern PyTypeObject PyNs3MmwaveTraceParams_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::UePhyPacketCountParameter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveUePhyPacketCountParameter;


extern PyTypeObject PyNs3MmwaveUePhyPacketCountParameter_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveUePhyPacketCountParameter_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::UlCqiInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveUlCqiInfo;


extern PyTypeObject PyNs3MmwaveUlCqiInfo_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveUlCqiInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::UlHarqInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveUlHarqInfo;


extern PyTypeObject PyNs3MmwaveUlHarqInfo_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveUlHarqInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::channelCondition *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveChannelCondition;


extern PyTypeObject PyNs3MmwaveChannelCondition_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveChannelCondition_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::channelMatrix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveChannelMatrix;


extern PyTypeObject PyNs3MmwaveChannelMatrix_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::channelScenario *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveChannelScenario;


extern PyTypeObject PyNs3MmwaveChannelScenario_Type;

extern std::map<void*, PyObject*> PyNs3MmwaveChannelScenario_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::mmwave::mmWaveBeamFormingParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveBeamFormingParams;


extern PyTypeObject PyNs3MmwaveMmWaveBeamFormingParams_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::mmWaveBeamFormingTraces *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveBeamFormingTraces;


extern PyTypeObject PyNs3MmwaveMmWaveBeamFormingTraces_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::mmWaveChunkProcessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveChunkProcessor;


extern PyTypeObject PyNs3MmwaveMmWaveChunkProcessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::mmWaveInterference *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveInterference;


extern PyTypeObject PyNs3MmwaveMmWaveInterference_Type;

class PyNs3MmwaveMmWaveInterference__PythonHelper : public ns3::mmwave::mmWaveInterference
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveInterference__PythonHelper(ns3::mmwave::mmWaveInterference const & arg0)
        : ns3::mmwave::mmWaveInterference(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveInterference__PythonHelper()
        : ns3::mmwave::mmWaveInterference(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveInterference__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveInterference *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveInterference *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveInterference *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveInterference__PythonHelper")
        .SetParent< ns3::mmwave::mmWaveInterference > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveInterference__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::mmwaveSpectrumSignalParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmwaveSpectrumSignalParameters;


extern PyTypeObject PyNs3MmwaveMmwaveSpectrumSignalParameters_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveBaRrComponentCarrierManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveBaRrComponentCarrierManager;


extern PyTypeObject PyNs3MmwaveMmWaveBaRrComponentCarrierManager_Type;

class PyNs3MmwaveMmWaveBaRrComponentCarrierManager__PythonHelper : public ns3::mmwave::MmWaveBaRrComponentCarrierManager
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveBaRrComponentCarrierManager__PythonHelper(ns3::mmwave::MmWaveBaRrComponentCarrierManager const & arg0)
        : ns3::mmwave::MmWaveBaRrComponentCarrierManager(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveBaRrComponentCarrierManager__PythonHelper()
        : ns3::mmwave::MmWaveBaRrComponentCarrierManager(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveBaRrComponentCarrierManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoReportBufferStatus(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoReportBufferStatus__parent_caller(ns3::LteMacSapProvider::ReportBufferStatusParameters params)
    { ns3::mmwave::MmWaveBaRrComponentCarrierManager::DoReportBufferStatus(params); }

    static PyObject * _wrap_DoUlReceiveMacCe(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoUlReceiveMacCe__parent_caller(ns3::MacCeListElement_s bsr, uint8_t componentCarrierId)
    { ns3::mmwave::MmWaveBaRrComponentCarrierManager::DoUlReceiveMacCe(bsr, componentCarrierId); }

    static PyObject * _wrap_DoAddUe(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoAddUe__parent_caller(uint16_t rnti, uint8_t state)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoAddUe(rnti, state); }

    static PyObject * _wrap_DoDispose(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoDispose__parent_caller()
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoDispose(); }

    static PyObject * _wrap_DoInitialize(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoInitialize__parent_caller()
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoInitialize(); }

    static PyObject * _wrap_DoNotifyHarqDeliveryFailure(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void DoNotifyHarqDeliveryFailure__parent_caller()
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoNotifyHarqDeliveryFailure(); }

    static PyObject * _wrap_DoNotifyPrbOccupancy(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoNotifyPrbOccupancy__parent_caller(double prbOccupancy, uint8_t componentCarrierId)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoNotifyPrbOccupancy(prbOccupancy, componentCarrierId); }

    static PyObject * _wrap_DoNotifyTxOpportunity(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoNotifyTxOpportunity__parent_caller(ns3::LteMacSapUser::TxOpportunityParameters txOpParams)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoNotifyTxOpportunity(txOpParams); }

    static PyObject * _wrap_DoReceivePdu(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoReceivePdu__parent_caller(ns3::LteMacSapUser::ReceivePduParameters rxPduParams)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoReceivePdu(rxPduParams); }

    static PyObject * _wrap_DoReleaseDataRadioBearer(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline std::vector< unsigned char > DoReleaseDataRadioBearer__parent_caller(uint16_t rnti, uint8_t lcid)
    { return ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoReleaseDataRadioBearer(rnti, lcid); }

    static PyObject * _wrap_DoRemoveUe(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoRemoveUe__parent_caller(uint16_t rnti)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoRemoveUe(rnti); }

    static PyObject * _wrap_DoReportUeMeas(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoReportUeMeas__parent_caller(uint16_t rnti, ns3::LteRrcSap::MeasResults measResults)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoReportUeMeas(rnti, measResults); }

    static PyObject * _wrap_DoTransmitPdu(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *args, PyObject *kwargs);
    inline void DoTransmitPdu__parent_caller(ns3::LteMacSapProvider::TransmitPduParameters params)
    { ns3::mmwave::MmWaveNoOpComponentCarrierManager::DoTransmitPdu(params); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveBaRrComponentCarrierManager *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void DoReportBufferStatus(ns3::LteMacSapProvider::ReportBufferStatusParameters params);

    virtual void DoUlReceiveMacCe(ns3::MacCeListElement_s bsr, uint8_t componentCarrierId);

    virtual void DoAddUe(uint16_t rnti, uint8_t state);

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void DoNotifyHarqDeliveryFailure();

    virtual void DoNotifyPrbOccupancy(double prbOccupancy, uint8_t componentCarrierId);

    virtual void DoNotifyTxOpportunity(ns3::LteMacSapUser::TxOpportunityParameters txOpParams);

    virtual void DoReceivePdu(ns3::LteMacSapUser::ReceivePduParameters rxPduParams);

    virtual std::vector< unsigned char > DoReleaseDataRadioBearer(uint16_t rnti, uint8_t lcid);

    virtual void DoRemoveUe(uint16_t rnti);

    virtual void DoReportUeMeas(uint16_t rnti, ns3::LteRrcSap::MeasResults measResults);

    virtual void DoTransmitPdu(ns3::LteMacSapProvider::TransmitPduParameters params);

    virtual ns3::LteCcmMacSapUser * GetLteCcmMacSapUser();

    virtual ns3::LteCcmRrcSapProvider * GetLteCcmRrcSapProvider();

    virtual ns3::LteMacSapProvider * GetLteMacSapProvider();

    virtual void SetBandwidthMap(std::map< unsigned char, double > bandwidthMap);

    virtual void SetNumberOfComponentCarriers(uint16_t noOfComponentCarriers);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveBaRrComponentCarrierManager__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveBaRrComponentCarrierManager > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveBaRrComponentCarrierManager__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveBsrMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveBsrMessage;


extern PyTypeObject PyNs3MmwaveMmWaveBsrMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveEnbNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveEnbNetDevice;


extern PyTypeObject PyNs3MmwaveMmWaveEnbNetDevice_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveEnbPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveEnbPhy;


extern PyTypeObject PyNs3MmwaveMmWaveEnbPhy_Type;

class PyNs3MmwaveMmWaveEnbPhy__PythonHelper : public ns3::mmwave::MmWaveEnbPhy
{
public:
    PyObject *m_pyself;
    PyNs3MmwaveMmWaveEnbPhy__PythonHelper(ns3::mmwave::MmWaveEnbPhy const & arg0)
        : ns3::mmwave::MmWaveEnbPhy(arg0), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveEnbPhy__PythonHelper()
        : ns3::mmwave::MmWaveEnbPhy(), m_pyself(NULL)
        {}

    PyNs3MmwaveMmWaveEnbPhy__PythonHelper(ns3::Ptr< ns3::mmwave::MmWaveSpectrumPhy > arg0, ns3::Ptr< ns3::mmwave::MmWaveSpectrumPhy > arg1)
        : ns3::mmwave::MmWaveEnbPhy(arg0, arg1), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MmwaveMmWaveEnbPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyNewAggregate(PyNs3MmwaveMmWaveEnbPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MmwaveMmWaveEnbPhy *self, PyObject *PYBINDGEN_UNUSED(_args), PyObject *PYBINDGEN_UNUSED(_kwargs));
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity();

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::Ptr< ns3::PacketBurst > GetPacketBurst(ns3::mmwave::SfnSf arg0);

    virtual void SendRachPreamble(uint32_t PreambleId, uint32_t Rnti);

    virtual void SetMacPdu(ns3::Ptr< ns3::Packet > pb);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MmwaveMmWaveEnbPhy__PythonHelper")
        .SetParent< ns3::mmwave::MmWaveEnbPhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MmwaveMmWaveEnbPhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveFlexTtiMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveFlexTtiMacScheduler;


extern PyTypeObject PyNs3MmwaveMmWaveFlexTtiMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveFlexTtiMaxRateMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveFlexTtiMaxRateMacScheduler;


extern PyTypeObject PyNs3MmwaveMmWaveFlexTtiMaxRateMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveFlexTtiMaxWeightMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveFlexTtiMaxWeightMacScheduler;


extern PyTypeObject PyNs3MmwaveMmWaveFlexTtiMaxWeightMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveFlexTtiPfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MmwaveMmWaveFlexTtiPfMacScheduler;


extern PyTypeObject PyNs3MmwaveMmWaveFlexTtiPfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::mmwave::doubleVector_t *obj;
} Pyns3__mmwave__doubleVector_t;


typedef struct {
    PyObject_HEAD
    Pyns3__mmwave__doubleVector_t *container;
    ns3::mmwave::doubleVector_t::iterator *iterator;
} Pyns3__mmwave__doubleVector_tIter;


extern PyTypeObject Pyns3__mmwave__doubleVector_t_Type;
extern PyTypeObject Pyns3__mmwave__doubleVector_tIter_Type;

int _wrap_convert_py2c__ns3__mmwave__doubleVector_t(PyObject *arg, ns3::mmwave::doubleVector_t *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::mmwave::TbInfoElement > *obj;
} Pystd__vector__lt___ns3__mmwave__TbInfoElement___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__mmwave__TbInfoElement___gt__ *container;
    std::vector< ns3::mmwave::TbInfoElement >::iterator *iterator;
} Pystd__vector__lt___ns3__mmwave__TbInfoElement___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__mmwave__TbInfoElement___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__mmwave__TbInfoElement___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__mmwave__TbInfoElement___gt__(PyObject *arg, std::vector< ns3::mmwave::TbInfoElement > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierUe > > *obj;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt__ *container;
    std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierUe > >::iterator *iterator;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt_____gt__(PyObject *arg, std::map< unsigned char, ns3::Ptr< ns3::ComponentCarrierUe > > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, ns3::Ptr< ns3::mmwave::MmWaveComponentCarrierUe > > *obj;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierUe___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierUe___gt_____gt__ *container;
    std::map< unsigned char, ns3::Ptr< ns3::mmwave::MmWaveComponentCarrierUe > >::iterator *iterator;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierUe___gt_____gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierUe___gt_____gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierUe___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierUe___gt_____gt__(PyObject *arg, std::map< unsigned char, ns3::Ptr< ns3::mmwave::MmWaveComponentCarrierUe > > *container);

typedef struct {
    PyObject_HEAD
    ns3::mmwave::MmWaveHarqProcessInfoList_t *obj;
} Pyns3__mmwave__MmWaveHarqProcessInfoList_t;


typedef struct {
    PyObject_HEAD
    Pyns3__mmwave__MmWaveHarqProcessInfoList_t *container;
    ns3::mmwave::MmWaveHarqProcessInfoList_t::iterator *iterator;
} Pyns3__mmwave__MmWaveHarqProcessInfoList_tIter;


extern PyTypeObject Pyns3__mmwave__MmWaveHarqProcessInfoList_t_Type;
extern PyTypeObject Pyns3__mmwave__MmWaveHarqProcessInfoList_tIter_Type;

int _wrap_convert_py2c__ns3__mmwave__MmWaveHarqProcessInfoList_t(PyObject *arg, ns3::mmwave::MmWaveHarqProcessInfoList_t *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, ns3::mmwave::MmWaveComponentCarrier > *obj;
} Pystd__map__lt___unsigned_char__ns3__mmwave__MmWaveComponentCarrier___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__ns3__mmwave__MmWaveComponentCarrier___gt__ *container;
    std::map< unsigned char, ns3::mmwave::MmWaveComponentCarrier >::iterator *iterator;
} Pystd__map__lt___unsigned_char__ns3__mmwave__MmWaveComponentCarrier___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__mmwave__MmWaveComponentCarrier___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__mmwave__MmWaveComponentCarrier___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__ns3__mmwave__MmWaveComponentCarrier___gt__(PyObject *arg, std::map< unsigned char, ns3::mmwave::MmWaveComponentCarrier > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, ns3::ComponentCarrier > *obj;
} Pystd__map__lt___unsigned_char__ns3__ComponentCarrier___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__ns3__ComponentCarrier___gt__ *container;
    std::map< unsigned char, ns3::ComponentCarrier >::iterator *iterator;
} Pystd__map__lt___unsigned_char__ns3__ComponentCarrier___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__ComponentCarrier___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__ComponentCarrier___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__ns3__ComponentCarrier___gt__(PyObject *arg, std::map< unsigned char, ns3::ComponentCarrier > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, bool > *obj;
} Pystd__map__lt___unsigned_char__bool___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__bool___gt__ *container;
    std::map< unsigned char, bool >::iterator *iterator;
} Pystd__map__lt___unsigned_char__bool___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__bool___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__bool___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__bool___gt__(PyObject *arg, std::map< unsigned char, bool > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::mmwave::MacSubheader > *obj;
} Pystd__vector__lt___ns3__mmwave__MacSubheader___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__mmwave__MacSubheader___gt__ *container;
    std::vector< ns3::mmwave::MacSubheader >::iterator *iterator;
} Pystd__vector__lt___ns3__mmwave__MacSubheader___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__mmwave__MacSubheader___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__mmwave__MacSubheader___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__mmwave__MacSubheader___gt__(PyObject *arg, std::vector< ns3::mmwave::MacSubheader > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::mmwave::DlCqiInfo > *obj;
} Pystd__vector__lt___ns3__mmwave__DlCqiInfo___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__mmwave__DlCqiInfo___gt__ *container;
    std::vector< ns3::mmwave::DlCqiInfo >::iterator *iterator;
} Pystd__vector__lt___ns3__mmwave__DlCqiInfo___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__mmwave__DlCqiInfo___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__mmwave__DlCqiInfo___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__mmwave__DlCqiInfo___gt__(PyObject *arg, std::vector< ns3::mmwave::DlCqiInfo > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::mmwave::MacCeElement > *obj;
} Pystd__vector__lt___ns3__mmwave__MacCeElement___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__mmwave__MacCeElement___gt__ *container;
    std::vector< ns3::mmwave::MacCeElement >::iterator *iterator;
} Pystd__vector__lt___ns3__mmwave__MacCeElement___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__mmwave__MacCeElement___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__mmwave__MacCeElement___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__mmwave__MacCeElement___gt__(PyObject *arg, std::vector< ns3::mmwave::MacCeElement > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::mmwave::DlHarqInfo > *obj;
} Pystd__vector__lt___ns3__mmwave__DlHarqInfo___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__mmwave__DlHarqInfo___gt__ *container;
    std::vector< ns3::mmwave::DlHarqInfo >::iterator *iterator;
} Pystd__vector__lt___ns3__mmwave__DlHarqInfo___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__mmwave__DlHarqInfo___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__mmwave__DlHarqInfo___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__mmwave__DlHarqInfo___gt__(PyObject *arg, std::vector< ns3::mmwave::DlHarqInfo > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::mmwave::UlHarqInfo > *obj;
} Pystd__vector__lt___ns3__mmwave__UlHarqInfo___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__mmwave__UlHarqInfo___gt__ *container;
    std::vector< ns3::mmwave::UlHarqInfo >::iterator *iterator;
} Pystd__vector__lt___ns3__mmwave__UlHarqInfo___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__mmwave__UlHarqInfo___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__mmwave__UlHarqInfo___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__mmwave__UlHarqInfo___gt__(PyObject *arg, std::vector< ns3::mmwave::UlHarqInfo > *container);

typedef struct {
    PyObject_HEAD
    std::list< unsigned short > *obj;
} Pystd__list__lt___unsigned_short___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___unsigned_short___gt__ *container;
    std::list< unsigned short >::iterator *iterator;
} Pystd__list__lt___unsigned_short___gt__Iter;


extern PyTypeObject Pystd__list__lt___unsigned_short___gt___Type;
extern PyTypeObject Pystd__list__lt___unsigned_short___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___unsigned_short___gt__(PyObject *arg, std::list< unsigned short > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned short, ns3::mmwave::SchedInfo > *obj;
} Pystd__map__lt___unsigned_short__ns3__mmwave__SchedInfo___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_short__ns3__mmwave__SchedInfo___gt__ *container;
    std::map< unsigned short, ns3::mmwave::SchedInfo >::iterator *iterator;
} Pystd__map__lt___unsigned_short__ns3__mmwave__SchedInfo___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_short__ns3__mmwave__SchedInfo___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_short__ns3__mmwave__SchedInfo___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_short__ns3__mmwave__SchedInfo___gt__(PyObject *arg, std::map< unsigned short, ns3::mmwave::SchedInfo > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::Ptr< ns3::mmwave::MmWaveControlMessage > > *obj;
} Pystd__list__lt___ns3__Ptr__lt___ns3__mmwave__MmWaveControlMessage___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__Ptr__lt___ns3__mmwave__MmWaveControlMessage___gt_____gt__ *container;
    std::list< ns3::Ptr< ns3::mmwave::MmWaveControlMessage > >::iterator *iterator;
} Pystd__list__lt___ns3__Ptr__lt___ns3__mmwave__MmWaveControlMessage___gt_____gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__mmwave__MmWaveControlMessage___gt_____gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__mmwave__MmWaveControlMessage___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__mmwave__MmWaveControlMessage___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::mmwave::MmWaveControlMessage > > *container);

typedef struct {
    PyObject_HEAD
    ns3::mmwave::double2DVector_t *obj;
} Pyns3__mmwave__double2DVector_t;


typedef struct {
    PyObject_HEAD
    Pyns3__mmwave__double2DVector_t *container;
    ns3::mmwave::double2DVector_t::iterator *iterator;
} Pyns3__mmwave__double2DVector_tIter;


extern PyTypeObject Pyns3__mmwave__double2DVector_t_Type;
extern PyTypeObject Pyns3__mmwave__double2DVector_tIter_Type;

int _wrap_convert_py2c__ns3__mmwave__double2DVector_t(PyObject *arg, ns3::mmwave::double2DVector_t *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::mmwave::RlcPduInfo > *obj;
} Pystd__vector__lt___ns3__mmwave__RlcPduInfo___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__mmwave__RlcPduInfo___gt__ *container;
    std::vector< ns3::mmwave::RlcPduInfo >::iterator *iterator;
} Pystd__vector__lt___ns3__mmwave__RlcPduInfo___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__mmwave__RlcPduInfo___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__mmwave__RlcPduInfo___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__mmwave__RlcPduInfo___gt__(PyObject *arg, std::vector< ns3::mmwave::RlcPduInfo > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, std::vector< ns3::mmwave::RlcPduInfo > > *obj;
} Pystd__map__lt___unsigned_char__std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt__ *container;
    std::map< unsigned char, std::vector< ns3::mmwave::RlcPduInfo > >::iterator *iterator;
} Pystd__map__lt___unsigned_char__std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt__(PyObject *arg, std::map< unsigned char, std::vector< ns3::mmwave::RlcPduInfo > > *container);

typedef struct {
    PyObject_HEAD
    std::deque< ns3::mmwave::SlotAllocInfo > *obj;
} Pystd__deque__lt___ns3__mmwave__SlotAllocInfo___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__deque__lt___ns3__mmwave__SlotAllocInfo___gt__ *container;
    std::deque< ns3::mmwave::SlotAllocInfo >::iterator *iterator;
} Pystd__deque__lt___ns3__mmwave__SlotAllocInfo___gt__Iter;


extern PyTypeObject Pystd__deque__lt___ns3__mmwave__SlotAllocInfo___gt___Type;
extern PyTypeObject Pystd__deque__lt___ns3__mmwave__SlotAllocInfo___gt__Iter_Type;

int _wrap_convert_py2c__std__deque__lt___ns3__mmwave__SlotAllocInfo___gt__(PyObject *arg, std::deque< ns3::mmwave::SlotAllocInfo > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned int > *obj;
} Pystd__vector__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_int___gt__ *container;
    std::vector< unsigned int >::iterator *iterator;
} Pystd__vector__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_int___gt__(PyObject *arg, std::vector< unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned char, ns3::Ptr< ns3::mmwave::MmWaveComponentCarrierEnb > > *obj;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierEnb___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierEnb___gt_____gt__ *container;
    std::map< unsigned char, ns3::Ptr< ns3::mmwave::MmWaveComponentCarrierEnb > >::iterator *iterator;
} Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierEnb___gt_____gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierEnb___gt_____gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierEnb___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_char__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierEnb___gt_____gt__(PyObject *arg, std::map< unsigned char, ns3::Ptr< ns3::mmwave::MmWaveComponentCarrierEnb > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::mmwave::DciInfoElementTdma > *obj;
} Pystd__vector__lt___ns3__mmwave__DciInfoElementTdma___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__mmwave__DciInfoElementTdma___gt__ *container;
    std::vector< ns3::mmwave::DciInfoElementTdma >::iterator *iterator;
} Pystd__vector__lt___ns3__mmwave__DciInfoElementTdma___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__mmwave__DciInfoElementTdma___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__mmwave__DciInfoElementTdma___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__mmwave__DciInfoElementTdma___gt__(PyObject *arg, std::vector< ns3::mmwave::DciInfoElementTdma > *container);

typedef struct {
    PyObject_HEAD
    std::vector< std::vector< ns3::mmwave::RlcPduInfo > > *obj;
} Pystd__vector__lt___std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt__ *container;
    std::vector< std::vector< ns3::mmwave::RlcPduInfo > >::iterator *iterator;
} Pystd__vector__lt___std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__vector__lt___ns3__mmwave__RlcPduInfo___gt_____gt__(PyObject *arg, std::vector< std::vector< ns3::mmwave::RlcPduInfo > > *container);

class PythonCallbackImpl0 : public ns3::CallbackImpl<ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl0(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl0()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl0 *other = dynamic_cast<const PythonCallbackImpl0*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    ns3::ObjectBase *
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        ns3::ObjectBase *retval;
        PyObject *args;
        PyNs3ObjectBase *tmp_ObjectBase;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return NULL;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3ObjectBase_Type, &tmp_ObjectBase)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return NULL;
        }
        // dangerous!
        retval = tmp_ObjectBase->obj;
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl1 : public ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl2 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl2(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl2()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl2 *other = dynamic_cast<const PythonCallbackImpl2*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;

            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NNiN)", py_NetDevice, py_Packet, (int) arg3, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl3 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<const ns3::Packet>, unsigned short, const ns3::Address &, const ns3::Address &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl3(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl3()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl3 *other = dynamic_cast<const PythonCallbackImpl3*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;

            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl4 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl4(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl4()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl4 *other = dynamic_cast<const PythonCallbackImpl4*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;

            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        args = Py_BuildValue((char *) "(N)", py_NetDevice);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl5 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl5(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl5()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl5 *other = dynamic_cast<const PythonCallbackImpl5*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::MobilityModel const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3MobilityModel *py_MobilityModel;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
        {
            py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_MobilityModel);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_MobilityModel = NULL;
            } else {
                py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
                Py_INCREF(py_MobilityModel);
            }

            if (py_MobilityModel == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))), &PyNs3MobilityModel_Type);
                py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
                py_MobilityModel->inst_dict = NULL;

                py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))->Ref();
                py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_MobilityModel);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl6 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::SpectrumPhy>, ns3::Ptr<const ns3::SpectrumPhy>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl6(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl6()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl6 *other = dynamic_cast<const PythonCallbackImpl6*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::SpectrumPhy const > arg1, ns3::Ptr< ns3::SpectrumPhy const > arg2, double arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3SpectrumPhy *py_SpectrumPhy;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3SpectrumPhy *py_SpectrumPhy2;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3SpectrumPhy__PythonHelper).name())
        {
            py_SpectrumPhy = (PyNs3SpectrumPhy*) (((PyNs3SpectrumPhy__PythonHelper*) const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_SpectrumPhy->obj = const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_SpectrumPhy);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_SpectrumPhy = NULL;
            } else {
                py_SpectrumPhy = (PyNs3SpectrumPhy *) wrapper_lookup_iter->second;
                Py_INCREF(py_SpectrumPhy);
            }

            if (py_SpectrumPhy == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1))), &PyNs3SpectrumPhy_Type);
                py_SpectrumPhy = PyObject_GC_New(PyNs3SpectrumPhy, wrapper_type);
                py_SpectrumPhy->inst_dict = NULL;

                py_SpectrumPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1))->Ref();
                py_SpectrumPhy->obj = const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_SpectrumPhy->obj] = (PyObject *) py_SpectrumPhy;
            }
        }
        if (typeid(*(const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2)))).name() == typeid(PyNs3SpectrumPhy__PythonHelper).name())
        {
            py_SpectrumPhy2 = (PyNs3SpectrumPhy*) (((PyNs3SpectrumPhy__PythonHelper*) const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2)))->m_pyself);
            py_SpectrumPhy2->obj = const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2));
            Py_INCREF(py_SpectrumPhy2);
        } else {
            wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2)));
            if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
                py_SpectrumPhy2 = NULL;
            } else {
                py_SpectrumPhy2 = (PyNs3SpectrumPhy *) wrapper_lookup_iter2->second;
                Py_INCREF(py_SpectrumPhy2);
            }

            if (py_SpectrumPhy2 == NULL)
            {
                wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2))), &PyNs3SpectrumPhy_Type);
                py_SpectrumPhy2 = PyObject_GC_New(PyNs3SpectrumPhy, wrapper_type2);
                py_SpectrumPhy2->inst_dict = NULL;

                py_SpectrumPhy2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2))->Ref();
                py_SpectrumPhy2->obj = const_cast<ns3::SpectrumPhy *> (ns3::PeekPointer (arg2));
                PyNs3ObjectBase_wrapper_registry[(void *) py_SpectrumPhy2->obj] = (PyObject *) py_SpectrumPhy2;
            }
        }
        args = Py_BuildValue((char *) "(NNd)", py_SpectrumPhy, py_SpectrumPhy2, arg3);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl7 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::MobilityModel>, ns3::Ptr<const ns3::MobilityModel>, double, double, double, double, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl7(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl7()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl7 *other = dynamic_cast<const PythonCallbackImpl7*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::MobilityModel const > arg1, ns3::Ptr< ns3::MobilityModel const > arg2, double arg3, double arg4, double arg5, double arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3MobilityModel *py_MobilityModel;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3MobilityModel *py_MobilityModel2;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
        {
            py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_MobilityModel);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_MobilityModel = NULL;
            } else {
                py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
                Py_INCREF(py_MobilityModel);
            }

            if (py_MobilityModel == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))), &PyNs3MobilityModel_Type);
                py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
                py_MobilityModel->inst_dict = NULL;

                py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1))->Ref();
                py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
            }
        }
        if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2)))).name() == typeid(PyNs3MobilityModel__PythonHelper).name())
        {
            py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2)))->m_pyself);
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2));
            Py_INCREF(py_MobilityModel2);
        } else {
            wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2)));
            if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
                py_MobilityModel2 = NULL;
            } else {
                py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
                Py_INCREF(py_MobilityModel2);
            }

            if (py_MobilityModel2 == NULL)
            {
                wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2))), &PyNs3MobilityModel_Type);
                py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
                py_MobilityModel2->inst_dict = NULL;

                py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2))->Ref();
                py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (arg2));
                PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
            }
        }
        args = Py_BuildValue((char *) "(NNdddd)", py_MobilityModel, py_MobilityModel2, arg3, arg4, arg5, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl8 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::SpectrumSignalParameters>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl8(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl8()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl8 *other = dynamic_cast<const PythonCallbackImpl8*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::SpectrumSignalParameters > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3SpectrumSignalParameters *py_SpectrumSignalParameters;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_SpectrumSignalParameters = NULL;
        } else {
            py_SpectrumSignalParameters = (PyNs3SpectrumSignalParameters *) wrapper_lookup_iter->second;
            Py_INCREF(py_SpectrumSignalParameters);
        }

        if (py_SpectrumSignalParameters == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1))), &PyNs3SpectrumSignalParameters_Type);
            py_SpectrumSignalParameters = PyObject_New(PyNs3SpectrumSignalParameters, wrapper_type);

            py_SpectrumSignalParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1))->Ref();
            py_SpectrumSignalParameters->obj = const_cast<ns3::SpectrumSignalParameters *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_SpectrumSignalParameters->obj] = (PyObject *) py_SpectrumSignalParameters;
        }
        args = Py_BuildValue((char *) "(N)", py_SpectrumSignalParameters);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl9 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl9(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl9()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl9 *other = dynamic_cast<const PythonCallbackImpl9*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl10 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl10(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl10()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl10 *other = dynamic_cast<const PythonCallbackImpl10*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl12 : public ns3::CallbackImpl<void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl12(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl12()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl12 *other = dynamic_cast<const PythonCallbackImpl12*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, ns3::Ptr< ns3::SpectrumValue > arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3SpectrumValue *py_SpectrumValue;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_SpectrumValue = NULL;
        } else {
            py_SpectrumValue = (PyNs3SpectrumValue *) wrapper_lookup_iter->second;
            Py_INCREF(py_SpectrumValue);
        }

        if (py_SpectrumValue == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2))), &PyNs3SpectrumValue_Type);
            py_SpectrumValue = PyObject_New(PyNs3SpectrumValue, wrapper_type);

            py_SpectrumValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2))->Ref();
            py_SpectrumValue->obj = const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_SpectrumValue->obj] = (PyObject *) py_SpectrumValue;
        }
        args = Py_BuildValue((char *) "(iN)", (int) arg1, py_SpectrumValue);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl13 : public ns3::CallbackImpl<void, ns3::DlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl13(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl13()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl13 *other = dynamic_cast<const PythonCallbackImpl13*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::DlInfoListElement_s arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3DlInfoListElement_s *py_DlInfoListElement_s;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_DlInfoListElement_s = PyObject_New(PyNs3DlInfoListElement_s, &PyNs3DlInfoListElement_s_Type);
        py_DlInfoListElement_s->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_DlInfoListElement_s->obj = new ns3::DlInfoListElement_s(arg1);
        PyNs3DlInfoListElement_s_wrapper_registry[(void *) py_DlInfoListElement_s->obj] = (PyObject *) py_DlInfoListElement_s;
        args = Py_BuildValue((char *) "(N)", py_DlInfoListElement_s);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl14 : public ns3::CallbackImpl<void, ns3::UlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl14(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl14()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl14 *other = dynamic_cast<const PythonCallbackImpl14*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::UlInfoListElement_s arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3UlInfoListElement_s *py_UlInfoListElement_s;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_UlInfoListElement_s = PyObject_New(PyNs3UlInfoListElement_s, &PyNs3UlInfoListElement_s_Type);
        py_UlInfoListElement_s->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_UlInfoListElement_s->obj = new ns3::UlInfoListElement_s(arg1);
        PyNs3UlInfoListElement_s_wrapper_registry[(void *) py_UlInfoListElement_s->obj] = (PyObject *) py_UlInfoListElement_s;
        args = Py_BuildValue((char *) "(N)", py_UlInfoListElement_s);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl15 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::PacketBurst>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl15(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl15()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl15 *other = dynamic_cast<const PythonCallbackImpl15*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::PacketBurst const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3PacketBurst *py_PacketBurst;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3PacketBurst__PythonHelper).name())
        {
            py_PacketBurst = (PyNs3PacketBurst*) (((PyNs3PacketBurst__PythonHelper*) const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_PacketBurst->obj = const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_PacketBurst);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_PacketBurst = NULL;
            } else {
                py_PacketBurst = (PyNs3PacketBurst *) wrapper_lookup_iter->second;
                Py_INCREF(py_PacketBurst);
            }

            if (py_PacketBurst == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1))), &PyNs3PacketBurst_Type);
                py_PacketBurst = PyObject_GC_New(PyNs3PacketBurst, wrapper_type);
                py_PacketBurst->inst_dict = NULL;

                py_PacketBurst->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1))->Ref();
                py_PacketBurst->obj = const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_PacketBurst->obj] = (PyObject *) py_PacketBurst;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_PacketBurst);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl16 : public ns3::CallbackImpl<void, ns3::PhyReceptionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl16(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl16()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl16 *other = dynamic_cast<const PythonCallbackImpl16*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::PhyReceptionStatParameters arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3PhyReceptionStatParameters *py_PhyReceptionStatParameters;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_PhyReceptionStatParameters = PyObject_New(PyNs3PhyReceptionStatParameters, &PyNs3PhyReceptionStatParameters_Type);
        py_PhyReceptionStatParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_PhyReceptionStatParameters->obj = new ns3::PhyReceptionStatParameters(arg1);
        PyNs3PhyReceptionStatParameters_wrapper_registry[(void *) py_PhyReceptionStatParameters->obj] = (PyObject *) py_PhyReceptionStatParameters;
        args = Py_BuildValue((char *) "(N)", py_PhyReceptionStatParameters);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl17 : public ns3::CallbackImpl<void, unsigned short, unsigned short, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl17(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl17()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl17 *other = dynamic_cast<const PythonCallbackImpl17*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2, double arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iid)", (int) arg1, (int) arg2, arg3);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl18 : public ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::LteUePhy::State, ns3::LteUePhy::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl18(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl18()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl18 *other = dynamic_cast<const PythonCallbackImpl18*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2, ns3::LteUePhy::State arg3, ns3::LteUePhy::State arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iiii)", (int) arg1, (int) arg2, arg3, arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl19 : public ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl19(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl19()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl19 *other = dynamic_cast<const PythonCallbackImpl19*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2, double arg3, double arg4, unsigned char arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iiddi)", (int) arg1, (int) arg2, arg3, arg4, (int) arg5);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl20 : public ns3::CallbackImpl<void, unsigned short, unsigned short, double, double, bool, unsigned char, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl20(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl20()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl20 *other = dynamic_cast<const PythonCallbackImpl20*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2, double arg3, double arg4, bool arg5, unsigned char arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iiddNi)", (int) arg1, (int) arg2, arg3, arg4, PyBool_FromLong(arg5), (int) arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl21 : public ns3::CallbackImpl<void, ns3::PhyTransmissionStatParameters, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl21(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl21()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl21 *other = dynamic_cast<const PythonCallbackImpl21*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::PhyTransmissionStatParameters arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3PhyTransmissionStatParameters *py_PhyTransmissionStatParameters;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_PhyTransmissionStatParameters = PyObject_New(PyNs3PhyTransmissionStatParameters, &PyNs3PhyTransmissionStatParameters_Type);
        py_PhyTransmissionStatParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_PhyTransmissionStatParameters->obj = new ns3::PhyTransmissionStatParameters(arg1);
        PyNs3PhyTransmissionStatParameters_wrapper_registry[(void *) py_PhyTransmissionStatParameters->obj] = (PyObject *) py_PhyTransmissionStatParameters;
        args = Py_BuildValue((char *) "(N)", py_PhyTransmissionStatParameters);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl22 : public ns3::CallbackImpl<void, unsigned short, unsigned short, double, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl22(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl22()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl22 *other = dynamic_cast<const PythonCallbackImpl22*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2, double arg3, unsigned char arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iidi)", (int) arg1, (int) arg2, arg3, (int) arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl23 : public ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl23(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl23()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl23 *other = dynamic_cast<const PythonCallbackImpl23*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned char arg2, unsigned int arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iiN)", (int) arg1, (int) arg2, PyLong_FromUnsignedLong(arg3));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl24 : public ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl24(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl24()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl24 *other = dynamic_cast<const PythonCallbackImpl24*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned char arg2, unsigned int arg3, unsigned long arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iiNk)", (int) arg1, (int) arg2, PyLong_FromUnsignedLong(arg3), arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl25 : public ns3::CallbackImpl<void, unsigned short, unsigned char, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl25(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl25()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl25 *other = dynamic_cast<const PythonCallbackImpl25*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned char arg2, unsigned int arg3, unsigned int arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iiNN)", (int) arg1, (int) arg2, PyLong_FromUnsignedLong(arg3), PyLong_FromUnsignedLong(arg4));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl26 : public ns3::CallbackImpl<void, unsigned int, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl26(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl26()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl26 *other = dynamic_cast<const PythonCallbackImpl26*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned int arg1, unsigned int arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(NN)", PyLong_FromUnsignedLong(arg1), PyLong_FromUnsignedLong(arg2));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl27 : public ns3::CallbackImpl<void, ns3::Time, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl27(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl27()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl27 *other = dynamic_cast<const PythonCallbackImpl27*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Time arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Time *py_Time;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
        py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Time->obj = new ns3::Time(arg1);
        PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
        args = Py_BuildValue((char *) "(N)", py_Time);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl28 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::QueueDiscItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl28(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl28()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl28 *other = dynamic_cast<const PythonCallbackImpl28*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::QueueDiscItem const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3QueueDiscItem *py_QueueDiscItem;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_QueueDiscItem = NULL;
        } else {
            py_QueueDiscItem = (PyNs3QueueDiscItem *) wrapper_lookup_iter->second;
            Py_INCREF(py_QueueDiscItem);
        }

        if (py_QueueDiscItem == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1))), &PyNs3QueueDiscItem_Type);
            py_QueueDiscItem = PyObject_New(PyNs3QueueDiscItem, wrapper_type);

            py_QueueDiscItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1))->Ref();
            py_QueueDiscItem->obj = const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_QueueDiscItem->obj] = (PyObject *) py_QueueDiscItem;
        }
        args = Py_BuildValue((char *) "(N)", py_QueueDiscItem);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl29 : public ns3::CallbackImpl<void, ns3::Ptr<const ns3::QueueDiscItem>, const char *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl29(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl29()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl29 *other = dynamic_cast<const PythonCallbackImpl29*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::QueueDiscItem const > arg1, char const *arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3QueueDiscItem *py_QueueDiscItem;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_QueueDiscItem = NULL;
        } else {
            py_QueueDiscItem = (PyNs3QueueDiscItem *) wrapper_lookup_iter->second;
            Py_INCREF(py_QueueDiscItem);
        }

        if (py_QueueDiscItem == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1))), &PyNs3QueueDiscItem_Type);
            py_QueueDiscItem = PyObject_New(PyNs3QueueDiscItem, wrapper_type);

            py_QueueDiscItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1))->Ref();
            py_QueueDiscItem->obj = const_cast<ns3::QueueDiscItem *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_QueueDiscItem->obj] = (PyObject *) py_QueueDiscItem;
        }
        args = Py_BuildValue((char *) "(Ns)", py_QueueDiscItem, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl30 : public ns3::CallbackImpl<void, bool, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl30(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl30()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl30 *other = dynamic_cast<const PythonCallbackImpl30*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(bool arg1, bool arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(NN)", PyBool_FromLong(arg1), PyBool_FromLong(arg2));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl31 : public ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl31(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl31()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl31 *other = dynamic_cast<const PythonCallbackImpl31*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned long arg1, unsigned short arg2, unsigned short arg3, unsigned short arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(kiii)", arg1, (int) arg2, (int) arg3, (int) arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl32 : public ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl32(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl32()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl32 *other = dynamic_cast<const PythonCallbackImpl32*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned long arg1, unsigned short arg2, unsigned short arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(kii)", arg1, (int) arg2, (int) arg3);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl33 : public ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteUeRrc::State, ns3::LteUeRrc::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl33(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl33()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl33 *other = dynamic_cast<const PythonCallbackImpl33*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned long arg1, unsigned short arg2, unsigned short arg3, ns3::LteUeRrc::State arg4, ns3::LteUeRrc::State arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(kiiii)", arg1, (int) arg2, (int) arg3, arg4, arg5);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl34 : public ns3::CallbackImpl<void, unsigned long, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl34(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl34()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl34 *other = dynamic_cast<const PythonCallbackImpl34*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned long arg1, unsigned short arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(ki)", arg1, (int) arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl36 : public ns3::CallbackImpl<void, ns3::EpcUeNas::State, ns3::EpcUeNas::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl36(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl36()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl36 *other = dynamic_cast<const PythonCallbackImpl36*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::EpcUeNas::State arg1, ns3::EpcUeNas::State arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(ii)", arg1, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl37 : public ns3::CallbackImpl<void, const ns3::SpectrumValue &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl37(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl37()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl37 *other = dynamic_cast<const PythonCallbackImpl37*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::SpectrumValue const & arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3SpectrumValue *py_SpectrumValue;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_SpectrumValue = PyObject_New(PyNs3SpectrumValue, &PyNs3SpectrumValue_Type);

        py_SpectrumValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_SpectrumValue->obj = new ns3::SpectrumValue(arg1);
        PyNs3Empty_wrapper_registry[(void *) py_SpectrumValue->obj] = (PyObject *) py_SpectrumValue;
        args = Py_BuildValue((char *) "(N)", py_SpectrumValue);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl39 : public ns3::CallbackImpl<void, ns3::mmwave::DlHarqInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl39(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl39()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl39 *other = dynamic_cast<const PythonCallbackImpl39*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::mmwave::DlHarqInfo arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3MmwaveDlHarqInfo *py_DlHarqInfo;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_DlHarqInfo = PyObject_New(PyNs3MmwaveDlHarqInfo, &PyNs3MmwaveDlHarqInfo_Type);
        py_DlHarqInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_DlHarqInfo->obj = new ns3::mmwave::DlHarqInfo(arg1);
        PyNs3MmwaveDlHarqInfo_wrapper_registry[(void *) py_DlHarqInfo->obj] = (PyObject *) py_DlHarqInfo;
        args = Py_BuildValue((char *) "(N)", py_DlHarqInfo);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl40 : public ns3::CallbackImpl<void, ns3::mmwave::UlHarqInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl40(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl40()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl40 *other = dynamic_cast<const PythonCallbackImpl40*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::mmwave::UlHarqInfo arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3MmwaveUlHarqInfo *py_UlHarqInfo;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_UlHarqInfo = PyObject_New(PyNs3MmwaveUlHarqInfo, &PyNs3MmwaveUlHarqInfo_Type);
        py_UlHarqInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_UlHarqInfo->obj = new ns3::mmwave::UlHarqInfo(arg1);
        PyNs3MmwaveUlHarqInfo_wrapper_registry[(void *) py_UlHarqInfo->obj] = (PyObject *) py_UlHarqInfo;
        args = Py_BuildValue((char *) "(N)", py_UlHarqInfo);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl41 : public ns3::CallbackImpl<void, ns3::mmwave::RxPacketTraceParams, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl41(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl41()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl41 *other = dynamic_cast<const PythonCallbackImpl41*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::mmwave::RxPacketTraceParams arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3MmwaveRxPacketTraceParams *py_RxPacketTraceParams;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_RxPacketTraceParams = PyObject_New(PyNs3MmwaveRxPacketTraceParams, &PyNs3MmwaveRxPacketTraceParams_Type);
        py_RxPacketTraceParams->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_RxPacketTraceParams->obj = new ns3::mmwave::RxPacketTraceParams(arg1);
        PyNs3MmwaveRxPacketTraceParams_wrapper_registry[(void *) py_RxPacketTraceParams->obj] = (PyObject *) py_RxPacketTraceParams;
        args = Py_BuildValue((char *) "(N)", py_RxPacketTraceParams);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl42 : public ns3::CallbackImpl<void, unsigned long, ns3::SpectrumValue &, ns3::SpectrumValue &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl42(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl42()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl42 *other = dynamic_cast<const PythonCallbackImpl42*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned long arg1, ns3::SpectrumValue & arg2, ns3::SpectrumValue & arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3SpectrumValue *py_SpectrumValue;
        PyNs3SpectrumValue *py_SpectrumValue2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_SpectrumValue = PyObject_New(PyNs3SpectrumValue, &PyNs3SpectrumValue_Type);

        py_SpectrumValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_SpectrumValue->obj = new ns3::SpectrumValue(arg2);
        PyNs3Empty_wrapper_registry[(void *) py_SpectrumValue->obj] = (PyObject *) py_SpectrumValue;
        py_SpectrumValue2 = PyObject_New(PyNs3SpectrumValue, &PyNs3SpectrumValue_Type);

        py_SpectrumValue2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_SpectrumValue2->obj = new ns3::SpectrumValue(arg3);
        PyNs3Empty_wrapper_registry[(void *) py_SpectrumValue2->obj] = (PyObject *) py_SpectrumValue2;
        args = Py_BuildValue((char *) "(kNN)", arg1, py_SpectrumValue, py_SpectrumValue2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl43 : public ns3::CallbackImpl<void, unsigned short, unsigned short, unsigned int, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl43(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl43()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl43 *other = dynamic_cast<const PythonCallbackImpl43*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2, unsigned int arg3, unsigned char arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(iiNi)", (int) arg1, (int) arg2, PyLong_FromUnsignedLong(arg3), (int) arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl44 : public ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::UeManager::State, ns3::UeManager::State, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl44(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl44()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl44 *other = dynamic_cast<const PythonCallbackImpl44*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned long arg1, unsigned short arg2, unsigned short arg3, ns3::UeManager::State arg4, ns3::UeManager::State arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(kiiii)", arg1, (int) arg2, (int) arg3, arg4, arg5);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl45 : public ns3::CallbackImpl<void, unsigned short, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl45(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl45()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl45 *other = dynamic_cast<const PythonCallbackImpl45*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, unsigned short arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(ii)", (int) arg1, (int) arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl46 : public ns3::CallbackImpl<void, unsigned long, unsigned short, unsigned short, ns3::LteRrcSap::MeasurementReport, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl46(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl46()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl46 *other = dynamic_cast<const PythonCallbackImpl46*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned long arg1, unsigned short arg2, unsigned short arg3, ns3::LteRrcSap::MeasurementReport arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3LteRrcSapMeasurementReport *py_MeasurementReport;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_MeasurementReport = PyObject_New(PyNs3LteRrcSapMeasurementReport, &PyNs3LteRrcSapMeasurementReport_Type);
        py_MeasurementReport->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_MeasurementReport->obj = new ns3::LteRrcSap::MeasurementReport(arg4);
        PyNs3LteRrcSapMeasurementReport_wrapper_registry[(void *) py_MeasurementReport->obj] = (PyObject *) py_MeasurementReport;
        args = Py_BuildValue((char *) "(kiiN)", arg1, (int) arg2, (int) arg3, py_MeasurementReport);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl48 : public ns3::CallbackImpl<void, unsigned long, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl48(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl48()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl48 *other = dynamic_cast<const PythonCallbackImpl48*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned long arg1, unsigned long arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(kk)", arg1, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl49 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl49(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl49()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl49 *other = dynamic_cast<const PythonCallbackImpl49*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_Socket);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl50 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl50(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl50()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl50 *other = dynamic_cast<const PythonCallbackImpl50*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl51 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, const ns3::Address &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl51(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl51()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl51 *other = dynamic_cast<const PythonCallbackImpl51*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl52 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl52(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl52()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl52 *other = dynamic_cast<const PythonCallbackImpl52*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, unsigned int arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        args = Py_BuildValue((char *) "(NN)", py_Socket, PyLong_FromUnsignedLong(arg2));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl53 : public ns3::CallbackImpl<void, ns3::DlSchedulingCallbackInfo, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl53(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl53()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl53 *other = dynamic_cast<const PythonCallbackImpl53*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::DlSchedulingCallbackInfo arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3DlSchedulingCallbackInfo *py_DlSchedulingCallbackInfo;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_DlSchedulingCallbackInfo = PyObject_New(PyNs3DlSchedulingCallbackInfo, &PyNs3DlSchedulingCallbackInfo_Type);
        py_DlSchedulingCallbackInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_DlSchedulingCallbackInfo->obj = new ns3::DlSchedulingCallbackInfo(arg1);
        PyNs3DlSchedulingCallbackInfo_wrapper_registry[(void *) py_DlSchedulingCallbackInfo->obj] = (PyObject *) py_DlSchedulingCallbackInfo;
        args = Py_BuildValue((char *) "(N)", py_DlSchedulingCallbackInfo);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl54 : public ns3::CallbackImpl<void, unsigned int, unsigned int, unsigned short, unsigned char, unsigned short, unsigned char, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl54(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl54()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl54 *other = dynamic_cast<const PythonCallbackImpl54*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned int arg1, unsigned int arg2, unsigned short arg3, unsigned char arg4, unsigned short arg5, unsigned char arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(NNiiii)", PyLong_FromUnsignedLong(arg1), PyLong_FromUnsignedLong(arg2), (int) arg3, (int) arg4, (int) arg5, (int) arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Object___gt__(PyObject *value, ns3::Ptr< ns3::Object > *address);


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


int _wrap_convert_py2c__double(PyObject *value, double *address);


int _wrap_convert_py2c__ns3__mmwave__TbInfoElement(PyObject *value, ns3::mmwave::TbInfoElement *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__ComponentCarrierUe___gt__(PyObject *value, ns3::Ptr< ns3::ComponentCarrierUe > *address);


int _wrap_convert_py2c__unsigned_char(PyObject *value, unsigned char *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierUe___gt__(PyObject *value, ns3::Ptr< ns3::mmwave::MmWaveComponentCarrierUe > *address);


int _wrap_convert_py2c__ns3__mmwave__MmWaveHarqProcessInfoElement_t(PyObject *value, ns3::mmwave::MmWaveHarqProcessInfoElement_t *address);


int _wrap_convert_py2c__ns3__mmwave__MmWaveComponentCarrier(PyObject *value, ns3::mmwave::MmWaveComponentCarrier *address);


int _wrap_convert_py2c__ns3__ComponentCarrier(PyObject *value, ns3::ComponentCarrier *address);


int _wrap_convert_py2c__bool(PyObject *value, bool *address);


int _wrap_convert_py2c__ns3__mmwave__MacSubheader(PyObject *value, ns3::mmwave::MacSubheader *address);


int _wrap_convert_py2c__ns3__mmwave__DlCqiInfo(PyObject *value, ns3::mmwave::DlCqiInfo *address);


int _wrap_convert_py2c__ns3__mmwave__MacCeElement(PyObject *value, ns3::mmwave::MacCeElement *address);


int _wrap_convert_py2c__ns3__mmwave__DlHarqInfo(PyObject *value, ns3::mmwave::DlHarqInfo *address);


int _wrap_convert_py2c__ns3__mmwave__UlHarqInfo(PyObject *value, ns3::mmwave::UlHarqInfo *address);


int _wrap_convert_py2c__short_unsigned_int(PyObject *value, short unsigned int *address);


int _wrap_convert_py2c__ns3__mmwave__SchedInfo(PyObject *value, ns3::mmwave::SchedInfo *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__mmwave__MmWaveControlMessage___gt__(PyObject *value, ns3::Ptr< ns3::mmwave::MmWaveControlMessage > *address);


int _wrap_convert_py2c__ns3__mmwave__RlcPduInfo(PyObject *value, ns3::mmwave::RlcPduInfo *address);


int _wrap_convert_py2c__ns3__mmwave__SlotAllocInfo(PyObject *value, ns3::mmwave::SlotAllocInfo *address);


int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__mmwave__MmWaveComponentCarrierEnb___gt__(PyObject *value, ns3::Ptr< ns3::mmwave::MmWaveComponentCarrierEnb > *address);


int _wrap_convert_py2c__ns3__mmwave__DciInfoElementTdma(PyObject *value, ns3::mmwave::DciInfoElementTdma *address);


int _wrap_convert_py2c__ns3__CeBitmap_e(PyObject *value, ns3::CeBitmap_e *address);


int _wrap_convert_py2c__ns3__DlInfoListElement_s__HarqStatus_e(PyObject *value, ns3::DlInfoListElement_s::HarqStatus_e *address);


int _wrap_convert_py2c__ns3__EpcEnbS1SapProvider__BearerToBeSwitched(PyObject *value, ns3::EpcEnbS1SapProvider::BearerToBeSwitched *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem(PyObject *value, ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__UlHighInterferenceInformationItem(PyObject *value, ns3::EpcX2Sap::UlHighInterferenceInformationItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__ErabToBeSetupItem(PyObject *value, ns3::EpcX2Sap::ErabToBeSetupItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__RlcSetupRequest(PyObject *value, ns3::EpcX2Sap::RlcSetupRequest *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__ErabAdmittedItem(PyObject *value, ns3::EpcX2Sap::ErabAdmittedItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__ErabNotAdmittedItem(PyObject *value, ns3::EpcX2Sap::ErabNotAdmittedItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem(PyObject *value, ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__CellInformationItem(PyObject *value, ns3::EpcX2Sap::CellInformationItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__CellMeasurementResultItem(PyObject *value, ns3::EpcX2Sap::CellMeasurementResultItem *address);


int _wrap_convert_py2c__long_unsigned_int(PyObject *value, long unsigned int *address);


int _wrap_convert_py2c__ns3__VendorSpecificListElement_s(PyObject *value, ns3::VendorSpecificListElement_s *address);


int _wrap_convert_py2c__ns3__LogicalChannelConfigListElement_s(PyObject *value, ns3::LogicalChannelConfigListElement_s *address);


int _wrap_convert_py2c__ns3__PagingInfoListElement_s(PyObject *value, ns3::PagingInfoListElement_s *address);


int _wrap_convert_py2c__ns3__DlInfoListElement_s(PyObject *value, ns3::DlInfoListElement_s *address);


int _wrap_convert_py2c__ns3__RachListElement_s(PyObject *value, ns3::RachListElement_s *address);


int _wrap_convert_py2c__ns3__CqiListElement_s(PyObject *value, ns3::CqiListElement_s *address);


int _wrap_convert_py2c__ns3__UlInfoListElement_s(PyObject *value, ns3::UlInfoListElement_s *address);


int _wrap_convert_py2c__ns3__SrListElement_s(PyObject *value, ns3::SrListElement_s *address);


int _wrap_convert_py2c__ns3__MacCeListElement_s(PyObject *value, ns3::MacCeListElement_s *address);


int _wrap_convert_py2c__ns3__BuildDataListElement_s(PyObject *value, ns3::BuildDataListElement_s *address);


int _wrap_convert_py2c__ns3__BuildRarListElement_s(PyObject *value, ns3::BuildRarListElement_s *address);


int _wrap_convert_py2c__ns3__BuildBroadcastListElement_s(PyObject *value, ns3::BuildBroadcastListElement_s *address);


int _wrap_convert_py2c__ns3__UlDciListElement_s(PyObject *value, ns3::UlDciListElement_s *address);


int _wrap_convert_py2c__ns3__PhichListElement_s(PyObject *value, ns3::PhichListElement_s *address);


int _wrap_convert_py2c__ns3__LogComponent___star__(PyObject *value, ns3::LogComponent * *address);


int _wrap_convert_py2c__ns3__LteCcmRrcSapProvider__LcsConfig(PyObject *value, ns3::LteCcmRrcSapProvider::LcsConfig *address);


int _wrap_convert_py2c__ns3__LteRrcSap__LogicalChannelConfig(PyObject *value, ns3::LteRrcSap::LogicalChannelConfig *address);


int _wrap_convert_py2c__ns3__LteRrcSap__SrbToAddMod(PyObject *value, ns3::LteRrcSap::SrbToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__DrbToAddMod(PyObject *value, ns3::LteRrcSap::DrbToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__CellsToAddMod(PyObject *value, ns3::LteRrcSap::CellsToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__BlackCellsToAddMod(PyObject *value, ns3::LteRrcSap::BlackCellsToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasObjectToAddMod(PyObject *value, ns3::LteRrcSap::MeasObjectToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__ReportConfigToAddMod(PyObject *value, ns3::LteRrcSap::ReportConfigToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasIdToAddMod(PyObject *value, ns3::LteRrcSap::MeasIdToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasResultScell(PyObject *value, ns3::LteRrcSap::MeasResultScell *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasResultBestNeighCell(PyObject *value, ns3::LteRrcSap::MeasResultBestNeighCell *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasResultEutra(PyObject *value, ns3::LteRrcSap::MeasResultEutra *address);


int _wrap_convert_py2c__ns3__LteRrcSap__SCellToAddMod(PyObject *value, ns3::LteRrcSap::SCellToAddMod *address);


int _wrap_convert_py2c__int(PyObject *value, int *address);


int _wrap_convert_py2c__ns3__LteUeCcmRrcSapProvider__LcsConfig(PyObject *value, ns3::LteUeCcmRrcSapProvider::LcsConfig *address);


int _wrap_convert_py2c__ns3__LteUeCphySapUser__UeMeasurementsElement(PyObject *value, ns3::LteUeCphySapUser::UeMeasurementsElement *address);


int _wrap_convert_py2c__ns3__HigherLayerSelected_s(PyObject *value, ns3::HigherLayerSelected_s *address);


int _wrap_convert_py2c__ns3__SiMessageListElement_s(PyObject *value, ns3::SiMessageListElement_s *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Packet___gt__(PyObject *value, ns3::Ptr< ns3::Packet > *address);


int _wrap_convert_py2c__ns3__Ipv6Address(PyObject *value, ns3::Ipv6Address *address);


int _wrap_convert_py2c__ns3__BandInfo(PyObject *value, ns3::BandInfo *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__ComponentCarrierEnb___gt__(PyObject *value, ns3::Ptr< ns3::ComponentCarrierEnb > *address);


int _wrap_convert_py2c__ns3__LteEnbRrc__MmWaveComponentCarrierConf(PyObject *value, ns3::LteEnbRrc::MmWaveComponentCarrierConf *address);


int _wrap_convert_py2c__ns3__LteEnbRrc__HandoverEventInfo(PyObject *value, ns3::LteEnbRrc::HandoverEventInfo *address);


int _wrap_convert_py2c__ns3__HarqProcessInfoElement_t(PyObject *value, ns3::HarqProcessInfoElement_t *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__LteControlMessage___gt__(PyObject *value, ns3::Ptr< ns3::LteControlMessage > *address);


int _wrap_convert_py2c__ns3__LteRlcAm__RetxPdu(PyObject *value, ns3::LteRlcAm::RetxPdu *address);


int _wrap_convert_py2c__ns3__UlDciLteControlMessage(PyObject *value, ns3::UlDciLteControlMessage *address);

